
CAN_test_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fe4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080020f0  080020f0  000030f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002114  08002114  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002114  08002114  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002114  08002114  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002114  08002114  00003114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002118  08002118  00003118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800211c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08002128  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002128  000040a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a1b  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012e5  00000000  00000000  00008a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000538  00000000  00000000  00009d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003cc  00000000  00000000  0000a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f28  00000000  00000000  0000a63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005493  00000000  00000000  00020564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e5f8  00000000  00000000  000259f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3fef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013a0  00000000  00000000  000a4034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000a53d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080020d8 	.word	0x080020d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080020d8 	.word	0x080020d8

0800014c <HAL_CAN_RxFifo1MsgPendingCallback>:

		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData,&TxMailbox);
	}
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000154:	4b08      	ldr	r3, [pc, #32]	@ (8000178 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000156:	4a09      	ldr	r2, [pc, #36]	@ (800017c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000158:	2101      	movs	r1, #1
 800015a:	6878      	ldr	r0, [r7, #4]
 800015c:	f000 fd85 	bl	8000c6a <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 2){
 8000160:	4b06      	ldr	r3, [pc, #24]	@ (800017c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000162:	691b      	ldr	r3, [r3, #16]
 8000164:	2b02      	cmp	r3, #2
 8000166:	d102      	bne.n	800016e <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
		datacheck = 1;
 8000168:	4b05      	ldr	r3, [pc, #20]	@ (8000180 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800016a:	2201      	movs	r2, #1
 800016c:	601a      	str	r2, [r3, #0]
	}
}
 800016e:	bf00      	nop
 8000170:	3708      	adds	r7, #8
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	2000008c 	.word	0x2000008c
 800017c:	20000068 	.word	0x20000068
 8000180:	20000098 	.word	0x20000098

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018a:	f000 fa11 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018e:	f000 f851 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000192:	f000 f8df 	bl	8000354 <MX_GPIO_Init>
  MX_CAN_Init();
 8000196:	f000 f889 	bl	80002ac <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

	HAL_CAN_Start(&hcan);
 800019a:	481f      	ldr	r0, [pc, #124]	@ (8000218 <main+0x94>)
 800019c:	f000 fc52 	bl	8000a44 <HAL_CAN_Start>

	// ACtivate the notification
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80001a0:	2110      	movs	r1, #16
 80001a2:	481d      	ldr	r0, [pc, #116]	@ (8000218 <main+0x94>)
 80001a4:	f000 fe82 	bl	8000eac <HAL_CAN_ActivateNotification>

	TxHeader.DLC = 2; // data length
 80001a8:	4b1c      	ldr	r3, [pc, #112]	@ (800021c <main+0x98>)
 80001aa:	2202      	movs	r2, #2
 80001ac:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 80001ae:	4b1b      	ldr	r3, [pc, #108]	@ (800021c <main+0x98>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80001b4:	4b19      	ldr	r3, [pc, #100]	@ (800021c <main+0x98>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x103; // ID
 80001ba:	4b18      	ldr	r3, [pc, #96]	@ (800021c <main+0x98>)
 80001bc:	f240 1203 	movw	r2, #259	@ 0x103
 80001c0:	601a      	str	r2, [r3, #0]

	TxData[0] = 50; // ms delay
 80001c2:	4b17      	ldr	r3, [pc, #92]	@ (8000220 <main+0x9c>)
 80001c4:	2232      	movs	r2, #50	@ 0x32
 80001c6:	701a      	strb	r2, [r3, #0]
	TxData[1] = 20; // loop rep
 80001c8:	4b15      	ldr	r3, [pc, #84]	@ (8000220 <main+0x9c>)
 80001ca:	2214      	movs	r2, #20
 80001cc:	705a      	strb	r2, [r3, #1]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(datacheck){
 80001ce:	4b15      	ldr	r3, [pc, #84]	@ (8000224 <main+0xa0>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d0fb      	beq.n	80001ce <main+0x4a>
		  for(int i = 0; i < RxData[1]; i++){
 80001d6:	2300      	movs	r3, #0
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	e00c      	b.n	80001f6 <main+0x72>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e0:	4811      	ldr	r0, [pc, #68]	@ (8000228 <main+0xa4>)
 80001e2:	f001 fb55 	bl	8001890 <HAL_GPIO_TogglePin>
			  HAL_Delay(RxData[0]);
 80001e6:	4b11      	ldr	r3, [pc, #68]	@ (800022c <main+0xa8>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 fa42 	bl	8000674 <HAL_Delay>
		  for(int i = 0; i < RxData[1]; i++){
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3301      	adds	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	4b0d      	ldr	r3, [pc, #52]	@ (800022c <main+0xa8>)
 80001f8:	785b      	ldrb	r3, [r3, #1]
 80001fa:	461a      	mov	r2, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4293      	cmp	r3, r2
 8000200:	dbec      	blt.n	80001dc <main+0x58>
		  }
		  datacheck = 0;
 8000202:	4b08      	ldr	r3, [pc, #32]	@ (8000224 <main+0xa0>)
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]

		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <main+0xac>)
 800020a:	4a05      	ldr	r2, [pc, #20]	@ (8000220 <main+0x9c>)
 800020c:	4903      	ldr	r1, [pc, #12]	@ (800021c <main+0x98>)
 800020e:	4802      	ldr	r0, [pc, #8]	@ (8000218 <main+0x94>)
 8000210:	f000 fc5c 	bl	8000acc <HAL_CAN_AddTxMessage>
	  if(datacheck){
 8000214:	e7db      	b.n	80001ce <main+0x4a>
 8000216:	bf00      	nop
 8000218:	20000028 	.word	0x20000028
 800021c:	20000050 	.word	0x20000050
 8000220:	20000084 	.word	0x20000084
 8000224:	20000098 	.word	0x20000098
 8000228:	40011000 	.word	0x40011000
 800022c:	2000008c 	.word	0x2000008c
 8000230:	20000094 	.word	0x20000094

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	@ 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	@ 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 ff1c 	bl	8002080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	2301      	movs	r3, #1
 800025c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025e:	2310      	movs	r3, #16
 8000260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000262:	2300      	movs	r3, #0
 8000264:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fb2a 	bl	80018c4 <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000276:	f000 f8ad 	bl	80003d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800027e:	2300      	movs	r3, #0
 8000280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fd98 	bl	8001dc8 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029e:	f000 f899 	bl	80003d4 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	@ 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08a      	sub	sp, #40	@ 0x28
 80002b0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002b2:	4b26      	ldr	r3, [pc, #152]	@ (800034c <MX_CAN_Init+0xa0>)
 80002b4:	4a26      	ldr	r2, [pc, #152]	@ (8000350 <MX_CAN_Init+0xa4>)
 80002b6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80002b8:	4b24      	ldr	r3, [pc, #144]	@ (800034c <MX_CAN_Init+0xa0>)
 80002ba:	2203      	movs	r2, #3
 80002bc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002be:	4b23      	ldr	r3, [pc, #140]	@ (800034c <MX_CAN_Init+0xa0>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002c4:	4b21      	ldr	r3, [pc, #132]	@ (800034c <MX_CAN_Init+0xa0>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80002ca:	4b20      	ldr	r3, [pc, #128]	@ (800034c <MX_CAN_Init+0xa0>)
 80002cc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80002d0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80002d2:	4b1e      	ldr	r3, [pc, #120]	@ (800034c <MX_CAN_Init+0xa0>)
 80002d4:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80002d8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002da:	4b1c      	ldr	r3, [pc, #112]	@ (800034c <MX_CAN_Init+0xa0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002e0:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <MX_CAN_Init+0xa0>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002e6:	4b19      	ldr	r3, [pc, #100]	@ (800034c <MX_CAN_Init+0xa0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002ec:	4b17      	ldr	r3, [pc, #92]	@ (800034c <MX_CAN_Init+0xa0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002f2:	4b16      	ldr	r3, [pc, #88]	@ (800034c <MX_CAN_Init+0xa0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002f8:	4b14      	ldr	r3, [pc, #80]	@ (800034c <MX_CAN_Init+0xa0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002fe:	4813      	ldr	r0, [pc, #76]	@ (800034c <MX_CAN_Init+0xa0>)
 8000300:	f000 f9dc 	bl	80006bc <HAL_CAN_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800030a:	f000 f863 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800030e:	2301      	movs	r3, #1
 8000310:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000312:	230a      	movs	r3, #10
 8000314:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000316:	2301      	movs	r3, #1
 8000318:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x446<<5;
 800031a:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 800031e:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 8000320:	2300      	movs	r3, #0
 8000322:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 8000324:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 8000328:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800032e:	2300      	movs	r3, #0
 8000330:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000332:	2301      	movs	r3, #1
 8000334:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 0;  // does not matter in single can controllers
 8000336:	2300      	movs	r3, #0
 8000338:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800033a:	463b      	mov	r3, r7
 800033c:	4619      	mov	r1, r3
 800033e:	4803      	ldr	r0, [pc, #12]	@ (800034c <MX_CAN_Init+0xa0>)
 8000340:	f000 fab7 	bl	80008b2 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000344:	bf00      	nop
 8000346:	3728      	adds	r7, #40	@ 0x28
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000028 	.word	0x20000028
 8000350:	40006400 	.word	0x40006400

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0308 	add.w	r3, r7, #8
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000368:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <MX_GPIO_Init+0x78>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a17      	ldr	r2, [pc, #92]	@ (80003cc <MX_GPIO_Init+0x78>)
 800036e:	f043 0310 	orr.w	r3, r3, #16
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <MX_GPIO_Init+0x78>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0310 	and.w	r3, r3, #16
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <MX_GPIO_Init+0x78>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a11      	ldr	r2, [pc, #68]	@ (80003cc <MX_GPIO_Init+0x78>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <MX_GPIO_Init+0x78>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800039e:	480c      	ldr	r0, [pc, #48]	@ (80003d0 <MX_GPIO_Init+0x7c>)
 80003a0:	f001 fa5e 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2302      	movs	r3, #2
 80003b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b6:	f107 0308 	add.w	r3, r7, #8
 80003ba:	4619      	mov	r1, r3
 80003bc:	4804      	ldr	r0, [pc, #16]	@ (80003d0 <MX_GPIO_Init+0x7c>)
 80003be:	f001 f8cb 	bl	8001558 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003c2:	bf00      	nop
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40011000 	.word	0x40011000

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d8:	b672      	cpsid	i
}
 80003da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <Error_Handler+0x8>

080003e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	4b15      	ldr	r3, [pc, #84]	@ (800043c <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a14      	ldr	r2, [pc, #80]	@ (800043c <HAL_MspInit+0x5c>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b12      	ldr	r3, [pc, #72]	@ (800043c <HAL_MspInit+0x5c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fe:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a0e      	ldr	r2, [pc, #56]	@ (800043c <HAL_MspInit+0x5c>)
 8000404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <HAL_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000416:	4b0a      	ldr	r3, [pc, #40]	@ (8000440 <HAL_MspInit+0x60>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	4a04      	ldr	r2, [pc, #16]	@ (8000440 <HAL_MspInit+0x60>)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000
 8000440:	40010000 	.word	0x40010000

08000444 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a20      	ldr	r2, [pc, #128]	@ (80004e0 <HAL_CAN_MspInit+0x9c>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d139      	bne.n	80004d8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000464:	4b1f      	ldr	r3, [pc, #124]	@ (80004e4 <HAL_CAN_MspInit+0xa0>)
 8000466:	69db      	ldr	r3, [r3, #28]
 8000468:	4a1e      	ldr	r2, [pc, #120]	@ (80004e4 <HAL_CAN_MspInit+0xa0>)
 800046a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800046e:	61d3      	str	r3, [r2, #28]
 8000470:	4b1c      	ldr	r3, [pc, #112]	@ (80004e4 <HAL_CAN_MspInit+0xa0>)
 8000472:	69db      	ldr	r3, [r3, #28]
 8000474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047c:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <HAL_CAN_MspInit+0xa0>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a18      	ldr	r2, [pc, #96]	@ (80004e4 <HAL_CAN_MspInit+0xa0>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <HAL_CAN_MspInit+0xa0>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0304 	and.w	r3, r3, #4
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000494:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000498:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	4619      	mov	r1, r3
 80004a8:	480f      	ldr	r0, [pc, #60]	@ (80004e8 <HAL_CAN_MspInit+0xa4>)
 80004aa:	f001 f855 	bl	8001558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b4:	2302      	movs	r3, #2
 80004b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b8:	2303      	movs	r3, #3
 80004ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	4809      	ldr	r0, [pc, #36]	@ (80004e8 <HAL_CAN_MspInit+0xa4>)
 80004c4:	f001 f848 	bl	8001558 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2100      	movs	r1, #0
 80004cc:	2015      	movs	r0, #21
 80004ce:	f001 f80c 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80004d2:	2015      	movs	r0, #21
 80004d4:	f001 f825 	bl	8001522 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80004d8:	bf00      	nop
 80004da:	3720      	adds	r7, #32
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40006400 	.word	0x40006400
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010800 	.word	0x40010800

080004ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <NMI_Handler+0x4>

080004f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <HardFault_Handler+0x4>

080004fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <MemManage_Handler+0x4>

08000504 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <BusFault_Handler+0x4>

0800050c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <UsageFault_Handler+0x4>

08000514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053c:	f000 f87e 	bl	800063c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000548:	4802      	ldr	r0, [pc, #8]	@ (8000554 <CAN1_RX1_IRQHandler+0x10>)
 800054a:	f000 fcd4 	bl	8000ef6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000028 	.word	0x20000028

08000558 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000564:	f7ff fff8 	bl	8000558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000568:	480b      	ldr	r0, [pc, #44]	@ (8000598 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800056a:	490c      	ldr	r1, [pc, #48]	@ (800059c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800056c:	4a0c      	ldr	r2, [pc, #48]	@ (80005a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000570:	e002      	b.n	8000578 <LoopCopyDataInit>

08000572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000576:	3304      	adds	r3, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800057c:	d3f9      	bcc.n	8000572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057e:	4a09      	ldr	r2, [pc, #36]	@ (80005a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000580:	4c09      	ldr	r4, [pc, #36]	@ (80005a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000584:	e001      	b.n	800058a <LoopFillZerobss>

08000586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000588:	3204      	adds	r2, #4

0800058a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800058c:	d3fb      	bcc.n	8000586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800058e:	f001 fd7f 	bl	8002090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000592:	f7ff fdf7 	bl	8000184 <main>
  bx lr
 8000596:	4770      	bx	lr
  ldr r0, =_sdata
 8000598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800059c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005a0:	0800211c 	.word	0x0800211c
  ldr r2, =_sbss
 80005a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a8:	200000a0 	.word	0x200000a0

080005ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ac:	e7fe      	b.n	80005ac <ADC1_2_IRQHandler>
	...

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <HAL_Init+0x28>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <HAL_Init+0x28>)
 80005ba:	f043 0310 	orr.w	r3, r3, #16
 80005be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c0:	2003      	movs	r0, #3
 80005c2:	f000 ff87 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c6:	200f      	movs	r0, #15
 80005c8:	f000 f808 	bl	80005dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005cc:	f7ff ff08 	bl	80003e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40022000 	.word	0x40022000

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e4:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <HAL_InitTick+0x54>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <HAL_InitTick+0x58>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 ff9f 	bl	800153e <HAL_SYSTICK_Config>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	e00e      	b.n	8000628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d80a      	bhi.n	8000626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000610:	2200      	movs	r2, #0
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000618:	f000 ff67 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800061c:	4a06      	ldr	r2, [pc, #24]	@ (8000638 <HAL_InitTick+0x5c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000622:	2300      	movs	r3, #0
 8000624:	e000      	b.n	8000628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000000 	.word	0x20000000
 8000634:	20000008 	.word	0x20000008
 8000638:	20000004 	.word	0x20000004

0800063c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <HAL_IncTick+0x1c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b05      	ldr	r3, [pc, #20]	@ (800065c <HAL_IncTick+0x20>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a03      	ldr	r2, [pc, #12]	@ (800065c <HAL_IncTick+0x20>)
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	20000008 	.word	0x20000008
 800065c:	2000009c 	.word	0x2000009c

08000660 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b02      	ldr	r3, [pc, #8]	@ (8000670 <HAL_GetTick+0x10>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	2000009c 	.word	0x2000009c

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff0 	bl	8000660 <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <HAL_Delay+0x44>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffe0 	bl	8000660 <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8f7      	bhi.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000008 	.word	0x20000008

080006bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e0ed      	b.n	80008aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff feb2 	bl	8000444 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f042 0201 	orr.w	r2, r2, #1
 80006ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006f0:	f7ff ffb6 	bl	8000660 <HAL_GetTick>
 80006f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006f6:	e012      	b.n	800071e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006f8:	f7ff ffb2 	bl	8000660 <HAL_GetTick>
 80006fc:	4602      	mov	r2, r0
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	2b0a      	cmp	r3, #10
 8000704:	d90b      	bls.n	800071e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800070a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2205      	movs	r2, #5
 8000716:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	e0c5      	b.n	80008aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	2b00      	cmp	r3, #0
 800072a:	d0e5      	beq.n	80006f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f022 0202 	bic.w	r2, r2, #2
 800073a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800073c:	f7ff ff90 	bl	8000660 <HAL_GetTick>
 8000740:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000742:	e012      	b.n	800076a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000744:	f7ff ff8c 	bl	8000660 <HAL_GetTick>
 8000748:	4602      	mov	r2, r0
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	2b0a      	cmp	r3, #10
 8000750:	d90b      	bls.n	800076a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000756:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2205      	movs	r2, #5
 8000762:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e09f      	b.n	80008aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	2b00      	cmp	r3, #0
 8000776:	d1e5      	bne.n	8000744 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	7e1b      	ldrb	r3, [r3, #24]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d108      	bne.n	8000792 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	e007      	b.n	80007a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80007a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	7e5b      	ldrb	r3, [r3, #25]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d108      	bne.n	80007bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	e007      	b.n	80007cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80007ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	7e9b      	ldrb	r3, [r3, #26]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d108      	bne.n	80007e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f042 0220 	orr.w	r2, r2, #32
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	e007      	b.n	80007f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f022 0220 	bic.w	r2, r2, #32
 80007f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	7edb      	ldrb	r3, [r3, #27]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d108      	bne.n	8000810 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f022 0210 	bic.w	r2, r2, #16
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	e007      	b.n	8000820 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f042 0210 	orr.w	r2, r2, #16
 800081e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7f1b      	ldrb	r3, [r3, #28]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d108      	bne.n	800083a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f042 0208 	orr.w	r2, r2, #8
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	e007      	b.n	800084a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f022 0208 	bic.w	r2, r2, #8
 8000848:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	7f5b      	ldrb	r3, [r3, #29]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d108      	bne.n	8000864 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f042 0204 	orr.w	r2, r2, #4
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	e007      	b.n	8000874 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f022 0204 	bic.w	r2, r2, #4
 8000872:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	431a      	orrs	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	431a      	orrs	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	ea42 0103 	orr.w	r1, r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	1e5a      	subs	r2, r3, #1
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	430a      	orrs	r2, r1
 8000898:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2201      	movs	r2, #1
 80008a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b087      	sub	sp, #28
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008c8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80008ca:	7cfb      	ldrb	r3, [r7, #19]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d003      	beq.n	80008d8 <HAL_CAN_ConfigFilter+0x26>
 80008d0:	7cfb      	ldrb	r3, [r7, #19]
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	f040 80aa 	bne.w	8000a2c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80008de:	f043 0201 	orr.w	r2, r3, #1
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	2201      	movs	r2, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	43db      	mvns	r3, r3
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d123      	bne.n	800095a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	43db      	mvns	r3, r3
 800091c:	401a      	ands	r2, r3
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000934:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3248      	adds	r2, #72	@ 0x48
 800093a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800094e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000950:	6979      	ldr	r1, [r7, #20]
 8000952:	3348      	adds	r3, #72	@ 0x48
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	440b      	add	r3, r1
 8000958:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d122      	bne.n	80009a8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	431a      	orrs	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000982:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3248      	adds	r2, #72	@ 0x48
 8000988:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800099c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800099e:	6979      	ldr	r1, [r7, #20]
 80009a0:	3348      	adds	r3, #72	@ 0x48
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	440b      	add	r3, r1
 80009a6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d109      	bne.n	80009c4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	43db      	mvns	r3, r3
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80009c2:	e007      	b.n	80009d4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	431a      	orrs	r2, r3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d109      	bne.n	80009f0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	43db      	mvns	r3, r3
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80009ee:	e007      	b.n	8000a00 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	431a      	orrs	r2, r3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	6a1b      	ldr	r3, [r3, #32]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d107      	bne.n	8000a18 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	431a      	orrs	r2, r3
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000a1e:	f023 0201 	bic.w	r2, r3, #1
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e006      	b.n	8000a3a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a30:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
  }
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	371c      	adds	r7, #28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d12e      	bne.n	8000ab6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f022 0201 	bic.w	r2, r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a70:	f7ff fdf6 	bl	8000660 <HAL_GetTick>
 8000a74:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a76:	e012      	b.n	8000a9e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a78:	f7ff fdf2 	bl	8000660 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	2b0a      	cmp	r3, #10
 8000a84:	d90b      	bls.n	8000a9e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2205      	movs	r2, #5
 8000a96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e012      	b.n	8000ac4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1e5      	bne.n	8000a78 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e006      	b.n	8000ac4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aba:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
  }
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	@ 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000aea:	7ffb      	ldrb	r3, [r7, #31]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d003      	beq.n	8000af8 <HAL_CAN_AddTxMessage+0x2c>
 8000af0:	7ffb      	ldrb	r3, [r7, #31]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	f040 80ad 	bne.w	8000c52 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d10a      	bne.n	8000b18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d105      	bne.n	8000b18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 8095 	beq.w	8000c42 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	0e1b      	lsrs	r3, r3, #24
 8000b1c:	f003 0303 	and.w	r3, r3, #3
 8000b20:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000b22:	2201      	movs	r2, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10d      	bne.n	8000b50 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b3e:	68f9      	ldr	r1, [r7, #12]
 8000b40:	6809      	ldr	r1, [r1, #0]
 8000b42:	431a      	orrs	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3318      	adds	r3, #24
 8000b48:	011b      	lsls	r3, r3, #4
 8000b4a:	440b      	add	r3, r1
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	e00f      	b.n	8000b70 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b5a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b60:	68f9      	ldr	r1, [r7, #12]
 8000b62:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000b64:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3318      	adds	r3, #24
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	440b      	add	r3, r1
 8000b6e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	6819      	ldr	r1, [r3, #0]
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	691a      	ldr	r2, [r3, #16]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3318      	adds	r3, #24
 8000b7c:	011b      	lsls	r3, r3, #4
 8000b7e:	440b      	add	r3, r1
 8000b80:	3304      	adds	r3, #4
 8000b82:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	7d1b      	ldrb	r3, [r3, #20]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d111      	bne.n	8000bb0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3318      	adds	r3, #24
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	4413      	add	r3, r2
 8000b98:	3304      	adds	r3, #4
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	6811      	ldr	r1, [r2, #0]
 8000ba0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	3318      	adds	r3, #24
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	440b      	add	r3, r1
 8000bac:	3304      	adds	r3, #4
 8000bae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3307      	adds	r3, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	061a      	lsls	r2, r3, #24
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3306      	adds	r3, #6
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	041b      	lsls	r3, r3, #16
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3305      	adds	r3, #5
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	3204      	adds	r2, #4
 8000bd0:	7812      	ldrb	r2, [r2, #0]
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	6811      	ldr	r1, [r2, #0]
 8000bd8:	ea43 0200 	orr.w	r2, r3, r0
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	011b      	lsls	r3, r3, #4
 8000be0:	440b      	add	r3, r1
 8000be2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000be6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3303      	adds	r3, #3
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	061a      	lsls	r2, r3, #24
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	041b      	lsls	r3, r3, #16
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	021b      	lsls	r3, r3, #8
 8000c02:	4313      	orrs	r3, r2
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	7812      	ldrb	r2, [r2, #0]
 8000c08:	4610      	mov	r0, r2
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	6811      	ldr	r1, [r2, #0]
 8000c0e:	ea43 0200 	orr.w	r2, r3, r0
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	440b      	add	r3, r1
 8000c18:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000c1c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3318      	adds	r3, #24
 8000c26:	011b      	lsls	r3, r3, #4
 8000c28:	4413      	add	r3, r2
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	6811      	ldr	r1, [r2, #0]
 8000c30:	f043 0201 	orr.w	r2, r3, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3318      	adds	r3, #24
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	440b      	add	r3, r1
 8000c3c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e00e      	b.n	8000c60 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e006      	b.n	8000c60 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c56:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
  }
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3724      	adds	r7, #36	@ 0x24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b087      	sub	sp, #28
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d003      	beq.n	8000c8e <HAL_CAN_GetRxMessage+0x24>
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	f040 8103 	bne.w	8000e94 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10e      	bne.n	8000cb2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d116      	bne.n	8000cd0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e0f7      	b.n	8000ea2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d107      	bne.n	8000cd0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e0e8      	b.n	8000ea2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	331b      	adds	r3, #27
 8000cd8:	011b      	lsls	r3, r3, #4
 8000cda:	4413      	add	r3, r2
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0204 	and.w	r2, r3, #4
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10c      	bne.n	8000d08 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	331b      	adds	r3, #27
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	4413      	add	r3, r2
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	0d5b      	lsrs	r3, r3, #21
 8000cfe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e00b      	b.n	8000d20 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	331b      	adds	r3, #27
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	4413      	add	r3, r2
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	08db      	lsrs	r3, r3, #3
 8000d18:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	331b      	adds	r3, #27
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	4413      	add	r3, r2
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0202 	and.w	r2, r3, #2
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	331b      	adds	r3, #27
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	4413      	add	r3, r2
 8000d42:	3304      	adds	r3, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2208      	movs	r2, #8
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	e00b      	b.n	8000d6e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	331b      	adds	r3, #27
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	4413      	add	r3, r2
 8000d62:	3304      	adds	r3, #4
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 020f 	and.w	r2, r3, #15
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	331b      	adds	r3, #27
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	4413      	add	r3, r2
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	0a1b      	lsrs	r3, r3, #8
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	331b      	adds	r3, #27
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	4413      	add	r3, r2
 8000d92:	3304      	adds	r3, #4
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	0c1b      	lsrs	r3, r3, #16
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	4413      	add	r3, r2
 8000da8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	4413      	add	r3, r2
 8000dbe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	0a1a      	lsrs	r2, r3, #8
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	4413      	add	r3, r2
 8000dd8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	0c1a      	lsrs	r2, r3, #16
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	3302      	adds	r3, #2
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	4413      	add	r3, r2
 8000df2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	0e1a      	lsrs	r2, r3, #24
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	3303      	adds	r3, #3
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	4413      	add	r3, r2
 8000e0c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	3304      	adds	r3, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	4413      	add	r3, r2
 8000e24:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	0a1a      	lsrs	r2, r3, #8
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	3305      	adds	r3, #5
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	4413      	add	r3, r2
 8000e3e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	0c1a      	lsrs	r2, r3, #16
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	3306      	adds	r3, #6
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	4413      	add	r3, r2
 8000e58:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	0e1a      	lsrs	r2, r3, #24
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	3307      	adds	r3, #7
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d108      	bne.n	8000e80 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f042 0220 	orr.w	r2, r2, #32
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	e007      	b.n	8000e90 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f042 0220 	orr.w	r2, r2, #32
 8000e8e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e006      	b.n	8000ea2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e98:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
  }
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	371c      	adds	r7, #28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ebc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d002      	beq.n	8000eca <HAL_CAN_ActivateNotification+0x1e>
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d109      	bne.n	8000ede <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6959      	ldr	r1, [r3, #20]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e006      	b.n	8000eec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
  }
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b08a      	sub	sp, #40	@ 0x28
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d07c      	beq.n	8001036 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d023      	beq.n	8000f8e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f983 	bl	8001264 <HAL_CAN_TxMailbox0CompleteCallback>
 8000f5e:	e016      	b.n	8000f8e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d004      	beq.n	8000f74 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f72:	e00c      	b.n	8000f8e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f86:	e002      	b.n	8000f8e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f986 	bl	800129a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d024      	beq.n	8000fe2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fa0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f962 	bl	8001276 <HAL_CAN_TxMailbox1CompleteCallback>
 8000fb2:	e016      	b.n	8000fe2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d004      	beq.n	8000fc8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fc6:	e00c      	b.n	8000fe2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d004      	beq.n	8000fdc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fda:	e002      	b.n	8000fe2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f965 	bl	80012ac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d024      	beq.n	8001036 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ff4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f941 	bl	8001288 <HAL_CAN_TxMailbox2CompleteCallback>
 8001006:	e016      	b.n	8001036 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d004      	beq.n	800101c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
 800101a:	e00c      	b.n	8001036 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d004      	beq.n	8001030 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
 800102e:	e002      	b.n	8001036 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f944 	bl	80012be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00c      	beq.n	800105a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2210      	movs	r2, #16
 8001058:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00b      	beq.n	800107c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d006      	beq.n	800107c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2208      	movs	r2, #8
 8001074:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f933 	bl	80012e2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d009      	beq.n	800109a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f91b 	bl	80012d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00c      	beq.n	80010be <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d007      	beq.n	80010be <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2210      	movs	r2, #16
 80010bc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	f003 0320 	and.w	r3, r3, #32
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00b      	beq.n	80010e0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d006      	beq.n	80010e0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2208      	movs	r2, #8
 80010d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f90a 	bl	80012f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d009      	beq.n	80010fe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff f827 	bl	800014c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00b      	beq.n	8001120 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2210      	movs	r2, #16
 8001118:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f8f3 	bl	8001306 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2208      	movs	r2, #8
 800113a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f8eb 	bl	8001318 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d07b      	beq.n	8001244 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	2b00      	cmp	r3, #0
 8001154:	d072      	beq.n	800123c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001178:	2b00      	cmp	r3, #0
 800117a:	d008      	beq.n	800118e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001194:	2b00      	cmp	r3, #0
 8001196:	d008      	beq.n	80011aa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80011a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d043      	beq.n	800123c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d03e      	beq.n	800123c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80011c4:	2b60      	cmp	r3, #96	@ 0x60
 80011c6:	d02b      	beq.n	8001220 <HAL_CAN_IRQHandler+0x32a>
 80011c8:	2b60      	cmp	r3, #96	@ 0x60
 80011ca:	d82e      	bhi.n	800122a <HAL_CAN_IRQHandler+0x334>
 80011cc:	2b50      	cmp	r3, #80	@ 0x50
 80011ce:	d022      	beq.n	8001216 <HAL_CAN_IRQHandler+0x320>
 80011d0:	2b50      	cmp	r3, #80	@ 0x50
 80011d2:	d82a      	bhi.n	800122a <HAL_CAN_IRQHandler+0x334>
 80011d4:	2b40      	cmp	r3, #64	@ 0x40
 80011d6:	d019      	beq.n	800120c <HAL_CAN_IRQHandler+0x316>
 80011d8:	2b40      	cmp	r3, #64	@ 0x40
 80011da:	d826      	bhi.n	800122a <HAL_CAN_IRQHandler+0x334>
 80011dc:	2b30      	cmp	r3, #48	@ 0x30
 80011de:	d010      	beq.n	8001202 <HAL_CAN_IRQHandler+0x30c>
 80011e0:	2b30      	cmp	r3, #48	@ 0x30
 80011e2:	d822      	bhi.n	800122a <HAL_CAN_IRQHandler+0x334>
 80011e4:	2b10      	cmp	r3, #16
 80011e6:	d002      	beq.n	80011ee <HAL_CAN_IRQHandler+0x2f8>
 80011e8:	2b20      	cmp	r3, #32
 80011ea:	d005      	beq.n	80011f8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80011ec:	e01d      	b.n	800122a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	f043 0308 	orr.w	r3, r3, #8
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011f6:	e019      	b.n	800122c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	f043 0310 	orr.w	r3, r3, #16
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001200:	e014      	b.n	800122c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001204:	f043 0320 	orr.w	r3, r3, #32
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800120a:	e00f      	b.n	800122c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001214:	e00a      	b.n	800122c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800121e:	e005      	b.n	800122c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001228:	e000      	b.n	800122c <HAL_CAN_IRQHandler+0x336>
            break;
 800122a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	699a      	ldr	r2, [r3, #24]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800123a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2204      	movs	r2, #4
 8001242:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	2b00      	cmp	r3, #0
 8001248:	d008      	beq.n	800125c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f867 	bl	800132a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	@ 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	@ (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	@ (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4906      	ldr	r1, [pc, #24]	@ (80013d4 <__NVIC_EnableIRQ+0x34>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	@ (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	@ (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	@ 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	@ 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014b4:	f7ff ff90 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff2d 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff42 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff90 	bl	800142c <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5f 	bl	80013d8 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff35 	bl	80013a0 <__NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffa2 	bl	8001490 <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b08b      	sub	sp, #44	@ 0x2c
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156a:	e169      	b.n	8001840 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800156c:	2201      	movs	r2, #1
 800156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	429a      	cmp	r2, r3
 8001586:	f040 8158 	bne.w	800183a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4a9a      	ldr	r2, [pc, #616]	@ (80017f8 <HAL_GPIO_Init+0x2a0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d05e      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 8001594:	4a98      	ldr	r2, [pc, #608]	@ (80017f8 <HAL_GPIO_Init+0x2a0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d875      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 800159a:	4a98      	ldr	r2, [pc, #608]	@ (80017fc <HAL_GPIO_Init+0x2a4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d058      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015a0:	4a96      	ldr	r2, [pc, #600]	@ (80017fc <HAL_GPIO_Init+0x2a4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d86f      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015a6:	4a96      	ldr	r2, [pc, #600]	@ (8001800 <HAL_GPIO_Init+0x2a8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d052      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015ac:	4a94      	ldr	r2, [pc, #592]	@ (8001800 <HAL_GPIO_Init+0x2a8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d869      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015b2:	4a94      	ldr	r2, [pc, #592]	@ (8001804 <HAL_GPIO_Init+0x2ac>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d04c      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015b8:	4a92      	ldr	r2, [pc, #584]	@ (8001804 <HAL_GPIO_Init+0x2ac>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d863      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015be:	4a92      	ldr	r2, [pc, #584]	@ (8001808 <HAL_GPIO_Init+0x2b0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d046      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015c4:	4a90      	ldr	r2, [pc, #576]	@ (8001808 <HAL_GPIO_Init+0x2b0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d85d      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015ca:	2b12      	cmp	r3, #18
 80015cc:	d82a      	bhi.n	8001624 <HAL_GPIO_Init+0xcc>
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d859      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015d2:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <HAL_GPIO_Init+0x80>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	08001653 	.word	0x08001653
 80015dc:	0800162d 	.word	0x0800162d
 80015e0:	0800163f 	.word	0x0800163f
 80015e4:	08001681 	.word	0x08001681
 80015e8:	08001687 	.word	0x08001687
 80015ec:	08001687 	.word	0x08001687
 80015f0:	08001687 	.word	0x08001687
 80015f4:	08001687 	.word	0x08001687
 80015f8:	08001687 	.word	0x08001687
 80015fc:	08001687 	.word	0x08001687
 8001600:	08001687 	.word	0x08001687
 8001604:	08001687 	.word	0x08001687
 8001608:	08001687 	.word	0x08001687
 800160c:	08001687 	.word	0x08001687
 8001610:	08001687 	.word	0x08001687
 8001614:	08001687 	.word	0x08001687
 8001618:	08001687 	.word	0x08001687
 800161c:	08001635 	.word	0x08001635
 8001620:	08001649 	.word	0x08001649
 8001624:	4a79      	ldr	r2, [pc, #484]	@ (800180c <HAL_GPIO_Init+0x2b4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800162a:	e02c      	b.n	8001686 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	623b      	str	r3, [r7, #32]
          break;
 8001632:	e029      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	3304      	adds	r3, #4
 800163a:	623b      	str	r3, [r7, #32]
          break;
 800163c:	e024      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	3308      	adds	r3, #8
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e01f      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	330c      	adds	r3, #12
 800164e:	623b      	str	r3, [r7, #32]
          break;
 8001650:	e01a      	b.n	8001688 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800165a:	2304      	movs	r3, #4
 800165c:	623b      	str	r3, [r7, #32]
          break;
 800165e:	e013      	b.n	8001688 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d105      	bne.n	8001674 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001668:	2308      	movs	r3, #8
 800166a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	611a      	str	r2, [r3, #16]
          break;
 8001672:	e009      	b.n	8001688 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001674:	2308      	movs	r3, #8
 8001676:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	615a      	str	r2, [r3, #20]
          break;
 800167e:	e003      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
          break;
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x130>
          break;
 8001686:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2bff      	cmp	r3, #255	@ 0xff
 800168c:	d801      	bhi.n	8001692 <HAL_GPIO_Init+0x13a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	e001      	b.n	8001696 <HAL_GPIO_Init+0x13e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3304      	adds	r3, #4
 8001696:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2bff      	cmp	r3, #255	@ 0xff
 800169c:	d802      	bhi.n	80016a4 <HAL_GPIO_Init+0x14c>
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	e002      	b.n	80016aa <HAL_GPIO_Init+0x152>
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	3b08      	subs	r3, #8
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	210f      	movs	r1, #15
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	6a39      	ldr	r1, [r7, #32]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	431a      	orrs	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 80b1 	beq.w	800183a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001810 <HAL_GPIO_Init+0x2b8>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001810 <HAL_GPIO_Init+0x2b8>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001810 <HAL_GPIO_Init+0x2b8>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016f0:	4a48      	ldr	r2, [pc, #288]	@ (8001814 <HAL_GPIO_Init+0x2bc>)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a40      	ldr	r2, [pc, #256]	@ (8001818 <HAL_GPIO_Init+0x2c0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d013      	beq.n	8001744 <HAL_GPIO_Init+0x1ec>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3f      	ldr	r2, [pc, #252]	@ (800181c <HAL_GPIO_Init+0x2c4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d00d      	beq.n	8001740 <HAL_GPIO_Init+0x1e8>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a3e      	ldr	r2, [pc, #248]	@ (8001820 <HAL_GPIO_Init+0x2c8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d007      	beq.n	800173c <HAL_GPIO_Init+0x1e4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a3d      	ldr	r2, [pc, #244]	@ (8001824 <HAL_GPIO_Init+0x2cc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_GPIO_Init+0x1e0>
 8001734:	2303      	movs	r3, #3
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x1ee>
 8001738:	2304      	movs	r3, #4
 800173a:	e004      	b.n	8001746 <HAL_GPIO_Init+0x1ee>
 800173c:	2302      	movs	r3, #2
 800173e:	e002      	b.n	8001746 <HAL_GPIO_Init+0x1ee>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_GPIO_Init+0x1ee>
 8001744:	2300      	movs	r3, #0
 8001746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001748:	f002 0203 	and.w	r2, r2, #3
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	4093      	lsls	r3, r2
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4313      	orrs	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001756:	492f      	ldr	r1, [pc, #188]	@ (8001814 <HAL_GPIO_Init+0x2bc>)
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001770:	4b2d      	ldr	r3, [pc, #180]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	492c      	ldr	r1, [pc, #176]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	608b      	str	r3, [r1, #8]
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800177e:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	43db      	mvns	r3, r3
 8001786:	4928      	ldr	r1, [pc, #160]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 8001788:	4013      	ands	r3, r2
 800178a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001798:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	4922      	ldr	r1, [pc, #136]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60cb      	str	r3, [r1, #12]
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017a6:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	491e      	ldr	r1, [pc, #120]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4918      	ldr	r1, [pc, #96]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ce:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4914      	ldr	r1, [pc, #80]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017d8:	4013      	ands	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d021      	beq.n	800182c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	490e      	ldr	r1, [pc, #56]	@ (8001828 <HAL_GPIO_Init+0x2d0>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	e021      	b.n	800183a <HAL_GPIO_Init+0x2e2>
 80017f6:	bf00      	nop
 80017f8:	10320000 	.word	0x10320000
 80017fc:	10310000 	.word	0x10310000
 8001800:	10220000 	.word	0x10220000
 8001804:	10210000 	.word	0x10210000
 8001808:	10120000 	.word	0x10120000
 800180c:	10110000 	.word	0x10110000
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000
 8001818:	40010800 	.word	0x40010800
 800181c:	40010c00 	.word	0x40010c00
 8001820:	40011000 	.word	0x40011000
 8001824:	40011400 	.word	0x40011400
 8001828:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800182c:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_GPIO_Init+0x304>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	43db      	mvns	r3, r3
 8001834:	4909      	ldr	r1, [pc, #36]	@ (800185c <HAL_GPIO_Init+0x304>)
 8001836:	4013      	ands	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	3301      	adds	r3, #1
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	fa22 f303 	lsr.w	r3, r2, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	f47f ae8e 	bne.w	800156c <HAL_GPIO_Init+0x14>
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	372c      	adds	r7, #44	@ 0x2c
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	611a      	str	r2, [r3, #16]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	041a      	lsls	r2, r3, #16
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43d9      	mvns	r1, r3
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	400b      	ands	r3, r1
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	611a      	str	r2, [r3, #16]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e272      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8087 	beq.w	80019f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e4:	4b92      	ldr	r3, [pc, #584]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d00c      	beq.n	800190a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d112      	bne.n	8001922 <HAL_RCC_OscConfig+0x5e>
 80018fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001908:	d10b      	bne.n	8001922 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190a:	4b89      	ldr	r3, [pc, #548]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d06c      	beq.n	80019f0 <HAL_RCC_OscConfig+0x12c>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d168      	bne.n	80019f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e24c      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x76>
 800192c:	4b80      	ldr	r3, [pc, #512]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a7f      	ldr	r2, [pc, #508]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	e02e      	b.n	8001998 <HAL_RCC_OscConfig+0xd4>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x98>
 8001942:	4b7b      	ldr	r3, [pc, #492]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a7a      	ldr	r2, [pc, #488]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b78      	ldr	r3, [pc, #480]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a77      	ldr	r2, [pc, #476]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001954:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e01d      	b.n	8001998 <HAL_RCC_OscConfig+0xd4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001964:	d10c      	bne.n	8001980 <HAL_RCC_OscConfig+0xbc>
 8001966:	4b72      	ldr	r3, [pc, #456]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a71      	ldr	r2, [pc, #452]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 800196c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	4b6f      	ldr	r3, [pc, #444]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a6e      	ldr	r2, [pc, #440]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e00b      	b.n	8001998 <HAL_RCC_OscConfig+0xd4>
 8001980:	4b6b      	ldr	r3, [pc, #428]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a6a      	ldr	r2, [pc, #424]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b68      	ldr	r3, [pc, #416]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a67      	ldr	r2, [pc, #412]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001996:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7fe fe5e 	bl	8000660 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a8:	f7fe fe5a 	bl	8000660 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	@ 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e200      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0xe4>
 80019c6:	e014      	b.n	80019f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7fe fe4a 	bl	8000660 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7fe fe46 	bl	8000660 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	@ 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1ec      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e2:	4b53      	ldr	r3, [pc, #332]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x10c>
 80019ee:	e000      	b.n	80019f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d063      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00b      	beq.n	8001a22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a0a:	4b49      	ldr	r3, [pc, #292]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d11c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x18c>
 8001a16:	4b46      	ldr	r3, [pc, #280]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d116      	bne.n	8001a50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	4b43      	ldr	r3, [pc, #268]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x176>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e1c0      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4939      	ldr	r1, [pc, #228]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4e:	e03a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a58:	4b36      	ldr	r3, [pc, #216]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7fe fdff 	bl	8000660 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a66:	f7fe fdfb 	bl	8000660 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e1a1      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a84:	4b2a      	ldr	r3, [pc, #168]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4927      	ldr	r1, [pc, #156]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]
 8001a98:	e015      	b.n	8001ac6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9a:	4b26      	ldr	r3, [pc, #152]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7fe fdde 	bl	8000660 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa8:	f7fe fdda 	bl	8000660 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e180      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d03a      	beq.n	8001b48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d019      	beq.n	8001b0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ada:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <HAL_RCC_OscConfig+0x274>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7fe fdbe 	bl	8000660 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7fe fdba 	bl	8000660 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e160      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f000 fa9c 	bl	8002044 <RCC_Delay>
 8001b0c:	e01c      	b.n	8001b48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_RCC_OscConfig+0x274>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b14:	f7fe fda4 	bl	8000660 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b1a:	e00f      	b.n	8001b3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7fe fda0 	bl	8000660 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d908      	bls.n	8001b3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e146      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	42420000 	.word	0x42420000
 8001b38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3c:	4b92      	ldr	r3, [pc, #584]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e9      	bne.n	8001b1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80a6 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10d      	bne.n	8001b82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b88      	ldr	r3, [pc, #544]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a87      	ldr	r2, [pc, #540]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b70:	61d3      	str	r3, [r2, #28]
 8001b72:	4b85      	ldr	r3, [pc, #532]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b82:	4b82      	ldr	r3, [pc, #520]	@ (8001d8c <HAL_RCC_OscConfig+0x4c8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d118      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d8c <HAL_RCC_OscConfig+0x4c8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a7e      	ldr	r2, [pc, #504]	@ (8001d8c <HAL_RCC_OscConfig+0x4c8>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9a:	f7fe fd61 	bl	8000660 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba2:	f7fe fd5d 	bl	8000660 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b64      	cmp	r3, #100	@ 0x64
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e103      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	4b75      	ldr	r3, [pc, #468]	@ (8001d8c <HAL_RCC_OscConfig+0x4c8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x312>
 8001bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	e02d      	b.n	8001c32 <HAL_RCC_OscConfig+0x36e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x334>
 8001bde:	4b6a      	ldr	r3, [pc, #424]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a69      	ldr	r2, [pc, #420]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6213      	str	r3, [r2, #32]
 8001bea:	4b67      	ldr	r3, [pc, #412]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a66      	ldr	r2, [pc, #408]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	e01c      	b.n	8001c32 <HAL_RCC_OscConfig+0x36e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d10c      	bne.n	8001c1a <HAL_RCC_OscConfig+0x356>
 8001c00:	4b61      	ldr	r3, [pc, #388]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a60      	ldr	r2, [pc, #384]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	6213      	str	r3, [r2, #32]
 8001c0c:	4b5e      	ldr	r3, [pc, #376]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a5d      	ldr	r2, [pc, #372]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6213      	str	r3, [r2, #32]
 8001c18:	e00b      	b.n	8001c32 <HAL_RCC_OscConfig+0x36e>
 8001c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a5a      	ldr	r2, [pc, #360]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6213      	str	r3, [r2, #32]
 8001c26:	4b58      	ldr	r3, [pc, #352]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a57      	ldr	r2, [pc, #348]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	f023 0304 	bic.w	r3, r3, #4
 8001c30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d015      	beq.n	8001c66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3a:	f7fe fd11 	bl	8000660 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c40:	e00a      	b.n	8001c58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c42:	f7fe fd0d 	bl	8000660 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e0b1      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c58:	4b4b      	ldr	r3, [pc, #300]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ee      	beq.n	8001c42 <HAL_RCC_OscConfig+0x37e>
 8001c64:	e014      	b.n	8001c90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7fe fcfb 	bl	8000660 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f7fe fcf7 	bl	8000660 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e09b      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c84:	4b40      	ldr	r3, [pc, #256]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1ee      	bne.n	8001c6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d105      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c96:	4b3c      	ldr	r3, [pc, #240]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8087 	beq.w	8001dba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cac:	4b36      	ldr	r3, [pc, #216]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d061      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d146      	bne.n	8001d4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc0:	4b33      	ldr	r3, [pc, #204]	@ (8001d90 <HAL_RCC_OscConfig+0x4cc>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7fe fccb 	bl	8000660 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7fe fcc7 	bl	8000660 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e06d      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce0:	4b29      	ldr	r3, [pc, #164]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cf4:	d108      	bne.n	8001d08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cf6:	4b24      	ldr	r3, [pc, #144]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	4921      	ldr	r1, [pc, #132]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d08:	4b1f      	ldr	r3, [pc, #124]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a19      	ldr	r1, [r3, #32]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	491b      	ldr	r1, [pc, #108]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d20:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <HAL_RCC_OscConfig+0x4cc>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7fe fc9b 	bl	8000660 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7fe fc97 	bl	8000660 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e03d      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x46a>
 8001d4c:	e035      	b.n	8001dba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <HAL_RCC_OscConfig+0x4cc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7fe fc84 	bl	8000660 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7fe fc80 	bl	8000660 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e026      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x498>
 8001d7a:	e01e      	b.n	8001dba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d107      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e019      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d94:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <HAL_RCC_OscConfig+0x500>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0d0      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d910      	bls.n	8001e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b67      	ldr	r3, [pc, #412]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 0207 	bic.w	r2, r3, #7
 8001df2:	4965      	ldr	r1, [pc, #404]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b63      	ldr	r3, [pc, #396]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0b8      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d020      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e24:	4b59      	ldr	r3, [pc, #356]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4a58      	ldr	r2, [pc, #352]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e3c:	4b53      	ldr	r3, [pc, #332]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4a52      	ldr	r2, [pc, #328]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e48:	4b50      	ldr	r3, [pc, #320]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	494d      	ldr	r1, [pc, #308]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d040      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b47      	ldr	r3, [pc, #284]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d115      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e07f      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	4b41      	ldr	r3, [pc, #260]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e073      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e96:	4b3d      	ldr	r3, [pc, #244]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e06b      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea6:	4b39      	ldr	r3, [pc, #228]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f023 0203 	bic.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4936      	ldr	r1, [pc, #216]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb8:	f7fe fbd2 	bl	8000660 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7fe fbce 	bl	8000660 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e053      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 020c 	and.w	r2, r3, #12
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1eb      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b27      	ldr	r3, [pc, #156]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d210      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b24      	ldr	r3, [pc, #144]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 0207 	bic.w	r2, r3, #7
 8001efe:	4922      	ldr	r1, [pc, #136]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b20      	ldr	r3, [pc, #128]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e032      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f24:	4b19      	ldr	r3, [pc, #100]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4916      	ldr	r1, [pc, #88]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d009      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f42:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	490e      	ldr	r1, [pc, #56]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f56:	f000 f821 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	490a      	ldr	r1, [pc, #40]	@ (8001f90 <HAL_RCC_ClockConfig+0x1c8>)
 8001f68:	5ccb      	ldrb	r3, [r1, r3]
 8001f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6e:	4a09      	ldr	r2, [pc, #36]	@ (8001f94 <HAL_RCC_ClockConfig+0x1cc>)
 8001f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_RCC_ClockConfig+0x1d0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fb30 	bl	80005dc <HAL_InitTick>

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40022000 	.word	0x40022000
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	080020f0 	.word	0x080020f0
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000004 	.word	0x20000004

08001f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002030 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d002      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x30>
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x36>
 8001fca:	e027      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fcc:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fce:	613b      	str	r3, [r7, #16]
      break;
 8001fd0:	e027      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	0c9b      	lsrs	r3, r3, #18
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	4a17      	ldr	r2, [pc, #92]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d010      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	0c5b      	lsrs	r3, r3, #17
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	4a11      	ldr	r2, [pc, #68]	@ (800203c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ffe:	fb03 f202 	mul.w	r2, r3, r2
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	fbb2 f3f3 	udiv	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e004      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a0c      	ldr	r2, [pc, #48]	@ (8002040 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002010:	fb02 f303 	mul.w	r3, r2, r3
 8002014:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	613b      	str	r3, [r7, #16]
      break;
 800201a:	e002      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800201c:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x98>)
 800201e:	613b      	str	r3, [r7, #16]
      break;
 8002020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002022:	693b      	ldr	r3, [r7, #16]
}
 8002024:	4618      	mov	r0, r3
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	007a1200 	.word	0x007a1200
 8002038:	08002100 	.word	0x08002100
 800203c:	08002110 	.word	0x08002110
 8002040:	003d0900 	.word	0x003d0900

08002044 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800204c:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <RCC_Delay+0x34>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <RCC_Delay+0x38>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0a5b      	lsrs	r3, r3, #9
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002060:	bf00      	nop
  }
  while (Delay --);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1e5a      	subs	r2, r3, #1
 8002066:	60fa      	str	r2, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f9      	bne.n	8002060 <RCC_Delay+0x1c>
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	20000000 	.word	0x20000000
 800207c:	10624dd3 	.word	0x10624dd3

08002080 <memset>:
 8002080:	4603      	mov	r3, r0
 8002082:	4402      	add	r2, r0
 8002084:	4293      	cmp	r3, r2
 8002086:	d100      	bne.n	800208a <memset+0xa>
 8002088:	4770      	bx	lr
 800208a:	f803 1b01 	strb.w	r1, [r3], #1
 800208e:	e7f9      	b.n	8002084 <memset+0x4>

08002090 <__libc_init_array>:
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	2600      	movs	r6, #0
 8002094:	4d0c      	ldr	r5, [pc, #48]	@ (80020c8 <__libc_init_array+0x38>)
 8002096:	4c0d      	ldr	r4, [pc, #52]	@ (80020cc <__libc_init_array+0x3c>)
 8002098:	1b64      	subs	r4, r4, r5
 800209a:	10a4      	asrs	r4, r4, #2
 800209c:	42a6      	cmp	r6, r4
 800209e:	d109      	bne.n	80020b4 <__libc_init_array+0x24>
 80020a0:	f000 f81a 	bl	80020d8 <_init>
 80020a4:	2600      	movs	r6, #0
 80020a6:	4d0a      	ldr	r5, [pc, #40]	@ (80020d0 <__libc_init_array+0x40>)
 80020a8:	4c0a      	ldr	r4, [pc, #40]	@ (80020d4 <__libc_init_array+0x44>)
 80020aa:	1b64      	subs	r4, r4, r5
 80020ac:	10a4      	asrs	r4, r4, #2
 80020ae:	42a6      	cmp	r6, r4
 80020b0:	d105      	bne.n	80020be <__libc_init_array+0x2e>
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
 80020b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b8:	4798      	blx	r3
 80020ba:	3601      	adds	r6, #1
 80020bc:	e7ee      	b.n	800209c <__libc_init_array+0xc>
 80020be:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c2:	4798      	blx	r3
 80020c4:	3601      	adds	r6, #1
 80020c6:	e7f2      	b.n	80020ae <__libc_init_array+0x1e>
 80020c8:	08002114 	.word	0x08002114
 80020cc:	08002114 	.word	0x08002114
 80020d0:	08002114 	.word	0x08002114
 80020d4:	08002118 	.word	0x08002118

080020d8 <_init>:
 80020d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020da:	bf00      	nop
 80020dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020de:	bc08      	pop	{r3}
 80020e0:	469e      	mov	lr, r3
 80020e2:	4770      	bx	lr

080020e4 <_fini>:
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e6:	bf00      	nop
 80020e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ea:	bc08      	pop	{r3}
 80020ec:	469e      	mov	lr, r3
 80020ee:	4770      	bx	lr
