
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f8c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002150  08002150  00003150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002160  08002160  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  08002160  08002160  00003160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002168  08002168  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002168  08002168  00003168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800216c  0800216c  0000316c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002170  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000010  08002180  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002180  00004088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070f8  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177c  00000000  00000000  0000b138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0000c8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000539  00000000  00000000  0000cfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002029f  00000000  00000000  0000d4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000867c  00000000  00000000  0002d790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c40cb  00000000  00000000  00035e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9ed7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b6c  00000000  00000000  000f9f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000fba88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002138 	.word	0x08002138

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08002138 	.word	0x08002138

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 f9b8 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f812 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8a6 	bl	8000650 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000504:	f000 f86e 	bl	80005e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_SPI_Transmit_IT(&hspi1, tx_buffer, 1); //Sending in Interrupt mode
 8000508:	2201      	movs	r2, #1
 800050a:	4904      	ldr	r1, [pc, #16]	@ (800051c <main+0x28>)
 800050c:	4804      	ldr	r0, [pc, #16]	@ (8000520 <main+0x2c>)
 800050e:	f001 fac3 	bl	8001a98 <HAL_SPI_Transmit_IT>
  HAL_Delay(100);
 8000512:	2064      	movs	r0, #100	@ 0x64
 8000514:	f000 fa1c 	bl	8000950 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <main+0x24>
 800051c:	20000000 	.word	0x20000000
 8000520:	2000002c 	.word	0x2000002c

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	@ 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2234      	movs	r2, #52	@ 0x34
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f001 fdd4 	bl	80020e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b23      	ldr	r3, [pc, #140]	@ (80005dc <SystemClock_Config+0xb8>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	4a22      	ldr	r2, [pc, #136]	@ (80005dc <SystemClock_Config+0xb8>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	@ 0x40
 8000558:	4b20      	ldr	r3, [pc, #128]	@ (80005dc <SystemClock_Config+0xb8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000564:	2300      	movs	r3, #0
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	4b1d      	ldr	r3, [pc, #116]	@ (80005e0 <SystemClock_Config+0xbc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000570:	4a1b      	ldr	r2, [pc, #108]	@ (80005e0 <SystemClock_Config+0xbc>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <SystemClock_Config+0xbc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 031c 	add.w	r3, r7, #28
 8000598:	4618      	mov	r0, r3
 800059a:	f000 ff55 	bl	8001448 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a4:	f000 f86e 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fcb0 	bl	8000f28 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ce:	f000 f859 	bl	8000684 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	@ 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005e8:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <MX_SPI1_Init+0x64>)
 80005ea:	4a18      	ldr	r2, [pc, #96]	@ (800064c <MX_SPI1_Init+0x68>)
 80005ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ee:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <MX_SPI1_Init+0x64>)
 80005f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80005f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_SPI1_Init+0x64>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_SPI1_Init+0x64>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_SPI1_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_SPI1_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_SPI1_Init+0x64>)
 8000610:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000614:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <MX_SPI1_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800061c:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <MX_SPI1_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_SPI1_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <MX_SPI1_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_SPI1_Init+0x64>)
 8000630:	220a      	movs	r2, #10
 8000632:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	@ (8000648 <MX_SPI1_Init+0x64>)
 8000636:	f001 f9a5 	bl	8001984 <HAL_SPI_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000640:	f000 f820 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000002c 	.word	0x2000002c
 800064c:	40013000 	.word	0x40013000

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <MX_GPIO_Init+0x30>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a08      	ldr	r2, [pc, #32]	@ (8000680 <MX_GPIO_Init+0x30>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <MX_GPIO_Init+0x30>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <Error_Handler+0x8>

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <HAL_MspInit+0x4c>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069e:	4a0f      	ldr	r2, [pc, #60]	@ (80006dc <HAL_MspInit+0x4c>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <HAL_MspInit+0x4c>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <HAL_MspInit+0x4c>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ba:	4a08      	ldr	r2, [pc, #32]	@ (80006dc <HAL_MspInit+0x4c>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <HAL_MspInit+0x4c>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000774 <HAL_SPI_MspInit+0x94>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d133      	bne.n	800076a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <HAL_SPI_MspInit+0x98>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070a:	4a1b      	ldr	r2, [pc, #108]	@ (8000778 <HAL_SPI_MspInit+0x98>)
 800070c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000710:	6453      	str	r3, [r2, #68]	@ 0x44
 8000712:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <HAL_SPI_MspInit+0x98>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000716:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <HAL_SPI_MspInit+0x98>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a14      	ldr	r2, [pc, #80]	@ (8000778 <HAL_SPI_MspInit+0x98>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <HAL_SPI_MspInit+0x98>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800073a:	23e0      	movs	r3, #224	@ 0xe0
 800073c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800074a:	2305      	movs	r3, #5
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	4809      	ldr	r0, [pc, #36]	@ (800077c <HAL_SPI_MspInit+0x9c>)
 8000756:	f000 fa53 	bl	8000c00 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2023      	movs	r0, #35	@ 0x23
 8000760:	f000 f9f5 	bl	8000b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000764:	2023      	movs	r0, #35	@ 0x23
 8000766:	f000 fa0e 	bl	8000b86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800076a:	bf00      	nop
 800076c:	3728      	adds	r7, #40	@ 0x28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40013000 	.word	0x40013000
 8000778:	40023800 	.word	0x40023800
 800077c:	40020000 	.word	0x40020000

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <NMI_Handler+0x4>

08000788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <MemManage_Handler+0x4>

08000798 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d6:	f000 f89b 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80007e4:	4802      	ldr	r0, [pc, #8]	@ (80007f0 <SPI1_IRQHandler+0x10>)
 80007e6:	f001 f9db 	bl	8001ba0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000002c 	.word	0x2000002c

080007f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <SystemInit+0x20>)
 80007fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007fe:	4a05      	ldr	r2, [pc, #20]	@ (8000814 <SystemInit+0x20>)
 8000800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000850 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800081c:	f7ff ffea 	bl	80007f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000820:	480c      	ldr	r0, [pc, #48]	@ (8000854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000822:	490d      	ldr	r1, [pc, #52]	@ (8000858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000824:	4a0d      	ldr	r2, [pc, #52]	@ (800085c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000838:	4c0a      	ldr	r4, [pc, #40]	@ (8000864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000846:	f001 fc53 	bl	80020f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800084a:	f7ff fe53 	bl	80004f4 <main>
  bx  lr    
 800084e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800085c:	08002170 	.word	0x08002170
  ldr r2, =_sbss
 8000860:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000864:	20000088 	.word	0x20000088

08000868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC_IRQHandler>
	...

0800086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <HAL_Init+0x40>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <HAL_Init+0x40>)
 8000876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800087a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800087c:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <HAL_Init+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0a      	ldr	r2, [pc, #40]	@ (80008ac <HAL_Init+0x40>)
 8000882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <HAL_Init+0x40>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <HAL_Init+0x40>)
 800088e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 f94f 	bl	8000b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089a:	200f      	movs	r0, #15
 800089c:	f000 f808 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff fef6 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023c00 	.word	0x40023c00

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_InitTick+0x54>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_InitTick+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f967 	bl	8000ba2 <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008ec:	f000 f92f 	bl	8000b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	@ (800090c <HAL_InitTick+0x5c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000004 	.word	0x20000004
 8000908:	2000000c 	.word	0x2000000c
 800090c:	20000008 	.word	0x20000008

08000910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_IncTick+0x20>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_IncTick+0x24>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <HAL_IncTick+0x24>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	2000000c 	.word	0x2000000c
 8000934:	20000084 	.word	0x20000084

08000938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b03      	ldr	r3, [pc, #12]	@ (800094c <HAL_GetTick+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000084 	.word	0x20000084

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff ffee 	bl	8000938 <HAL_GetTick>
 800095c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000976:	bf00      	nop
 8000978:	f7ff ffde 	bl	8000938 <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000000c 	.word	0x2000000c

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4907      	ldr	r1, [pc, #28]	@ (8000a34 <__NVIC_EnableIRQ+0x38>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	@ (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	@ (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	@ 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	@ 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b04:	d301      	bcc.n	8000b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00f      	b.n	8000b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <SysTick_Config+0x40>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b12:	210f      	movs	r1, #15
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b18:	f7ff ff8e 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <SysTick_Config+0x40>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <SysTick_Config+0x40>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	e000e010 	.word	0xe000e010

08000b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff29 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b60:	f7ff ff3e 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	6978      	ldr	r0, [r7, #20]
 8000b6c:	f7ff ff8e 	bl	8000a8c <NVIC_EncodePriority>
 8000b70:	4602      	mov	r2, r0
 8000b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff5d 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff31 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffa2 	bl	8000af4 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d004      	beq.n	8000bd8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2280      	movs	r2, #128	@ 0x80
 8000bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e00c      	b.n	8000bf2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2205      	movs	r2, #5
 8000bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f022 0201 	bic.w	r2, r2, #1
 8000bee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	@ 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	e165      	b.n	8000ee8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f040 8154 	bne.w	8000ee2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d005      	beq.n	8000c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d130      	bne.n	8000cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	68da      	ldr	r2, [r3, #12]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c88:	2201      	movs	r2, #1
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	091b      	lsrs	r3, r3, #4
 8000c9e:	f003 0201 	and.w	r2, r3, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d017      	beq.n	8000cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d123      	bne.n	8000d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	08da      	lsrs	r2, r3, #3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3208      	adds	r2, #8
 8000d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	220f      	movs	r2, #15
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	691a      	ldr	r2, [r3, #16]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	69b9      	ldr	r1, [r7, #24]
 8000d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0203 	and.w	r2, r3, #3
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 80ae 	beq.w	8000ee2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8000f00 <HAL_GPIO_Init+0x300>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8e:	4a5c      	ldr	r2, [pc, #368]	@ (8000f00 <HAL_GPIO_Init+0x300>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d96:	4b5a      	ldr	r3, [pc, #360]	@ (8000f00 <HAL_GPIO_Init+0x300>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da2:	4a58      	ldr	r2, [pc, #352]	@ (8000f04 <HAL_GPIO_Init+0x304>)
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3302      	adds	r3, #2
 8000daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	220f      	movs	r2, #15
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4f      	ldr	r2, [pc, #316]	@ (8000f08 <HAL_GPIO_Init+0x308>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d025      	beq.n	8000e1a <HAL_GPIO_Init+0x21a>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4e      	ldr	r2, [pc, #312]	@ (8000f0c <HAL_GPIO_Init+0x30c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d01f      	beq.n	8000e16 <HAL_GPIO_Init+0x216>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a4d      	ldr	r2, [pc, #308]	@ (8000f10 <HAL_GPIO_Init+0x310>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d019      	beq.n	8000e12 <HAL_GPIO_Init+0x212>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4c      	ldr	r2, [pc, #304]	@ (8000f14 <HAL_GPIO_Init+0x314>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d013      	beq.n	8000e0e <HAL_GPIO_Init+0x20e>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4b      	ldr	r2, [pc, #300]	@ (8000f18 <HAL_GPIO_Init+0x318>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d00d      	beq.n	8000e0a <HAL_GPIO_Init+0x20a>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4a      	ldr	r2, [pc, #296]	@ (8000f1c <HAL_GPIO_Init+0x31c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d007      	beq.n	8000e06 <HAL_GPIO_Init+0x206>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a49      	ldr	r2, [pc, #292]	@ (8000f20 <HAL_GPIO_Init+0x320>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d101      	bne.n	8000e02 <HAL_GPIO_Init+0x202>
 8000dfe:	2306      	movs	r3, #6
 8000e00:	e00c      	b.n	8000e1c <HAL_GPIO_Init+0x21c>
 8000e02:	2307      	movs	r3, #7
 8000e04:	e00a      	b.n	8000e1c <HAL_GPIO_Init+0x21c>
 8000e06:	2305      	movs	r3, #5
 8000e08:	e008      	b.n	8000e1c <HAL_GPIO_Init+0x21c>
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x21c>
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e004      	b.n	8000e1c <HAL_GPIO_Init+0x21c>
 8000e12:	2302      	movs	r3, #2
 8000e14:	e002      	b.n	8000e1c <HAL_GPIO_Init+0x21c>
 8000e16:	2301      	movs	r3, #1
 8000e18:	e000      	b.n	8000e1c <HAL_GPIO_Init+0x21c>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	f002 0203 	and.w	r2, r2, #3
 8000e22:	0092      	lsls	r2, r2, #2
 8000e24:	4093      	lsls	r3, r2
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e2c:	4935      	ldr	r1, [pc, #212]	@ (8000f04 <HAL_GPIO_Init+0x304>)
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f24 <HAL_GPIO_Init+0x324>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e5e:	4a31      	ldr	r2, [pc, #196]	@ (8000f24 <HAL_GPIO_Init+0x324>)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e64:	4b2f      	ldr	r3, [pc, #188]	@ (8000f24 <HAL_GPIO_Init+0x324>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e88:	4a26      	ldr	r2, [pc, #152]	@ (8000f24 <HAL_GPIO_Init+0x324>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e8e:	4b25      	ldr	r3, [pc, #148]	@ (8000f24 <HAL_GPIO_Init+0x324>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f24 <HAL_GPIO_Init+0x324>)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <HAL_GPIO_Init+0x324>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000edc:	4a11      	ldr	r2, [pc, #68]	@ (8000f24 <HAL_GPIO_Init+0x324>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	61fb      	str	r3, [r7, #28]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	f67f ae96 	bls.w	8000c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3724      	adds	r7, #36	@ 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40013800 	.word	0x40013800
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	40020800 	.word	0x40020800
 8000f14:	40020c00 	.word	0x40020c00
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40021400 	.word	0x40021400
 8000f20:	40021800 	.word	0x40021800
 8000f24:	40013c00 	.word	0x40013c00

08000f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e0cc      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f3c:	4b68      	ldr	r3, [pc, #416]	@ (80010e0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 030f 	and.w	r3, r3, #15
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d90c      	bls.n	8000f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f4a:	4b65      	ldr	r3, [pc, #404]	@ (80010e0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f52:	4b63      	ldr	r3, [pc, #396]	@ (80010e0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d001      	beq.n	8000f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e0b8      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d020      	beq.n	8000fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d005      	beq.n	8000f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f7c:	4b59      	ldr	r3, [pc, #356]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4a58      	ldr	r2, [pc, #352]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000f86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0308 	and.w	r3, r3, #8
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f94:	4b53      	ldr	r3, [pc, #332]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	4a52      	ldr	r2, [pc, #328]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa0:	4b50      	ldr	r3, [pc, #320]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	494d      	ldr	r1, [pc, #308]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d044      	beq.n	8001048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d107      	bne.n	8000fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	4b47      	ldr	r3, [pc, #284]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d119      	bne.n	8001006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e07f      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d003      	beq.n	8000fe6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d107      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e06f      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e067      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001006:	4b37      	ldr	r3, [pc, #220]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f023 0203 	bic.w	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4934      	ldr	r1, [pc, #208]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001014:	4313      	orrs	r3, r2
 8001016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001018:	f7ff fc8e 	bl	8000938 <HAL_GetTick>
 800101c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800101e:	e00a      	b.n	8001036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001020:	f7ff fc8a 	bl	8000938 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800102e:	4293      	cmp	r3, r2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e04f      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001036:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 020c 	and.w	r2, r3, #12
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	429a      	cmp	r2, r3
 8001046:	d1eb      	bne.n	8001020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001048:	4b25      	ldr	r3, [pc, #148]	@ (80010e0 <HAL_RCC_ClockConfig+0x1b8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d20c      	bcs.n	8001070 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001056:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d001      	beq.n	8001070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e032      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800107c:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4916      	ldr	r1, [pc, #88]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	4313      	orrs	r3, r2
 800108c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d009      	beq.n	80010ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800109a:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	490e      	ldr	r1, [pc, #56]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010ae:	f000 f821 	bl	80010f4 <HAL_RCC_GetSysClockFreq>
 80010b2:	4602      	mov	r2, r0
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	490a      	ldr	r1, [pc, #40]	@ (80010e8 <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	5ccb      	ldrb	r3, [r1, r3]
 80010c2:	fa22 f303 	lsr.w	r3, r2, r3
 80010c6:	4a09      	ldr	r2, [pc, #36]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 80010c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <HAL_RCC_ClockConfig+0x1c8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fbee 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023c00 	.word	0x40023c00
 80010e4:	40023800 	.word	0x40023800
 80010e8:	08002150 	.word	0x08002150
 80010ec:	20000004 	.word	0x20000004
 80010f0:	20000008 	.word	0x20000008

080010f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010f8:	b0a6      	sub	sp, #152	@ 0x98
 80010fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800110e:	2300      	movs	r3, #0
 8001110:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800111a:	4bc8      	ldr	r3, [pc, #800]	@ (800143c <HAL_RCC_GetSysClockFreq+0x348>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b0c      	cmp	r3, #12
 8001124:	f200 817e 	bhi.w	8001424 <HAL_RCC_GetSysClockFreq+0x330>
 8001128:	a201      	add	r2, pc, #4	@ (adr r2, 8001130 <HAL_RCC_GetSysClockFreq+0x3c>)
 800112a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112e:	bf00      	nop
 8001130:	08001165 	.word	0x08001165
 8001134:	08001425 	.word	0x08001425
 8001138:	08001425 	.word	0x08001425
 800113c:	08001425 	.word	0x08001425
 8001140:	0800116d 	.word	0x0800116d
 8001144:	08001425 	.word	0x08001425
 8001148:	08001425 	.word	0x08001425
 800114c:	08001425 	.word	0x08001425
 8001150:	08001175 	.word	0x08001175
 8001154:	08001425 	.word	0x08001425
 8001158:	08001425 	.word	0x08001425
 800115c:	08001425 	.word	0x08001425
 8001160:	080012df 	.word	0x080012df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001164:	4bb6      	ldr	r3, [pc, #728]	@ (8001440 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800116a:	e15f      	b.n	800142c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800116c:	4bb5      	ldr	r3, [pc, #724]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x350>)
 800116e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001172:	e15b      	b.n	800142c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001174:	4bb1      	ldr	r3, [pc, #708]	@ (800143c <HAL_RCC_GetSysClockFreq+0x348>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800117c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001180:	4bae      	ldr	r3, [pc, #696]	@ (800143c <HAL_RCC_GetSysClockFreq+0x348>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d031      	beq.n	80011f0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800118c:	4bab      	ldr	r3, [pc, #684]	@ (800143c <HAL_RCC_GetSysClockFreq+0x348>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	099b      	lsrs	r3, r3, #6
 8001192:	2200      	movs	r2, #0
 8001194:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001196:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001198:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800119a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800119e:	663b      	str	r3, [r7, #96]	@ 0x60
 80011a0:	2300      	movs	r3, #0
 80011a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80011a4:	4ba7      	ldr	r3, [pc, #668]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x350>)
 80011a6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80011aa:	462a      	mov	r2, r5
 80011ac:	fb03 f202 	mul.w	r2, r3, r2
 80011b0:	2300      	movs	r3, #0
 80011b2:	4621      	mov	r1, r4
 80011b4:	fb01 f303 	mul.w	r3, r1, r3
 80011b8:	4413      	add	r3, r2
 80011ba:	4aa2      	ldr	r2, [pc, #648]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x350>)
 80011bc:	4621      	mov	r1, r4
 80011be:	fba1 1202 	umull	r1, r2, r1, r2
 80011c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80011c4:	460a      	mov	r2, r1
 80011c6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80011c8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80011ca:	4413      	add	r3, r2
 80011cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80011ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011d2:	2200      	movs	r2, #0
 80011d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80011d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80011d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80011dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80011e0:	f7ff f810 	bl	8000204 <__aeabi_uldivmod>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4613      	mov	r3, r2
 80011ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80011ee:	e064      	b.n	80012ba <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011f0:	4b92      	ldr	r3, [pc, #584]	@ (800143c <HAL_RCC_GetSysClockFreq+0x348>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	099b      	lsrs	r3, r3, #6
 80011f6:	2200      	movs	r2, #0
 80011f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80011fa:	657a      	str	r2, [r7, #84]	@ 0x54
 80011fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001202:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001204:	2300      	movs	r3, #0
 8001206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001208:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800120c:	4622      	mov	r2, r4
 800120e:	462b      	mov	r3, r5
 8001210:	f04f 0000 	mov.w	r0, #0
 8001214:	f04f 0100 	mov.w	r1, #0
 8001218:	0159      	lsls	r1, r3, #5
 800121a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800121e:	0150      	lsls	r0, r2, #5
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4621      	mov	r1, r4
 8001226:	1a51      	subs	r1, r2, r1
 8001228:	6139      	str	r1, [r7, #16]
 800122a:	4629      	mov	r1, r5
 800122c:	eb63 0301 	sbc.w	r3, r3, r1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800123e:	4659      	mov	r1, fp
 8001240:	018b      	lsls	r3, r1, #6
 8001242:	4651      	mov	r1, sl
 8001244:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001248:	4651      	mov	r1, sl
 800124a:	018a      	lsls	r2, r1, #6
 800124c:	4651      	mov	r1, sl
 800124e:	ebb2 0801 	subs.w	r8, r2, r1
 8001252:	4659      	mov	r1, fp
 8001254:	eb63 0901 	sbc.w	r9, r3, r1
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001264:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001268:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800126c:	4690      	mov	r8, r2
 800126e:	4699      	mov	r9, r3
 8001270:	4623      	mov	r3, r4
 8001272:	eb18 0303 	adds.w	r3, r8, r3
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	462b      	mov	r3, r5
 800127a:	eb49 0303 	adc.w	r3, r9, r3
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800128c:	4629      	mov	r1, r5
 800128e:	028b      	lsls	r3, r1, #10
 8001290:	4621      	mov	r1, r4
 8001292:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001296:	4621      	mov	r1, r4
 8001298:	028a      	lsls	r2, r1, #10
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012a2:	2200      	movs	r2, #0
 80012a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80012a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80012a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80012ac:	f7fe ffaa 	bl	8000204 <__aeabi_uldivmod>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4613      	mov	r3, r2
 80012b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80012ba:	4b60      	ldr	r3, [pc, #384]	@ (800143c <HAL_RCC_GetSysClockFreq+0x348>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	0c1b      	lsrs	r3, r3, #16
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	3301      	adds	r3, #1
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80012cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80012d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80012dc:	e0a6      	b.n	800142c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012de:	4b57      	ldr	r3, [pc, #348]	@ (800143c <HAL_RCC_GetSysClockFreq+0x348>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012ea:	4b54      	ldr	r3, [pc, #336]	@ (800143c <HAL_RCC_GetSysClockFreq+0x348>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d02a      	beq.n	800134c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f6:	4b51      	ldr	r3, [pc, #324]	@ (800143c <HAL_RCC_GetSysClockFreq+0x348>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	099b      	lsrs	r3, r3, #6
 80012fc:	2200      	movs	r2, #0
 80012fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001300:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001304:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001308:	2100      	movs	r1, #0
 800130a:	4b4e      	ldr	r3, [pc, #312]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x350>)
 800130c:	fb03 f201 	mul.w	r2, r3, r1
 8001310:	2300      	movs	r3, #0
 8001312:	fb00 f303 	mul.w	r3, r0, r3
 8001316:	4413      	add	r3, r2
 8001318:	4a4a      	ldr	r2, [pc, #296]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x350>)
 800131a:	fba0 1202 	umull	r1, r2, r0, r2
 800131e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001320:	460a      	mov	r2, r1
 8001322:	673a      	str	r2, [r7, #112]	@ 0x70
 8001324:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001326:	4413      	add	r3, r2
 8001328:	677b      	str	r3, [r7, #116]	@ 0x74
 800132a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800132e:	2200      	movs	r2, #0
 8001330:	633b      	str	r3, [r7, #48]	@ 0x30
 8001332:	637a      	str	r2, [r7, #52]	@ 0x34
 8001334:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001338:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800133c:	f7fe ff62 	bl	8000204 <__aeabi_uldivmod>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4613      	mov	r3, r2
 8001346:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800134a:	e05b      	b.n	8001404 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800134c:	4b3b      	ldr	r3, [pc, #236]	@ (800143c <HAL_RCC_GetSysClockFreq+0x348>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	099b      	lsrs	r3, r3, #6
 8001352:	2200      	movs	r2, #0
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001356:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800135e:	623b      	str	r3, [r7, #32]
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
 8001364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001368:	4642      	mov	r2, r8
 800136a:	464b      	mov	r3, r9
 800136c:	f04f 0000 	mov.w	r0, #0
 8001370:	f04f 0100 	mov.w	r1, #0
 8001374:	0159      	lsls	r1, r3, #5
 8001376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800137a:	0150      	lsls	r0, r2, #5
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4641      	mov	r1, r8
 8001382:	ebb2 0a01 	subs.w	sl, r2, r1
 8001386:	4649      	mov	r1, r9
 8001388:	eb63 0b01 	sbc.w	fp, r3, r1
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800139c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80013a0:	ebb2 040a 	subs.w	r4, r2, sl
 80013a4:	eb63 050b 	sbc.w	r5, r3, fp
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	00eb      	lsls	r3, r5, #3
 80013b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013b6:	00e2      	lsls	r2, r4, #3
 80013b8:	4614      	mov	r4, r2
 80013ba:	461d      	mov	r5, r3
 80013bc:	4643      	mov	r3, r8
 80013be:	18e3      	adds	r3, r4, r3
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	464b      	mov	r3, r9
 80013c4:	eb45 0303 	adc.w	r3, r5, r3
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013d6:	4629      	mov	r1, r5
 80013d8:	028b      	lsls	r3, r1, #10
 80013da:	4621      	mov	r1, r4
 80013dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013e0:	4621      	mov	r1, r4
 80013e2:	028a      	lsls	r2, r1, #10
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013ec:	2200      	movs	r2, #0
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	61fa      	str	r2, [r7, #28]
 80013f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013f6:	f7fe ff05 	bl	8000204 <__aeabi_uldivmod>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4613      	mov	r3, r2
 8001400:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001404:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <HAL_RCC_GetSysClockFreq+0x348>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	0f1b      	lsrs	r3, r3, #28
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001412:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001422:	e003      	b.n	800142c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001426:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800142a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800142c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001430:	4618      	mov	r0, r3
 8001432:	3798      	adds	r7, #152	@ 0x98
 8001434:	46bd      	mov	sp, r7
 8001436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	00f42400 	.word	0x00f42400
 8001444:	017d7840 	.word	0x017d7840

08001448 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e28d      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8083 	beq.w	800156e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001468:	4b94      	ldr	r3, [pc, #592]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	2b04      	cmp	r3, #4
 8001472:	d019      	beq.n	80014a8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001474:	4b91      	ldr	r3, [pc, #580]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 030c 	and.w	r3, r3, #12
        || \
 800147c:	2b08      	cmp	r3, #8
 800147e:	d106      	bne.n	800148e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001480:	4b8e      	ldr	r3, [pc, #568]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001488:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800148c:	d00c      	beq.n	80014a8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148e:	4b8b      	ldr	r3, [pc, #556]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001496:	2b0c      	cmp	r3, #12
 8001498:	d112      	bne.n	80014c0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4b88      	ldr	r3, [pc, #544]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014a6:	d10b      	bne.n	80014c0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	4b84      	ldr	r3, [pc, #528]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d05b      	beq.n	800156c <HAL_RCC_OscConfig+0x124>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d157      	bne.n	800156c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e25a      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c8:	d106      	bne.n	80014d8 <HAL_RCC_OscConfig+0x90>
 80014ca:	4b7c      	ldr	r3, [pc, #496]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a7b      	ldr	r2, [pc, #492]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e01d      	b.n	8001514 <HAL_RCC_OscConfig+0xcc>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0xb4>
 80014e2:	4b76      	ldr	r3, [pc, #472]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a75      	ldr	r2, [pc, #468]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b73      	ldr	r3, [pc, #460]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a72      	ldr	r2, [pc, #456]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0xcc>
 80014fc:	4b6f      	ldr	r3, [pc, #444]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a6e      	ldr	r2, [pc, #440]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b6c      	ldr	r3, [pc, #432]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a6b      	ldr	r2, [pc, #428]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fa0c 	bl	8000938 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fa08 	bl	8000938 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e21f      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b61      	ldr	r3, [pc, #388]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0xdc>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff f9f8 	bl	8000938 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff f9f4 	bl	8000938 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e20b      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	4b57      	ldr	r3, [pc, #348]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x104>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d06f      	beq.n	800165a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800157a:	4b50      	ldr	r3, [pc, #320]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b00      	cmp	r3, #0
 8001584:	d017      	beq.n	80015b6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001586:	4b4d      	ldr	r3, [pc, #308]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
        || \
 800158e:	2b08      	cmp	r3, #8
 8001590:	d105      	bne.n	800159e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001592:	4b4a      	ldr	r3, [pc, #296]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00b      	beq.n	80015b6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159e:	4b47      	ldr	r3, [pc, #284]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d11c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015aa:	4b44      	ldr	r3, [pc, #272]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d116      	bne.n	80015e4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b6:	4b41      	ldr	r3, [pc, #260]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <HAL_RCC_OscConfig+0x186>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d001      	beq.n	80015ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e1d3      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ce:	4b3b      	ldr	r3, [pc, #236]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4937      	ldr	r1, [pc, #220]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e2:	e03a      	b.n	800165a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d020      	beq.n	800162e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ec:	4b34      	ldr	r3, [pc, #208]	@ (80016c0 <HAL_RCC_OscConfig+0x278>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f2:	f7ff f9a1 	bl	8000938 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fa:	f7ff f99d 	bl	8000938 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e1b4      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160c:	4b2b      	ldr	r3, [pc, #172]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001618:	4b28      	ldr	r3, [pc, #160]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4925      	ldr	r1, [pc, #148]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 8001628:	4313      	orrs	r3, r2
 800162a:	600b      	str	r3, [r1, #0]
 800162c:	e015      	b.n	800165a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162e:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <HAL_RCC_OscConfig+0x278>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff f980 	bl	8000938 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163c:	f7ff f97c 	bl	8000938 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e193      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d036      	beq.n	80016d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d016      	beq.n	800169c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166e:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <HAL_RCC_OscConfig+0x27c>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff f960 	bl	8000938 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff f95c 	bl	8000938 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e173      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <HAL_RCC_OscConfig+0x274>)
 8001690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x234>
 800169a:	e01b      	b.n	80016d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169c:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_RCC_OscConfig+0x27c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a2:	f7ff f949 	bl	8000938 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a8:	e00e      	b.n	80016c8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016aa:	f7ff f945 	bl	8000938 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d907      	bls.n	80016c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e15c      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
 80016bc:	40023800 	.word	0x40023800
 80016c0:	42470000 	.word	0x42470000
 80016c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c8:	4b8a      	ldr	r3, [pc, #552]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 80016ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1ea      	bne.n	80016aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 8097 	beq.w	8001810 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e6:	4b83      	ldr	r3, [pc, #524]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10f      	bne.n	8001712 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b7f      	ldr	r3, [pc, #508]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	4a7e      	ldr	r2, [pc, #504]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001700:	6413      	str	r3, [r2, #64]	@ 0x40
 8001702:	4b7c      	ldr	r3, [pc, #496]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170e:	2301      	movs	r3, #1
 8001710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001712:	4b79      	ldr	r3, [pc, #484]	@ (80018f8 <HAL_RCC_OscConfig+0x4b0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d118      	bne.n	8001750 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171e:	4b76      	ldr	r3, [pc, #472]	@ (80018f8 <HAL_RCC_OscConfig+0x4b0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a75      	ldr	r2, [pc, #468]	@ (80018f8 <HAL_RCC_OscConfig+0x4b0>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172a:	f7ff f905 	bl	8000938 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001732:	f7ff f901 	bl	8000938 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e118      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	4b6c      	ldr	r3, [pc, #432]	@ (80018f8 <HAL_RCC_OscConfig+0x4b0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x31e>
 8001758:	4b66      	ldr	r3, [pc, #408]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800175c:	4a65      	ldr	r2, [pc, #404]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6713      	str	r3, [r2, #112]	@ 0x70
 8001764:	e01c      	b.n	80017a0 <HAL_RCC_OscConfig+0x358>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b05      	cmp	r3, #5
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0x340>
 800176e:	4b61      	ldr	r3, [pc, #388]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001772:	4a60      	ldr	r2, [pc, #384]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6713      	str	r3, [r2, #112]	@ 0x70
 800177a:	4b5e      	ldr	r3, [pc, #376]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177e:	4a5d      	ldr	r2, [pc, #372]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6713      	str	r3, [r2, #112]	@ 0x70
 8001786:	e00b      	b.n	80017a0 <HAL_RCC_OscConfig+0x358>
 8001788:	4b5a      	ldr	r3, [pc, #360]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178c:	4a59      	ldr	r2, [pc, #356]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6713      	str	r3, [r2, #112]	@ 0x70
 8001794:	4b57      	ldr	r3, [pc, #348]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001798:	4a56      	ldr	r2, [pc, #344]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 800179a:	f023 0304 	bic.w	r3, r3, #4
 800179e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d015      	beq.n	80017d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff f8c6 	bl	8000938 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b0:	f7ff f8c2 	bl	8000938 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0d7      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c6:	4b4b      	ldr	r3, [pc, #300]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0ee      	beq.n	80017b0 <HAL_RCC_OscConfig+0x368>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff f8b0 	bl	8000938 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7ff f8ac 	bl	8000938 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e0c1      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f2:	4b40      	ldr	r3, [pc, #256]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ee      	bne.n	80017dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d105      	bne.n	8001810 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001804:	4b3b      	ldr	r3, [pc, #236]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	4a3a      	ldr	r2, [pc, #232]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 800180a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800180e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80ad 	beq.w	8001974 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800181a:	4b36      	ldr	r3, [pc, #216]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b08      	cmp	r3, #8
 8001824:	d060      	beq.n	80018e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d145      	bne.n	80018ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182e:	4b33      	ldr	r3, [pc, #204]	@ (80018fc <HAL_RCC_OscConfig+0x4b4>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff f880 	bl	8000938 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f87c 	bl	8000938 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e093      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	4b29      	ldr	r3, [pc, #164]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69da      	ldr	r2, [r3, #28]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001868:	019b      	lsls	r3, r3, #6
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	3b01      	subs	r3, #1
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	061b      	lsls	r3, r3, #24
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	071b      	lsls	r3, r3, #28
 8001886:	491b      	ldr	r1, [pc, #108]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800188c:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <HAL_RCC_OscConfig+0x4b4>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff f851 	bl	8000938 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff f84d 	bl	8000938 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e064      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x452>
 80018b8:	e05c      	b.n	8001974 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <HAL_RCC_OscConfig+0x4b4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff f83a 	bl	8000938 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff f836 	bl	8000938 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e04d      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_RCC_OscConfig+0x4ac>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x480>
 80018e6:	e045      	b.n	8001974 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e040      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40007000 	.word	0x40007000
 80018fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001900:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <HAL_RCC_OscConfig+0x538>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d030      	beq.n	8001970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d129      	bne.n	8001970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d122      	bne.n	8001970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001938:	4293      	cmp	r3, r2
 800193a:	d119      	bne.n	8001970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	3b01      	subs	r3, #1
 800194a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d10f      	bne.n	8001970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d107      	bne.n	8001970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e07b      	b.n	8001a8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	2b00      	cmp	r3, #0
 800199c:	d108      	bne.n	80019b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80019a6:	d009      	beq.n	80019bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
 80019ae:	e005      	b.n	80019bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d106      	bne.n	80019dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7fe fe82 	bl	80006e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a40:	ea42 0103 	orr.w	r1, r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	f003 0104 	and.w	r1, r3, #4
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	f003 0210 	and.w	r2, r3, #16
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69da      	ldr	r2, [r3, #28]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <HAL_SPI_Transmit_IT+0x1a>
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e06a      	b.n	8001b8c <HAL_SPI_Transmit_IT+0xf4>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d001      	beq.n	8001ac6 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e062      	b.n	8001b8c <HAL_SPI_Transmit_IT+0xf4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_SPI_Transmit_IT+0x3c>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e05b      	b.n	8001b8c <HAL_SPI_Transmit_IT+0xf4>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2203      	movs	r2, #3
 8001ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	88fa      	ldrh	r2, [r7, #6]
 8001af4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	88fa      	ldrh	r2, [r7, #6]
 8001afa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_SPI_Transmit_IT+0x8c>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001b98 <HAL_SPI_Transmit_IT+0x100>)
 8001b20:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b22:	e002      	b.n	8001b2a <HAL_SPI_Transmit_IT+0x92>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4a1d      	ldr	r2, [pc, #116]	@ (8001b9c <HAL_SPI_Transmit_IT+0x104>)
 8001b28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b32:	d10f      	bne.n	8001b54 <HAL_SPI_Transmit_IT+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b5e:	2b40      	cmp	r3, #64	@ 0x40
 8001b60:	d007      	beq.n	8001b72 <HAL_SPI_Transmit_IT+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8001b88:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	08001e1f 	.word	0x08001e1f
 8001b9c:	08001dd9 	.word	0x08001dd9

08001ba0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10e      	bne.n	8001be0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	4798      	blx	r3
    return;
 8001bde:	e0ce      	b.n	8001d7e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_SPI_IRQHandler+0x5e>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d004      	beq.n	8001bfe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
    return;
 8001bfc:	e0bf      	b.n	8001d7e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10a      	bne.n	8001c1e <HAL_SPI_IRQHandler+0x7e>
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d105      	bne.n	8001c1e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80b0 	beq.w	8001d7e <HAL_SPI_IRQHandler+0x1de>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80aa 	beq.w	8001d7e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d023      	beq.n	8001c7c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d011      	beq.n	8001c64 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c44:	f043 0204 	orr.w	r2, r3, #4
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	e00b      	b.n	8001c7c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
        return;
 8001c7a:	e080      	b.n	8001d7e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d014      	beq.n	8001cb0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cbe:	f043 0208 	orr.w	r2, r3, #8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d04f      	beq.n	8001d7c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001cea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d104      	bne.n	8001d08 <HAL_SPI_IRQHandler+0x168>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d034      	beq.n	8001d72 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0203 	bic.w	r2, r2, #3
 8001d16:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d011      	beq.n	8001d44 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d24:	4a17      	ldr	r2, [pc, #92]	@ (8001d84 <HAL_SPI_IRQHandler+0x1e4>)
 8001d26:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe ff44 	bl	8000bba <HAL_DMA_Abort_IT>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d016      	beq.n	8001d7a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d50:	4a0c      	ldr	r2, [pc, #48]	@ (8001d84 <HAL_SPI_IRQHandler+0x1e4>)
 8001d52:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe ff2e 	bl	8000bba <HAL_DMA_Abort_IT>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00a      	beq.n	8001d7a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8001d70:	e003      	b.n	8001d7a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f812 	bl	8001d9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001d78:	e000      	b.n	8001d7c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8001d7a:	bf00      	nop
    return;
 8001d7c:	bf00      	nop
  }
}
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	08001db1 	.word	0x08001db1

08001d88 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff ffe6 	bl	8001d9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	330c      	adds	r3, #12
 8001dea:	7812      	ldrb	r2, [r2, #0]
 8001dec:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f903 	bl	800201c <SPI_CloseTx_ISR>
  }
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	881a      	ldrh	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	1c9a      	adds	r2, r3, #2
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f8e1 	bl	800201c <SPI_CloseTx_ISR>
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e74:	f7fe fd60 	bl	8000938 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e84:	f7fe fd58 	bl	8000938 <HAL_GetTick>
 8001e88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e8a:	4b39      	ldr	r3, [pc, #228]	@ (8001f70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	015b      	lsls	r3, r3, #5
 8001e90:	0d1b      	lsrs	r3, r3, #20
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e9a:	e054      	b.n	8001f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ea2:	d050      	beq.n	8001f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ea4:	f7fe fd48 	bl	8000938 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d902      	bls.n	8001eba <SPI_WaitFlagStateUntilTimeout+0x56>
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d13d      	bne.n	8001f36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001ec8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ed2:	d111      	bne.n	8001ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001edc:	d004      	beq.n	8001ee8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee6:	d107      	bne.n	8001ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ef6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f00:	d10f      	bne.n	8001f22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e017      	b.n	8001f66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	bf0c      	ite	eq
 8001f56:	2301      	moveq	r3, #1
 8001f58:	2300      	movne	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d19b      	bne.n	8001e9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3720      	adds	r7, #32
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000004 	.word	0x20000004

08001f74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2201      	movs	r2, #1
 8001f88:	2102      	movs	r1, #2
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff ff6a 	bl	8001e64 <SPI_WaitFlagStateUntilTimeout>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9a:	f043 0220 	orr.w	r2, r3, #32
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e032      	b.n	800200c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <SPI_EndRxTxTransaction+0xa0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1b      	ldr	r2, [pc, #108]	@ (8002018 <SPI_EndRxTxTransaction+0xa4>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	0d5b      	lsrs	r3, r3, #21
 8001fb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fc4:	d112      	bne.n	8001fec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2180      	movs	r1, #128	@ 0x80
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f7ff ff47 	bl	8001e64 <SPI_WaitFlagStateUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d016      	beq.n	800200a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe0:	f043 0220 	orr.w	r2, r3, #32
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e00f      	b.n	800200c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002002:	2b80      	cmp	r3, #128	@ 0x80
 8002004:	d0f2      	beq.n	8001fec <SPI_EndRxTxTransaction+0x78>
 8002006:	e000      	b.n	800200a <SPI_EndRxTxTransaction+0x96>
        break;
 8002008:	bf00      	nop
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000004 	.word	0x20000004
 8002018:	165e9f81 	.word	0x165e9f81

0800201c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002024:	4b2c      	ldr	r3, [pc, #176]	@ (80020d8 <SPI_CloseTx_ISR+0xbc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a2c      	ldr	r2, [pc, #176]	@ (80020dc <SPI_CloseTx_ISR+0xc0>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0a5b      	lsrs	r3, r3, #9
 8002030:	2264      	movs	r2, #100	@ 0x64
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002038:	f7fe fc7e 	bl	8000938 <HAL_GetTick>
 800203c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d106      	bne.n	8002052 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002050:	e009      	b.n	8002066 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	3b01      	subs	r3, #1
 8002056:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0eb      	beq.n	800203e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002074:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	2164      	movs	r1, #100	@ 0x64
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ff7a 	bl	8001f74 <SPI_EndRxTxTransaction>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208a:	f043 0220 	orr.w	r2, r3, #32
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10a      	bne.n	80020b0 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff fe6b 	bl	8001d9c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80020c6:	e002      	b.n	80020ce <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fe5d 	bl	8001d88 <HAL_SPI_TxCpltCallback>
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000004 	.word	0x20000004
 80020dc:	057619f1 	.word	0x057619f1

080020e0 <memset>:
 80020e0:	4402      	add	r2, r0
 80020e2:	4603      	mov	r3, r0
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d100      	bne.n	80020ea <memset+0xa>
 80020e8:	4770      	bx	lr
 80020ea:	f803 1b01 	strb.w	r1, [r3], #1
 80020ee:	e7f9      	b.n	80020e4 <memset+0x4>

080020f0 <__libc_init_array>:
 80020f0:	b570      	push	{r4, r5, r6, lr}
 80020f2:	4d0d      	ldr	r5, [pc, #52]	@ (8002128 <__libc_init_array+0x38>)
 80020f4:	4c0d      	ldr	r4, [pc, #52]	@ (800212c <__libc_init_array+0x3c>)
 80020f6:	1b64      	subs	r4, r4, r5
 80020f8:	10a4      	asrs	r4, r4, #2
 80020fa:	2600      	movs	r6, #0
 80020fc:	42a6      	cmp	r6, r4
 80020fe:	d109      	bne.n	8002114 <__libc_init_array+0x24>
 8002100:	4d0b      	ldr	r5, [pc, #44]	@ (8002130 <__libc_init_array+0x40>)
 8002102:	4c0c      	ldr	r4, [pc, #48]	@ (8002134 <__libc_init_array+0x44>)
 8002104:	f000 f818 	bl	8002138 <_init>
 8002108:	1b64      	subs	r4, r4, r5
 800210a:	10a4      	asrs	r4, r4, #2
 800210c:	2600      	movs	r6, #0
 800210e:	42a6      	cmp	r6, r4
 8002110:	d105      	bne.n	800211e <__libc_init_array+0x2e>
 8002112:	bd70      	pop	{r4, r5, r6, pc}
 8002114:	f855 3b04 	ldr.w	r3, [r5], #4
 8002118:	4798      	blx	r3
 800211a:	3601      	adds	r6, #1
 800211c:	e7ee      	b.n	80020fc <__libc_init_array+0xc>
 800211e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002122:	4798      	blx	r3
 8002124:	3601      	adds	r6, #1
 8002126:	e7f2      	b.n	800210e <__libc_init_array+0x1e>
 8002128:	08002168 	.word	0x08002168
 800212c:	08002168 	.word	0x08002168
 8002130:	08002168 	.word	0x08002168
 8002134:	0800216c 	.word	0x0800216c

08002138 <_init>:
 8002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213a:	bf00      	nop
 800213c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213e:	bc08      	pop	{r3}
 8002140:	469e      	mov	lr, r3
 8002142:	4770      	bx	lr

08002144 <_fini>:
 8002144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002146:	bf00      	nop
 8002148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800214a:	bc08      	pop	{r3}
 800214c:	469e      	mov	lr, r3
 800214e:	4770      	bx	lr
