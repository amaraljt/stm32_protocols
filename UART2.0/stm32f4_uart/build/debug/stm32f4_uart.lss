
build/debug/stm32f4_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000458  08000458  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000458  08000458  00001458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800045c  0800045c  0000145c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000460  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000464  00002004  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000024  08000464  00002024  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .comment      0000001e  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000181c  00000000  00000000  00002052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000701  00000000  00000000  0000386e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00000269  00000000  00000000  00003f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000240  00000000  00000000  000041d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000018e  00000000  00000000  00004418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00000d97  00000000  00000000  000045a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00000f69  00000000  00000000  0000533d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000003cc  00000000  00000000  000062a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000052  00000000  00000000  00006674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000440 	.word	0x08000440

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000440 	.word	0x08000440

08000204 <main>:
#include "main.h"
#include "uart.h"
#include <stdio.h>

int main(){
 8000204:	b538      	push	{r3, r4, r5, lr}
    Clock_Init();
 8000206:	f000 f84b 	bl	80002a0 <Clock_Init>

    GPIO_Init();
 800020a:	f000 f855 	bl	80002b8 <GPIO_Init>
    
    USART_Init();
 800020e:	f000 f891 	bl	8000334 <USART_Init>
    
    //USART1_SendString("to be lame in the eyes of somebody i would never want to be like is nothing but an absolute success");
    USART1_SendChar('A');
 8000212:	2041      	movs	r0, #65	@ 0x41
 8000214:	f000 f8aa 	bl	800036c <USART1_SendChar>
    Delay_ms(1000000);
 8000218:	4809      	ldr	r0, [pc, #36]	@ (8000240 <main+0x3c>)
 800021a:	f000 f835 	bl	8000288 <Delay_ms>

    uint8_t data = USART1_ReceiveChar();
 800021e:	f000 f8b5 	bl	800038c <USART1_ReceiveChar>
 8000222:	4604      	mov	r4, r0

    while(1){
        if(data == 'A'){
 8000224:	2c41      	cmp	r4, #65	@ 0x41
 8000226:	d1fd      	bne.n	8000224 <main+0x20>
            Delay_ms(1000000);
 8000228:	4d05      	ldr	r5, [pc, #20]	@ (8000240 <main+0x3c>)
 800022a:	4628      	mov	r0, r5
 800022c:	f000 f82c 	bl	8000288 <Delay_ms>
            GPIO_Set_Pin(); // blink LED
 8000230:	f000 f872 	bl	8000318 <GPIO_Set_Pin>
            Delay_ms(1000000);
 8000234:	4628      	mov	r0, r5
 8000236:	f000 f827 	bl	8000288 <Delay_ms>
            GPIO_Reset_Pin();
 800023a:	f000 f873 	bl	8000324 <GPIO_Reset_Pin>
 800023e:	e7f1      	b.n	8000224 <main+0x20>
 8000240:	000f4240 	.word	0x000f4240

08000244 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000244:	4a03      	ldr	r2, [pc, #12]	@ (8000254 <HAL_IncTick+0x10>)
 8000246:	6811      	ldr	r1, [r2, #0]
 8000248:	4b03      	ldr	r3, [pc, #12]	@ (8000258 <HAL_IncTick+0x14>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	440b      	add	r3, r1
 800024e:	6013      	str	r3, [r2, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000020 	.word	0x20000020
 8000258:	20000000 	.word	0x20000000

0800025c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800025c:	e7fe      	b.n	800025c <NMI_Handler>

0800025e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800025e:	e7fe      	b.n	800025e <HardFault_Handler>

08000260 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000260:	e7fe      	b.n	8000260 <MemManage_Handler>

08000262 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000262:	e7fe      	b.n	8000262 <BusFault_Handler>

08000264 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000264:	e7fe      	b.n	8000264 <UsageFault_Handler>

08000266 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000266:	4770      	bx	lr

08000268 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000268:	4770      	bx	lr

0800026a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800026a:	4770      	bx	lr

0800026c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800026c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800026e:	f7ff ffe9 	bl	8000244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000272:	bd08      	pop	{r3, pc}

08000274 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000274:	4a03      	ldr	r2, [pc, #12]	@ (8000284 <SystemInit+0x10>)
 8000276:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800027a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800027e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00

08000288 <Delay_ms>:

/*
Delay_ms():
    Delay in milliseconds
*/
void Delay_ms(int delay){
 8000288:	b082      	sub	sp, #8
    for (volatile int i = 0; i < delay; i++) {}
 800028a:	2300      	movs	r3, #0
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	e002      	b.n	8000296 <Delay_ms+0xe>
 8000290:	9b01      	ldr	r3, [sp, #4]
 8000292:	3301      	adds	r3, #1
 8000294:	9301      	str	r3, [sp, #4]
 8000296:	9b01      	ldr	r3, [sp, #4]
 8000298:	4283      	cmp	r3, r0
 800029a:	dbf9      	blt.n	8000290 <Delay_ms+0x8>
}
 800029c:	b002      	add	sp, #8
 800029e:	4770      	bx	lr

080002a0 <Clock_Init>:
/* 
Clock_Init():
    Initializes GPIOA and USART1 Clock
*/
void Clock_Init(){
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <Clock_Init+0x14>)
 80002a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002a4:	f042 0201 	orr.w	r2, r2, #1
 80002a8:	631a      	str	r2, [r3, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80002aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80002ac:	f042 0210 	orr.w	r2, r2, #16
 80002b0:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80002b2:	4770      	bx	lr
 80002b4:	40023800 	.word	0x40023800

080002b8 <GPIO_Init>:
GPIO_Init():
    Initialize GPIOA port and PINS 9, 10 & 5
*/
void GPIO_Init(){
    // Step 1. Initalize I/O Pins as alternate mode : PA9 - USART1_TX & PA10 - USART1_RX
    GPIOA->MODER |= (2 << 18); // alternate function for PA9
 80002b8:	4b16      	ldr	r3, [pc, #88]	@ (8000314 <GPIO_Init+0x5c>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80002c0:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (2 << 20); // alternate function for PA10
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80002c8:	601a      	str	r2, [r3, #0]

    GPIOA->OSPEEDR |= ((3 << 18) | (3 << 20)); // High Speed for PA9 & PA10
 80002ca:	689a      	ldr	r2, [r3, #8]
 80002cc:	f442 1270 	orr.w	r2, r2, #3932160	@ 0x3c0000
 80002d0:	609a      	str	r2, [r3, #8]

    // Step 2. Set alternate functions for PA9 & PA10 : 0111 <- USART
    GPIOA->AFR[1] |= (7 << 4); // PA9  -> AF7 (USART_TX)
 80002d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002d4:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 80002d8:	625a      	str	r2, [r3, #36]	@ 0x24
    GPIOA->AFR[1] |= (7 << 8); // PA10 -> AF7 (USART_RX)
 80002da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002dc:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80002e0:	625a      	str	r2, [r3, #36]	@ 0x24

    // PIN 5 SETUP
    GPIOA->MODER |= (1 << (GPIOA_PIN5 * 2)); // Output Mode for Pin5 : (1 @ bit 2y)
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80002e8:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~(1 << (2 * GPIOA_PIN5 + 1)); // Output Mode for Pin5 : (0 @ bit 2y+1)
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80002f0:	601a      	str	r2, [r3, #0]

    GPIOA->OTYPER &= ~(1 << GPIOA_PIN5); // Output Push-pull : (0 @ bit 5)
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	f022 0220 	bic.w	r2, r2, #32
 80002f8:	605a      	str	r2, [r3, #4]

    GPIOA->OSPEEDR |= (1 << (2 * GPIOA_PIN5 + 1)); // Fast Speed : (1 @ bit 2y+1)
 80002fa:	689a      	ldr	r2, [r3, #8]
 80002fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000300:	609a      	str	r2, [r3, #8]
    GPIOA->OSPEEDR &= ~(1 << (2 * GPIOA_PIN5)); // Fast Speed : (0 @ bit 2y)
 8000302:	689a      	ldr	r2, [r3, #8]
 8000304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000308:	609a      	str	r2, [r3, #8]

    GPIOA->PUPDR &= ~((1 << (2 * GPIOA_PIN5)) | (1 << (2 * GPIOA_PIN5 + 1))); // No Pull-up/down resistor : (00 @ bits 2y:2y+1)
 800030a:	68da      	ldr	r2, [r3, #12]
 800030c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8000310:	60da      	str	r2, [r3, #12]
}
 8000312:	4770      	bx	lr
 8000314:	40020000 	.word	0x40020000

08000318 <GPIO_Set_Pin>:

void GPIO_Set_Pin(){
    GPIOA->BSRR = (1 << GPIOA_PIN5); // Set Pin PA5 High
 8000318:	4b01      	ldr	r3, [pc, #4]	@ (8000320 <GPIO_Set_Pin+0x8>)
 800031a:	2220      	movs	r2, #32
 800031c:	619a      	str	r2, [r3, #24]
}
 800031e:	4770      	bx	lr
 8000320:	40020000 	.word	0x40020000

08000324 <GPIO_Reset_Pin>:

void GPIO_Reset_Pin(){
    GPIOA->BSRR = (1 << 21); // Reset Pin PA5 Low
 8000324:	4b02      	ldr	r3, [pc, #8]	@ (8000330 <GPIO_Reset_Pin+0xc>)
 8000326:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800032a:	619a      	str	r2, [r3, #24]
}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40020000 	.word	0x40020000

08000334 <USART_Init>:
UART_Init():
    Initialize USART1
*/
void USART_Init(){
    // Step 3. Initialize USART
    USART1->CR1 |= (1 << 13);  // USART Enable
 8000334:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <USART_Init+0x34>)
 8000336:	68da      	ldr	r2, [r3, #12]
 8000338:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800033c:	60da      	str	r2, [r3, #12]
    USART1->CR1 &= ~(1 << 12); // 0: 1 Start bit, 8 Data bits, n Stop bit
 800033e:	68da      	ldr	r2, [r3, #12]
 8000340:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000344:	60da      	str	r2, [r3, #12]
    USART1->CR2 &= ~(3 << 12); // 1 stop bit
 8000346:	691a      	ldr	r2, [r3, #16]
 8000348:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800034c:	611a      	str	r2, [r3, #16]
    USART1->BRR = 782;         // Baud Rate of 115200, PCLK2 @ 90MHz max
 800034e:	f240 320e 	movw	r2, #782	@ 0x30e
 8000352:	609a      	str	r2, [r3, #8]

    USART1->CR1 |= (1 << 3); // Transmitter Enabled
 8000354:	68da      	ldr	r2, [r3, #12]
 8000356:	f042 0208 	orr.w	r2, r2, #8
 800035a:	60da      	str	r2, [r3, #12]
    USART1->CR1 |= (1 << 2); // Receiver Enabled
 800035c:	68da      	ldr	r2, [r3, #12]
 800035e:	f042 0204 	orr.w	r2, r2, #4
 8000362:	60da      	str	r2, [r3, #12]

}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40011000 	.word	0x40011000

0800036c <USART1_SendChar>:
/*
USART1_SendChar():
    Transmits character over UART
*/
void USART1_SendChar(uint8_t c){
    while(!(USART1->SR & (1 << 7))); // Wait for Transmit Data Register to be empty
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <USART1_SendChar+0x1c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000374:	d0fa      	beq.n	800036c <USART1_SendChar>
    USART1->DR = c;
 8000376:	4b04      	ldr	r3, [pc, #16]	@ (8000388 <USART1_SendChar+0x1c>)
 8000378:	6058      	str	r0, [r3, #4]
    while(!(USART1->SR & (1 << 6))); // Wait for TC to SET
 800037a:	4b03      	ldr	r3, [pc, #12]	@ (8000388 <USART1_SendChar+0x1c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8000382:	d0fa      	beq.n	800037a <USART1_SendChar+0xe>
}
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40011000 	.word	0x40011000

0800038c <USART1_ReceiveChar>:
/*
USART1_ReceiveChar():
    Receives character over UART
*/
uint8_t USART1_ReceiveChar(){
    while(!(USART1->SR & (1 << 5))); // wait for received data
 800038c:	4b04      	ldr	r3, [pc, #16]	@ (80003a0 <USART1_ReceiveChar+0x14>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f013 0f20 	tst.w	r3, #32
 8000394:	d0fa      	beq.n	800038c <USART1_ReceiveChar>
    uint8_t data = USART1->DR; // read data
 8000396:	4b02      	ldr	r3, [pc, #8]	@ (80003a0 <USART1_ReceiveChar+0x14>)
 8000398:	6858      	ldr	r0, [r3, #4]
    return data;
}
 800039a:	b2c0      	uxtb	r0, r0
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40011000 	.word	0x40011000

080003a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003a8:	f7ff ff64 	bl	8000274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	@ (80003e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	@ (80003e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	@ (80003e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	@ (80003ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	@ (80003f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80003d2:	f000 f811 	bl	80003f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003d6:	f7ff ff15 	bl	8000204 <main>
  bx  lr    
 80003da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003e8:	08000460 	.word	0x08000460
  ldr r2, =_sbss
 80003ec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003f0:	20000024 	.word	0x20000024

080003f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC_IRQHandler>
	...

080003f8 <__libc_init_array>:
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000430 <__libc_init_array+0x38>)
 80003fc:	4d0d      	ldr	r5, [pc, #52]	@ (8000434 <__libc_init_array+0x3c>)
 80003fe:	1b5b      	subs	r3, r3, r5
 8000400:	109c      	asrs	r4, r3, #2
 8000402:	2600      	movs	r6, #0
 8000404:	42a6      	cmp	r6, r4
 8000406:	d109      	bne.n	800041c <__libc_init_array+0x24>
 8000408:	f000 f81a 	bl	8000440 <_init>
 800040c:	4d0a      	ldr	r5, [pc, #40]	@ (8000438 <__libc_init_array+0x40>)
 800040e:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <__libc_init_array+0x44>)
 8000410:	1b5b      	subs	r3, r3, r5
 8000412:	109c      	asrs	r4, r3, #2
 8000414:	2600      	movs	r6, #0
 8000416:	42a6      	cmp	r6, r4
 8000418:	d105      	bne.n	8000426 <__libc_init_array+0x2e>
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000420:	4798      	blx	r3
 8000422:	3601      	adds	r6, #1
 8000424:	e7ee      	b.n	8000404 <__libc_init_array+0xc>
 8000426:	f855 3b04 	ldr.w	r3, [r5], #4
 800042a:	4798      	blx	r3
 800042c:	3601      	adds	r6, #1
 800042e:	e7f2      	b.n	8000416 <__libc_init_array+0x1e>
 8000430:	08000458 	.word	0x08000458
 8000434:	08000458 	.word	0x08000458
 8000438:	08000458 	.word	0x08000458
 800043c:	0800045c 	.word	0x0800045c

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
