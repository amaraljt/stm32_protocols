
build/debug/stm32f4_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080003dc  080003dc  000013dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000440  08000440  00001440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000444  08000444  00001444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000448  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  0800044c  00002004  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000024  0800044c  00002024  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .comment      0000001e  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001739  00000000  00000000  00002052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000006ac  00000000  00000000  0000378b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000228  00000000  00000000  00003e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000017c  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00000c5e  00000000  00000000  000041dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00000f35  00000000  00000000  00004e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00000398  00000000  00000000  00005d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00000247  00000000  00000000  00006108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000052  00000000  00000000  0000634f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003c4 	.word	0x080003c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080003c4 	.word	0x080003c4

08000204 <main>:
#include "main.h"
#include "uart.h"
#include <stdio.h>

int main(){
 8000204:	b508      	push	{r3, lr}
    Clock_Init();
 8000206:	f000 f83d 	bl	8000284 <Clock_Init>

    GPIO_Init();
 800020a:	f000 f847 	bl	800029c <GPIO_Init>
    
    USART_Init();
 800020e:	f000 f85d 	bl	80002cc <USART_Init>
    
    while(1){
        USART1_SendString("to be lame in the eyes of somebody i would never want to be like is nothing but an absolute success");
 8000212:	4803      	ldr	r0, [pc, #12]	@ (8000220 <main+0x1c>)
 8000214:	f000 f87e 	bl	8000314 <USART1_SendString>
        Delay_ms(1000000);
 8000218:	4802      	ldr	r0, [pc, #8]	@ (8000224 <main+0x20>)
 800021a:	f000 f827 	bl	800026c <Delay_ms>
    while(1){
 800021e:	e7f8      	b.n	8000212 <main+0xe>
 8000220:	080003dc 	.word	0x080003dc
 8000224:	000f4240 	.word	0x000f4240

08000228 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000228:	4a03      	ldr	r2, [pc, #12]	@ (8000238 <HAL_IncTick+0x10>)
 800022a:	6811      	ldr	r1, [r2, #0]
 800022c:	4b03      	ldr	r3, [pc, #12]	@ (800023c <HAL_IncTick+0x14>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	440b      	add	r3, r1
 8000232:	6013      	str	r3, [r2, #0]
}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	20000020 	.word	0x20000020
 800023c:	20000000 	.word	0x20000000

08000240 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000240:	e7fe      	b.n	8000240 <NMI_Handler>

08000242 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000242:	e7fe      	b.n	8000242 <HardFault_Handler>

08000244 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000244:	e7fe      	b.n	8000244 <MemManage_Handler>

08000246 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000246:	e7fe      	b.n	8000246 <BusFault_Handler>

08000248 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000248:	e7fe      	b.n	8000248 <UsageFault_Handler>

0800024a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800024a:	4770      	bx	lr

0800024c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800024c:	4770      	bx	lr

0800024e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800024e:	4770      	bx	lr

08000250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000250:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000252:	f7ff ffe9 	bl	8000228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000256:	bd08      	pop	{r3, pc}

08000258 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000258:	4a03      	ldr	r2, [pc, #12]	@ (8000268 <SystemInit+0x10>)
 800025a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800025e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000262:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000266:	4770      	bx	lr
 8000268:	e000ed00 	.word	0xe000ed00

0800026c <Delay_ms>:

/*
Delay_ms():
    Delay in milliseconds
*/
void Delay_ms(int delay){
 800026c:	b082      	sub	sp, #8
    for (volatile int i = 0; i < delay; i++) {}
 800026e:	2300      	movs	r3, #0
 8000270:	9301      	str	r3, [sp, #4]
 8000272:	e002      	b.n	800027a <Delay_ms+0xe>
 8000274:	9b01      	ldr	r3, [sp, #4]
 8000276:	3301      	adds	r3, #1
 8000278:	9301      	str	r3, [sp, #4]
 800027a:	9b01      	ldr	r3, [sp, #4]
 800027c:	4283      	cmp	r3, r0
 800027e:	dbf9      	blt.n	8000274 <Delay_ms+0x8>
}
 8000280:	b002      	add	sp, #8
 8000282:	4770      	bx	lr

08000284 <Clock_Init>:
/* 
Clock_Init():
    Initializes GPIOA and USART1 Clock
*/
void Clock_Init(){
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000284:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <Clock_Init+0x14>)
 8000286:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000288:	f042 0201 	orr.w	r2, r2, #1
 800028c:	631a      	str	r2, [r3, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800028e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000290:	f042 0210 	orr.w	r2, r2, #16
 8000294:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8000296:	4770      	bx	lr
 8000298:	40023800 	.word	0x40023800

0800029c <GPIO_Init>:
GPIO_Init():
    Initialize GPIOA port
*/
void GPIO_Init(){
    // Step 1. Initalize I/O Pins as alternate mode : PA9 - USART1_TX & PA10 - USART1_RX
    GPIOA->MODER |= (2 << 18); // alternate function for PA9
 800029c:	4b0a      	ldr	r3, [pc, #40]	@ (80002c8 <GPIO_Init+0x2c>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80002a4:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (2 << 20); // alternate function for PA10
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80002ac:	601a      	str	r2, [r3, #0]

    GPIOA->OSPEEDR |= ((3 << 18) | (3 << 20)); // High Speed for PA9 & PA10
 80002ae:	689a      	ldr	r2, [r3, #8]
 80002b0:	f442 1270 	orr.w	r2, r2, #3932160	@ 0x3c0000
 80002b4:	609a      	str	r2, [r3, #8]

    // Step 2. Set alternate functions for PA9 & PA10 : 0111 <- USART
    GPIOA->AFR[1] |= (7 << 4); // PA9  -> AF7 (USART_TX)
 80002b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002b8:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 80002bc:	625a      	str	r2, [r3, #36]	@ 0x24
    GPIOA->AFR[1] |= (7 << 8); // PA10 -> AF7 (USART_RX)
 80002be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002c0:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80002c4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80002c6:	4770      	bx	lr
 80002c8:	40020000 	.word	0x40020000

080002cc <USART_Init>:
UART_Init():
    Initialize USART1
*/
void USART_Init(){
    // Step 3. Initialize USART
    USART1->CR1 |= (1 << 13); // USART Enable
 80002cc:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <USART_Init+0x24>)
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80002d4:	60da      	str	r2, [r3, #12]
    USART1->CR1 &= ~(1 << 12);  // 0: 1 Start bit, 8 Data bits, n Stop bit
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80002dc:	60da      	str	r2, [r3, #12]

    USART1->BRR = 782; // Baud Rate of 115200, PCLK2 @ 90MHz max
 80002de:	f240 320e 	movw	r2, #782	@ 0x30e
 80002e2:	609a      	str	r2, [r3, #8]

    USART1->CR1 |= (1 << 3);  // Transmitter Enable
 80002e4:	68da      	ldr	r2, [r3, #12]
 80002e6:	f042 0208 	orr.w	r2, r2, #8
 80002ea:	60da      	str	r2, [r3, #12]
}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40011000 	.word	0x40011000

080002f4 <USART1_SendChar>:

void USART1_SendChar(uint8_t c){
    while(!(USART1->SR & (1 << 7))); // Wait for Transmit Data Register to be empty
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <USART1_SendChar+0x1c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80002fc:	d0fa      	beq.n	80002f4 <USART1_SendChar>
    USART1->DR = c;
 80002fe:	4b04      	ldr	r3, [pc, #16]	@ (8000310 <USART1_SendChar+0x1c>)
 8000300:	6058      	str	r0, [r3, #4]
    while(!(USART1->SR & (1 << 6))); // Wait for TC to SET
 8000302:	4b03      	ldr	r3, [pc, #12]	@ (8000310 <USART1_SendChar+0x1c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800030a:	d0fa      	beq.n	8000302 <USART1_SendChar+0xe>
}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40011000 	.word	0x40011000

08000314 <USART1_SendString>:

void USART1_SendString(char *str){
 8000314:	b510      	push	{r4, lr}
 8000316:	4604      	mov	r4, r0
    while(*str){
 8000318:	e002      	b.n	8000320 <USART1_SendString+0xc>
        USART1_SendChar(*str++);
 800031a:	3401      	adds	r4, #1
 800031c:	f7ff ffea 	bl	80002f4 <USART1_SendChar>
    while(*str){
 8000320:	7820      	ldrb	r0, [r4, #0]
 8000322:	2800      	cmp	r0, #0
 8000324:	d1f9      	bne.n	800031a <USART1_SendString+0x6>
    }
}
 8000326:	bd10      	pop	{r4, pc}

08000328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000328:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000360 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800032c:	f7ff ff94 	bl	8000258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	@ (8000364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	@ (8000368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	@ (800036c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	@ (8000374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000356:	f000 f811 	bl	800037c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800035a:	f7ff ff53 	bl	8000204 <main>
  bx  lr    
 800035e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800036c:	08000448 	.word	0x08000448
  ldr r2, =_sbss
 8000370:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000374:	20000024 	.word	0x20000024

08000378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC_IRQHandler>
	...

0800037c <__libc_init_array>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	4b0d      	ldr	r3, [pc, #52]	@ (80003b4 <__libc_init_array+0x38>)
 8000380:	4d0d      	ldr	r5, [pc, #52]	@ (80003b8 <__libc_init_array+0x3c>)
 8000382:	1b5b      	subs	r3, r3, r5
 8000384:	109c      	asrs	r4, r3, #2
 8000386:	2600      	movs	r6, #0
 8000388:	42a6      	cmp	r6, r4
 800038a:	d109      	bne.n	80003a0 <__libc_init_array+0x24>
 800038c:	f000 f81a 	bl	80003c4 <_init>
 8000390:	4d0a      	ldr	r5, [pc, #40]	@ (80003bc <__libc_init_array+0x40>)
 8000392:	4b0b      	ldr	r3, [pc, #44]	@ (80003c0 <__libc_init_array+0x44>)
 8000394:	1b5b      	subs	r3, r3, r5
 8000396:	109c      	asrs	r4, r3, #2
 8000398:	2600      	movs	r6, #0
 800039a:	42a6      	cmp	r6, r4
 800039c:	d105      	bne.n	80003aa <__libc_init_array+0x2e>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a4:	4798      	blx	r3
 80003a6:	3601      	adds	r6, #1
 80003a8:	e7ee      	b.n	8000388 <__libc_init_array+0xc>
 80003aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ae:	4798      	blx	r3
 80003b0:	3601      	adds	r6, #1
 80003b2:	e7f2      	b.n	800039a <__libc_init_array+0x1e>
 80003b4:	08000440 	.word	0x08000440
 80003b8:	08000440 	.word	0x08000440
 80003bc:	08000440 	.word	0x08000440
 80003c0:	08000444 	.word	0x08000444

080003c4 <_init>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr

080003d0 <_fini>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr
