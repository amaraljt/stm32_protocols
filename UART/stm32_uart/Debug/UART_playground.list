
UART_playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008500  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080086c4  080086c4  000096c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008724  08008724  0000a128  2**0
                  CONTENTS
  4 .ARM          00000008  08008724  08008724  00009724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800872c  0800872c  0000a128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800872c  0800872c  0000972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008730  08008730  00009730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000128  20000000  08008734  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c4c  20000128  0800885c  0000a128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d74  0800885c  0000ad74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001300a  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003284  00000000  00000000  0001d162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  000203e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0f  00000000  00000000  00021288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c3b  00000000  00000000  00021d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131d8  00000000  00000000  000459d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc609  00000000  00000000  00058baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001251b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b78  00000000  00000000  001251f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00128d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000128 	.word	0x20000128
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080086ac 	.word	0x080086ac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000012c 	.word	0x2000012c
 8000200:	080086ac 	.word	0x080086ac

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 f9de 	bl	80008b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f816 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8aa 	bl	8000658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f87e 	bl	8000604 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000508:	f007 fb3a 	bl	8007b80 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit_IT(&huart2, tx_buff, 27);
 800050c:	221b      	movs	r2, #27
 800050e:	4905      	ldr	r1, [pc, #20]	@ (8000524 <main+0x30>)
 8000510:	4805      	ldr	r0, [pc, #20]	@ (8000528 <main+0x34>)
 8000512:	f003 f933 	bl	800377c <HAL_UART_Transmit_IT>
	  HAL_Delay(1000);
 8000516:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800051a:	f000 fa3f 	bl	800099c <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart2, tx_buff, 27);
 800051e:	bf00      	nop
 8000520:	e7f4      	b.n	800050c <main+0x18>
 8000522:	bf00      	nop
 8000524:	20000000 	.word	0x20000000
 8000528:	20000144 	.word	0x20000144

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	@ 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 031c 	add.w	r3, r7, #28
 8000536:	2234      	movs	r2, #52	@ 0x34
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f008 f88a 	bl	8008654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b29      	ldr	r3, [pc, #164]	@ (80005fc <SystemClock_Config+0xd0>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	4a28      	ldr	r2, [pc, #160]	@ (80005fc <SystemClock_Config+0xd0>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000560:	4b26      	ldr	r3, [pc, #152]	@ (80005fc <SystemClock_Config+0xd0>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800056c:	2300      	movs	r3, #0
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	4b23      	ldr	r3, [pc, #140]	@ (8000600 <SystemClock_Config+0xd4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000578:	4a21      	ldr	r2, [pc, #132]	@ (8000600 <SystemClock_Config+0xd4>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <SystemClock_Config+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059c:	2300      	movs	r3, #0
 800059e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a0:	2310      	movs	r3, #16
 80005a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005a4:	23c0      	movs	r3, #192	@ 0xc0
 80005a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005ac:	2303      	movs	r3, #3
 80005ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 fdf1 	bl	80031a0 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c4:	f000 f87a 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 ffee 	bl	80025c4 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ee:	f000 f865 	bl	80006bc <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	@ 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000608:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 800060a:	4a12      	ldr	r2, [pc, #72]	@ (8000654 <MX_USART2_UART_Init+0x50>)
 800060c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060e:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000610:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 800063c:	f003 f84e 	bl	80036dc <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000646:	f000 f839 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000144 	.word	0x20000144
 8000654:	40004400 	.word	0x40004400

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <MX_GPIO_Init+0x5c>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000674:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <MX_GPIO_Init+0x5c>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6313      	str	r3, [r2, #48]	@ 0x30
 800067c:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <MX_GPIO_Init+0x5c>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2120      	movs	r1, #32
 800068c:	480a      	ldr	r0, [pc, #40]	@ (80006b8 <MX_GPIO_Init+0x60>)
 800068e:	f000 fce1 	bl	8001054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000692:	2320      	movs	r3, #32
 8000694:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <MX_GPIO_Init+0x60>)
 80006a8:	f000 fb40 	bl	8000d2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ac:	bf00      	nop
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020000 	.word	0x40020000

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <Error_Handler+0x8>

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <HAL_MspInit+0x4c>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000714 <HAL_MspInit+0x4c>)
 80006d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80006de:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <HAL_MspInit+0x4c>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <HAL_MspInit+0x4c>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f2:	4a08      	ldr	r2, [pc, #32]	@ (8000714 <HAL_MspInit+0x4c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <HAL_MspInit+0x4c>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	@ 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a1d      	ldr	r2, [pc, #116]	@ (80007ac <HAL_UART_MspInit+0x94>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d133      	bne.n	80007a2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <HAL_UART_MspInit+0x98>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000742:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <HAL_UART_MspInit+0x98>)
 8000744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000748:	6413      	str	r3, [r2, #64]	@ 0x40
 800074a:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <HAL_UART_MspInit+0x98>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <HAL_UART_MspInit+0x98>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <HAL_UART_MspInit+0x98>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <HAL_UART_MspInit+0x98>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000772:	230c      	movs	r3, #12
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000782:	2307      	movs	r3, #7
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4809      	ldr	r0, [pc, #36]	@ (80007b4 <HAL_UART_MspInit+0x9c>)
 800078e:	f000 facd 	bl	8000d2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	2026      	movs	r0, #38	@ 0x26
 8000798:	f000 f9ff 	bl	8000b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800079c:	2026      	movs	r0, #38	@ 0x26
 800079e:	f000 fa18 	bl	8000bd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	@ 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40004400 	.word	0x40004400
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020000 	.word	0x40020000

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <NMI_Handler+0x4>

080007c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <MemManage_Handler+0x4>

080007d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <UsageFault_Handler+0x4>

080007e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080e:	f000 f8a5 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800081c:	4802      	ldr	r0, [pc, #8]	@ (8000828 <USART2_IRQHandler+0x10>)
 800081e:	f002 ffe3 	bl	80037e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000144 	.word	0x20000144

0800082c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000830:	4802      	ldr	r0, [pc, #8]	@ (800083c <OTG_FS_IRQHandler+0x10>)
 8000832:	f000 fd73 	bl	800131c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20001670 	.word	0x20001670

08000840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <SystemInit+0x20>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800084a:	4a05      	ldr	r2, [pc, #20]	@ (8000860 <SystemInit+0x20>)
 800084c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000850:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000864:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800089c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000868:	f7ff ffea 	bl	8000840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800086c:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800086e:	490d      	ldr	r1, [pc, #52]	@ (80008a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000870:	4a0d      	ldr	r2, [pc, #52]	@ (80008a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a0a      	ldr	r2, [pc, #40]	@ (80008ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000884:	4c0a      	ldr	r4, [pc, #40]	@ (80008b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000892:	f007 fee7 	bl	8008664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000896:	f7ff fe2d 	bl	80004f4 <main>
  bx  lr    
 800089a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800089c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 80008a8:	08008734 	.word	0x08008734
  ldr r2, =_sbss
 80008ac:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 80008b0:	20001d74 	.word	0x20001d74

080008b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC_IRQHandler>
	...

080008b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008bc:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <HAL_Init+0x40>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <HAL_Init+0x40>)
 80008c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008c8:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <HAL_Init+0x40>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <HAL_Init+0x40>)
 80008ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <HAL_Init+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a07      	ldr	r2, [pc, #28]	@ (80008f8 <HAL_Init+0x40>)
 80008da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 f94f 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e6:	200f      	movs	r0, #15
 80008e8:	f000 f808 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ec:	f7ff feec 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023c00 	.word	0x40023c00

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <HAL_InitTick+0x54>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <HAL_InitTick+0x58>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000912:	fbb3 f3f1 	udiv	r3, r3, r1
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f967 	bl	8000bee <HAL_SYSTICK_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e00e      	b.n	8000948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d80a      	bhi.n	8000946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000938:	f000 f92f 	bl	8000b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800093c:	4a06      	ldr	r2, [pc, #24]	@ (8000958 <HAL_InitTick+0x5c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000001c 	.word	0x2000001c
 8000954:	20000024 	.word	0x20000024
 8000958:	20000020 	.word	0x20000020

0800095c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_IncTick+0x20>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <HAL_IncTick+0x24>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a04      	ldr	r2, [pc, #16]	@ (8000980 <HAL_IncTick+0x24>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000024 	.word	0x20000024
 8000980:	2000018c 	.word	0x2000018c

08000984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b03      	ldr	r3, [pc, #12]	@ (8000998 <HAL_GetTick+0x14>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2000018c 	.word	0x2000018c

0800099c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a4:	f7ff ffee 	bl	8000984 <HAL_GetTick>
 80009a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009b4:	d005      	beq.n	80009c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b6:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <HAL_Delay+0x44>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009c2:	bf00      	nop
 80009c4:	f7ff ffde 	bl	8000984 <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d8f7      	bhi.n	80009c4 <HAL_Delay+0x28>
  {
  }
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000024 	.word	0x20000024

080009e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a16:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	60d3      	str	r3, [r2, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a30:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <__NVIC_GetPriorityGrouping+0x18>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	f003 0307 	and.w	r3, r3, #7
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	db0b      	blt.n	8000a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f003 021f 	and.w	r2, r3, #31
 8000a60:	4907      	ldr	r1, [pc, #28]	@ (8000a80 <__NVIC_EnableIRQ+0x38>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	095b      	lsrs	r3, r3, #5
 8000a68:	2001      	movs	r0, #1
 8000a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	@ (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	@ (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	@ 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f1c3 0307 	rsb	r3, r3, #7
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	bf28      	it	cs
 8000af6:	2304      	movcs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d902      	bls.n	8000b08 <NVIC_EncodePriority+0x30>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	e000      	b.n	8000b0a <NVIC_EncodePriority+0x32>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43d9      	mvns	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	4313      	orrs	r3, r2
         );
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	@ 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b50:	d301      	bcc.n	8000b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00f      	b.n	8000b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <SysTick_Config+0x40>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5e:	210f      	movs	r1, #15
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b64:	f7ff ff8e 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <SysTick_Config+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <SysTick_Config+0x40>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff29 	bl	80009e4 <__NVIC_SetPriorityGrouping>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bac:	f7ff ff3e 	bl	8000a2c <__NVIC_GetPriorityGrouping>
 8000bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	f7ff ff8e 	bl	8000ad8 <NVIC_EncodePriority>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff5d 	bl	8000a84 <__NVIC_SetPriority>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff31 	bl	8000a48 <__NVIC_EnableIRQ>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ffa2 	bl	8000b40 <SysTick_Config>
 8000bfc:	4603      	mov	r3, r0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b084      	sub	sp, #16
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c14:	f7ff feb6 	bl	8000984 <HAL_GetTick>
 8000c18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d008      	beq.n	8000c38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2280      	movs	r2, #128	@ 0x80
 8000c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e052      	b.n	8000cde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0216 	bic.w	r2, r2, #22
 8000c46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	695a      	ldr	r2, [r3, #20]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d103      	bne.n	8000c68 <HAL_DMA_Abort+0x62>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d007      	beq.n	8000c78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f022 0208 	bic.w	r2, r2, #8
 8000c76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f022 0201 	bic.w	r2, r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c88:	e013      	b.n	8000cb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c8a:	f7ff fe7b 	bl	8000984 <HAL_GetTick>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	2b05      	cmp	r3, #5
 8000c96:	d90c      	bls.n	8000cb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e015      	b.n	8000cde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1e4      	bne.n	8000c8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cc4:	223f      	movs	r2, #63	@ 0x3f
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d004      	beq.n	8000d04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2280      	movs	r2, #128	@ 0x80
 8000cfe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e00c      	b.n	8000d1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2205      	movs	r2, #5
 8000d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 0201 	bic.w	r2, r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	@ 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e165      	b.n	8001014 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f040 8154 	bne.w	800100e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d005      	beq.n	8000d7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d130      	bne.n	8000de0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	091b      	lsrs	r3, r3, #4
 8000dca:	f003 0201 	and.w	r2, r3, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d017      	beq.n	8000e1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d123      	bne.n	8000e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	69b9      	ldr	r1, [r7, #24]
 8000e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0203 	and.w	r2, r3, #3
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80ae 	beq.w	800100e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800102c <HAL_GPIO_Init+0x300>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	4a5c      	ldr	r2, [pc, #368]	@ (800102c <HAL_GPIO_Init+0x300>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec2:	4b5a      	ldr	r3, [pc, #360]	@ (800102c <HAL_GPIO_Init+0x300>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ece:	4a58      	ldr	r2, [pc, #352]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4f      	ldr	r2, [pc, #316]	@ (8001034 <HAL_GPIO_Init+0x308>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d025      	beq.n	8000f46 <HAL_GPIO_Init+0x21a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4e      	ldr	r2, [pc, #312]	@ (8001038 <HAL_GPIO_Init+0x30c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01f      	beq.n	8000f42 <HAL_GPIO_Init+0x216>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4d      	ldr	r2, [pc, #308]	@ (800103c <HAL_GPIO_Init+0x310>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001040 <HAL_GPIO_Init+0x314>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x20e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4b      	ldr	r2, [pc, #300]	@ (8001044 <HAL_GPIO_Init+0x318>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x20a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4a      	ldr	r2, [pc, #296]	@ (8001048 <HAL_GPIO_Init+0x31c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x206>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a49      	ldr	r2, [pc, #292]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x202>
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	e00c      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f2e:	2307      	movs	r3, #7
 8000f30:	e00a      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f32:	2305      	movs	r3, #5
 8000f34:	e008      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f36:	2304      	movs	r3, #4
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e004      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f46:	2300      	movs	r3, #0
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	f002 0203 	and.w	r2, r2, #3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4093      	lsls	r3, r2
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f58:	4935      	ldr	r1, [pc, #212]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f66:	4b3a      	ldr	r3, [pc, #232]	@ (8001050 <HAL_GPIO_Init+0x324>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8a:	4a31      	ldr	r2, [pc, #196]	@ (8001050 <HAL_GPIO_Init+0x324>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f90:	4b2f      	ldr	r3, [pc, #188]	@ (8001050 <HAL_GPIO_Init+0x324>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb4:	4a26      	ldr	r2, [pc, #152]	@ (8001050 <HAL_GPIO_Init+0x324>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fba:	4b25      	ldr	r3, [pc, #148]	@ (8001050 <HAL_GPIO_Init+0x324>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fde:	4a1c      	ldr	r2, [pc, #112]	@ (8001050 <HAL_GPIO_Init+0x324>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <HAL_GPIO_Init+0x324>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001008:	4a11      	ldr	r2, [pc, #68]	@ (8001050 <HAL_GPIO_Init+0x324>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3301      	adds	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	2b0f      	cmp	r3, #15
 8001018:	f67f ae96 	bls.w	8000d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3724      	adds	r7, #36	@ 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40013800 	.word	0x40013800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40021000 	.word	0x40021000
 8001048:	40021400 	.word	0x40021400
 800104c:	40021800 	.word	0x40021800
 8001050:	40013c00 	.word	0x40013c00

08001054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
 8001060:	4613      	mov	r3, r2
 8001062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001070:	e003      	b.n	800107a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	619a      	str	r2, [r3, #24]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af02      	add	r7, sp, #8
 800108c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e108      	b.n	80012aa <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d106      	bne.n	80010b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f006 ff56 	bl	8007f64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2203      	movs	r2, #3
 80010bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010c6:	d102      	bne.n	80010ce <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fb6d 	bl	80047b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7c1a      	ldrb	r2, [r3, #16]
 80010e0:	f88d 2000 	strb.w	r2, [sp]
 80010e4:	3304      	adds	r3, #4
 80010e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e8:	f003 fa4c 	bl	8004584 <USB_CoreInit>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2202      	movs	r2, #2
 80010f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0d5      	b.n	80012aa <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fb65 	bl	80047d4 <USB_SetCurrentMode>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0c6      	b.n	80012aa <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e04a      	b.n	80011b8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3315      	adds	r3, #21
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	3314      	adds	r3, #20
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	b298      	uxth	r0, r3
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	332e      	adds	r3, #46	@ 0x2e
 800115e:	4602      	mov	r2, r0
 8001160:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	3318      	adds	r3, #24
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	331c      	adds	r3, #28
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	3320      	adds	r3, #32
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	3324      	adds	r3, #36	@ 0x24
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	3301      	adds	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d3af      	bcc.n	8001122 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	e044      	b.n	8001252 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80011f0:	7bfa      	ldrb	r2, [r7, #15]
 80011f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	3301      	adds	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	791b      	ldrb	r3, [r3, #4]
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	429a      	cmp	r2, r3
 800125a:	d3b5      	bcc.n	80011c8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7c1a      	ldrb	r2, [r3, #16]
 8001264:	f88d 2000 	strb.w	r2, [sp]
 8001268:	3304      	adds	r3, #4
 800126a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800126c:	f003 fafe 	bl	800486c <USB_DevInit>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2202      	movs	r2, #2
 800127a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e013      	b.n	80012aa <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7b1b      	ldrb	r3, [r3, #12]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d102      	bne.n	800129e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f001 f96f 	bl	800257c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 fb3b 	bl	800591e <USB_DevDisconnect>

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_PCD_Start+0x1c>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e022      	b.n	8001314 <HAL_PCD_Start+0x62>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d009      	beq.n	80012f6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d105      	bne.n	80012f6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f003 fa48 	bl	8004790 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f004 fae9 	bl	80058dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b08d      	sub	sp, #52	@ 0x34
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f004 fba7 	bl	8005a86 <USB_GetMode>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 84b9 	bne.w	8001cb2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f004 fb0b 	bl	8005960 <USB_ReadInterrupts>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 84af 	beq.w	8001cb0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f004 faf8 	bl	8005960 <USB_ReadInterrupts>
 8001370:	4603      	mov	r3, r0
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b02      	cmp	r3, #2
 8001378:	d107      	bne.n	800138a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	695a      	ldr	r2, [r3, #20]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f002 0202 	and.w	r2, r2, #2
 8001388:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f004 fae6 	bl	8005960 <USB_ReadInterrupts>
 8001394:	4603      	mov	r3, r0
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	2b10      	cmp	r3, #16
 800139c:	d161      	bne.n	8001462 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	699a      	ldr	r2, [r3, #24]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0210 	bic.w	r2, r2, #16
 80013ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	f003 020f 	and.w	r2, r3, #15
 80013ba:	4613      	mov	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	3304      	adds	r3, #4
 80013cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	0c5b      	lsrs	r3, r3, #17
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d124      	bne.n	8001424 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d035      	beq.n	8001452 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	6a38      	ldr	r0, [r7, #32]
 80013fa:	f004 f91d 	bl	8005638 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800140a:	441a      	add	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141c:	441a      	add	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	e016      	b.n	8001452 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	0c5b      	lsrs	r3, r3, #17
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	2b06      	cmp	r3, #6
 800142e:	d110      	bne.n	8001452 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001436:	2208      	movs	r2, #8
 8001438:	4619      	mov	r1, r3
 800143a:	6a38      	ldr	r0, [r7, #32]
 800143c:	f004 f8fc 	bl	8005638 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144c:	441a      	add	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699a      	ldr	r2, [r3, #24]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0210 	orr.w	r2, r2, #16
 8001460:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fa7a 	bl	8005960 <USB_ReadInterrupts>
 800146c:	4603      	mov	r3, r0
 800146e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001472:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001476:	f040 80a7 	bne.w	80015c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f004 fa7f 	bl	8005986 <USB_ReadDevAllOutEpInterrupt>
 8001488:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800148a:	e099      	b.n	80015c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800148c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 808e 	beq.w	80015b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f004 faa3 	bl	80059ee <USB_ReadDevOutEPInterrupt>
 80014a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00c      	beq.n	80014ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	015a      	lsls	r2, r3, #5
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014c0:	461a      	mov	r2, r3
 80014c2:	2301      	movs	r3, #1
 80014c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fed1 	bl	8002270 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00c      	beq.n	80014f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	015a      	lsls	r2, r3, #5
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	4413      	add	r3, r2
 80014e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014e4:	461a      	mov	r2, r3
 80014e6:	2308      	movs	r3, #8
 80014e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 ffa7 	bl	8002440 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fe:	015a      	lsls	r2, r3, #5
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	4413      	add	r3, r2
 8001504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001508:	461a      	mov	r2, r3
 800150a:	2310      	movs	r3, #16
 800150c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d030      	beq.n	800157a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001520:	2b80      	cmp	r3, #128	@ 0x80
 8001522:	d109      	bne.n	8001538 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001536:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	3304      	adds	r3, #4
 800154c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	78db      	ldrb	r3, [r3, #3]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d108      	bne.n	8001568 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2200      	movs	r2, #0
 800155a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4619      	mov	r1, r3
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f006 fe1a 	bl	800819c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001574:	461a      	mov	r2, r3
 8001576:	2302      	movs	r3, #2
 8001578:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	015a      	lsls	r2, r3, #5
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001590:	461a      	mov	r2, r3
 8001592:	2320      	movs	r3, #32
 8001594:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d009      	beq.n	80015b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015ac:	461a      	mov	r2, r3
 80015ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	3301      	adds	r3, #1
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f47f af62 	bne.w	800148c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 f9c7 	bl	8005960 <USB_ReadInterrupts>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80015dc:	f040 80db 	bne.w	8001796 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f004 f9e8 	bl	80059ba <USB_ReadDevAllInEpInterrupt>
 80015ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80015f0:	e0cd      	b.n	800178e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80c2 	beq.w	8001782 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f004 fa0e 	bl	8005a2a <USB_ReadDevInEPInterrupt>
 800160e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d057      	beq.n	80016ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	2201      	movs	r2, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800162e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43db      	mvns	r3, r3
 8001634:	69f9      	ldr	r1, [r7, #28]
 8001636:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800163a:	4013      	ands	r3, r2
 800163c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	015a      	lsls	r2, r3, #5
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	4413      	add	r3, r2
 8001646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800164a:	461a      	mov	r2, r3
 800164c:	2301      	movs	r3, #1
 800164e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	799b      	ldrb	r3, [r3, #6]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d132      	bne.n	80016be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3320      	adds	r3, #32
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4403      	add	r3, r0
 8001678:	331c      	adds	r3, #28
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4419      	add	r1, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4403      	add	r3, r0
 800168c:	3320      	adds	r3, #32
 800168e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	2b00      	cmp	r3, #0
 8001694:	d113      	bne.n	80016be <HAL_PCD_IRQHandler+0x3a2>
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	3324      	adds	r3, #36	@ 0x24
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d108      	bne.n	80016be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016b6:	461a      	mov	r2, r3
 80016b8:	2101      	movs	r1, #1
 80016ba:	f004 fa15 	bl	8005ae8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4619      	mov	r1, r3
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f006 fce4 	bl	8008092 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016e0:	461a      	mov	r2, r3
 80016e2:	2308      	movs	r3, #8
 80016e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016fc:	461a      	mov	r2, r3
 80016fe:	2310      	movs	r3, #16
 8001700:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	015a      	lsls	r2, r3, #5
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	4413      	add	r3, r2
 8001714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001718:	461a      	mov	r2, r3
 800171a:	2340      	movs	r3, #64	@ 0x40
 800171c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d023      	beq.n	8001770 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001728:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800172a:	6a38      	ldr	r0, [r7, #32]
 800172c:	f003 f9fc 	bl	8004b28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001732:	4613      	mov	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	3310      	adds	r3, #16
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	3304      	adds	r3, #4
 8001742:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	78db      	ldrb	r3, [r3, #3]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d108      	bne.n	800175e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2200      	movs	r2, #0
 8001750:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f006 fd31 	bl	80081c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	015a      	lsls	r2, r3, #5
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800176a:	461a      	mov	r2, r3
 800176c:	2302      	movs	r3, #2
 800176e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800177a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 fcea 	bl	8002156 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	3301      	adds	r3, #1
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178a:	085b      	lsrs	r3, r3, #1
 800178c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800178e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001790:	2b00      	cmp	r3, #0
 8001792:	f47f af2e 	bne.w	80015f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f004 f8e0 	bl	8005960 <USB_ReadInterrupts>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80017a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017aa:	d122      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d108      	bne.n	80017dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017d2:	2100      	movs	r1, #0
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f006 feab 	bl	8008530 <HAL_PCDEx_LPM_Callback>
 80017da:	e002      	b.n	80017e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f006 fccf 	bl	8008180 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80017f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 f8b2 	bl	8005960 <USB_ReadInterrupts>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001802:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001806:	d112      	bne.n	800182e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b01      	cmp	r3, #1
 8001816:	d102      	bne.n	800181e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f006 fc8b 	bl	8008134 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800182c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f004 f894 	bl	8005960 <USB_ReadInterrupts>
 8001838:	4603      	mov	r3, r0
 800183a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800183e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001842:	d121      	bne.n	8001888 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001852:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800185a:	2b00      	cmp	r3, #0
 800185c:	d111      	bne.n	8001882 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	f003 020f 	and.w	r2, r3, #15
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001878:	2101      	movs	r1, #1
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f006 fe58 	bl	8008530 <HAL_PCDEx_LPM_Callback>
 8001880:	e002      	b.n	8001888 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f006 fc56 	bl	8008134 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f004 f867 	bl	8005960 <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800189c:	f040 80b7 	bne.w	8001a0e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2110      	movs	r1, #16
 80018ba:	4618      	mov	r0, r3
 80018bc:	f003 f934 	bl	8004b28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018c4:	e046      	b.n	8001954 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018d2:	461a      	mov	r2, r3
 80018d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018ea:	0151      	lsls	r1, r2, #5
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	440a      	add	r2, r1
 80018f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80018f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	4413      	add	r3, r2
 8001902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001906:	461a      	mov	r2, r3
 8001908:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800190c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800190e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001910:	015a      	lsls	r2, r3, #5
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	4413      	add	r3, r2
 8001916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800191e:	0151      	lsls	r1, r2, #5
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	440a      	add	r2, r1
 8001924:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001928:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800192c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800192e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	4413      	add	r3, r2
 8001936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800193e:	0151      	lsls	r1, r2, #5
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	440a      	add	r2, r1
 8001944:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001948:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800194c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800194e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001950:	3301      	adds	r3, #1
 8001952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	791b      	ldrb	r3, [r3, #4]
 8001958:	461a      	mov	r2, r3
 800195a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800195c:	4293      	cmp	r3, r2
 800195e:	d3b2      	bcc.n	80018c6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800196e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001972:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7bdb      	ldrb	r3, [r3, #15]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d016      	beq.n	80019aa <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800198c:	f043 030b 	orr.w	r3, r3, #11
 8001990:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800199a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019a2:	f043 030b 	orr.w	r3, r3, #11
 80019a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a8:	e015      	b.n	80019d6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019bc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80019c0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019d0:	f043 030b 	orr.w	r3, r3, #11
 80019d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019e4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80019e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019f8:	461a      	mov	r2, r3
 80019fa:	f004 f875 	bl	8005ae8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 ffa4 	bl	8005960 <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a22:	d123      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 f83a 	bl	8005aa2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 f8f1 	bl	8004c1a <USB_GetDevSpeed>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681c      	ldr	r4, [r3, #0]
 8001a44:	f000 fea4 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 8001a48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4620      	mov	r0, r4
 8001a52:	f002 fdfb 	bl	800464c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f006 fb43 	bl	80080e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 ff75 	bl	8005960 <USB_ReadInterrupts>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d10a      	bne.n	8001a96 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f006 fb20 	bl	80080c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f002 0208 	and.w	r2, r2, #8
 8001a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 ff60 	bl	8005960 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aa6:	2b80      	cmp	r3, #128	@ 0x80
 8001aa8:	d123      	bne.n	8001af2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aba:	e014      	b.n	8001ae6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fb0a 	bl	80020f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	791b      	ldrb	r3, [r3, #4]
 8001aea:	461a      	mov	r2, r3
 8001aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d3e4      	bcc.n	8001abc <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 ff32 	bl	8005960 <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b06:	d13c      	bne.n	8001b82 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b08:	2301      	movs	r3, #1
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b0c:	e02b      	b.n	8001b66 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b10:	015a      	lsls	r2, r3, #5
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	3318      	adds	r3, #24
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d115      	bne.n	8001b60 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da12      	bge.n	8001b60 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	3317      	adds	r3, #23
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4619      	mov	r1, r3
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 faca 	bl	80020f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	3301      	adds	r3, #1
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	791b      	ldrb	r3, [r3, #4]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d3cd      	bcc.n	8001b0e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 feea 	bl	8005960 <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b96:	d156      	bne.n	8001c46 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b98:	2301      	movs	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9c:	e045      	b.n	8001c2a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	015a      	lsls	r2, r3, #5
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d12e      	bne.n	8001c24 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bc6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	da2b      	bge.n	8001c24 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001bd8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d121      	bne.n	8001c24 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10a      	bne.n	8001c24 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c20:	6053      	str	r3, [r2, #4]
            break;
 8001c22:	e008      	b.n	8001c36 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	3301      	adds	r3, #1
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	791b      	ldrb	r3, [r3, #4]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d3b3      	bcc.n	8001b9e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fe88 	bl	8005960 <USB_ReadInterrupts>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c5a:	d10a      	bne.n	8001c72 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f006 fac1 	bl	80081e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fe72 	bl	8005960 <USB_ReadInterrupts>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d115      	bne.n	8001cb2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f006 fab1 	bl	8008200 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	e000      	b.n	8001cb2 <HAL_PCD_IRQHandler+0x996>
      return;
 8001cb0:	bf00      	nop
    }
  }
}
 8001cb2:	3734      	adds	r7, #52	@ 0x34
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd90      	pop	{r4, r7, pc}

08001cb8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_PCD_SetAddress+0x1a>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e012      	b.n	8001cf8 <HAL_PCD_SetAddress+0x40>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 fdd1 	bl	8005890 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	4608      	mov	r0, r1
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	70fb      	strb	r3, [r7, #3]
 8001d12:	460b      	mov	r3, r1
 8001d14:	803b      	strh	r3, [r7, #0]
 8001d16:	4613      	mov	r3, r2
 8001d18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	da0f      	bge.n	8001d46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	3310      	adds	r3, #16
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	705a      	strb	r2, [r3, #1]
 8001d44:	e00f      	b.n	8001d66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	f003 020f 	and.w	r2, r3, #15
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001d72:	883b      	ldrh	r3, [r7, #0]
 8001d74:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	78ba      	ldrb	r2, [r7, #2]
 8001d80:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	785b      	ldrb	r3, [r3, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d004      	beq.n	8001d94 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d94:	78bb      	ldrb	r3, [r7, #2]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d102      	bne.n	8001da0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_PCD_EP_Open+0xae>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e00e      	b.n	8001dcc <HAL_PCD_EP_Open+0xcc>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68f9      	ldr	r1, [r7, #12]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f002 ff51 	bl	8004c64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001dca:	7afb      	ldrb	r3, [r7, #11]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da0f      	bge.n	8001e08 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	f003 020f 	and.w	r2, r3, #15
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	3310      	adds	r3, #16
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	705a      	strb	r2, [r3, #1]
 8001e06:	e00f      	b.n	8001e28 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	f003 020f 	and.w	r2, r3, #15
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_PCD_EP_Close+0x6e>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e00e      	b.n	8001e60 <HAL_PCD_EP_Close+0x8c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68f9      	ldr	r1, [r7, #12]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 ff8f 	bl	8004d74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	460b      	mov	r3, r1
 8001e76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e78:	7afb      	ldrb	r3, [r7, #11]
 8001e7a:	f003 020f 	and.w	r2, r3, #15
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3304      	adds	r3, #4
 8001e90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	799b      	ldrb	r3, [r3, #6]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d102      	bne.n	8001ec4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	799b      	ldrb	r3, [r3, #6]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	6979      	ldr	r1, [r7, #20]
 8001ed0:	f003 f82c 	bl	8004f2c <USB_EPStartXfer>

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001f00:	681b      	ldr	r3, [r3, #0]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f1e:	7afb      	ldrb	r3, [r7, #11]
 8001f20:	f003 020f 	and.w	r2, r3, #15
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	3310      	adds	r3, #16
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4413      	add	r3, r2
 8001f32:	3304      	adds	r3, #4
 8001f34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2200      	movs	r2, #0
 8001f46:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f4e:	7afb      	ldrb	r3, [r7, #11]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	799b      	ldrb	r3, [r3, #6]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d102      	bne.n	8001f68 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	799b      	ldrb	r3, [r3, #6]
 8001f70:	461a      	mov	r2, r3
 8001f72:	6979      	ldr	r1, [r7, #20]
 8001f74:	f002 ffda 	bl	8004f2c <USB_EPStartXfer>

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	7912      	ldrb	r2, [r2, #4]
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e04f      	b.n	8002040 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	da0f      	bge.n	8001fc8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 020f 	and.w	r2, r3, #15
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	3310      	adds	r3, #16
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	705a      	strb	r2, [r3, #1]
 8001fc6:	e00d      	b.n	8001fe4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	3304      	adds	r3, #4
 8001fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_PCD_EP_SetStall+0x82>
 8002000:	2302      	movs	r3, #2
 8002002:	e01d      	b.n	8002040 <HAL_PCD_EP_SetStall+0xbe>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68f9      	ldr	r1, [r7, #12]
 8002012:	4618      	mov	r0, r3
 8002014:	f003 fb68 	bl	80056e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7999      	ldrb	r1, [r3, #6]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002030:	461a      	mov	r2, r3
 8002032:	f003 fd59 	bl	8005ae8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	7912      	ldrb	r2, [r2, #4]
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e042      	b.n	80020ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800206a:	2b00      	cmp	r3, #0
 800206c:	da0f      	bge.n	800208e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 020f 	and.w	r2, r3, #15
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	3310      	adds	r3, #16
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	705a      	strb	r2, [r3, #1]
 800208c:	e00f      	b.n	80020ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	f003 020f 	and.w	r2, r3, #15
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	3304      	adds	r3, #4
 80020a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_PCD_EP_ClrStall+0x86>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e00e      	b.n	80020ec <HAL_PCD_EP_ClrStall+0xa4>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68f9      	ldr	r1, [r7, #12]
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 fb71 	bl	80057c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002104:	2b00      	cmp	r3, #0
 8002106:	da0c      	bge.n	8002122 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	f003 020f 	and.w	r2, r3, #15
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	3310      	adds	r3, #16
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	3304      	adds	r3, #4
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e00c      	b.n	800213c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	f003 020f 	and.w	r2, r3, #15
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	3304      	adds	r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68f9      	ldr	r1, [r7, #12]
 8002142:	4618      	mov	r0, r3
 8002144:	f003 f990 	bl	8005468 <USB_EPStopXfer>
 8002148:	4603      	mov	r3, r0
 800214a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800214c:	7afb      	ldrb	r3, [r7, #11]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b08a      	sub	sp, #40	@ 0x28
 800215a:	af02      	add	r7, sp, #8
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	3310      	adds	r3, #16
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	3304      	adds	r3, #4
 800217c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	429a      	cmp	r2, r3
 8002188:	d901      	bls.n	800218e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e06b      	b.n	8002266 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d902      	bls.n	80021aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3303      	adds	r3, #3
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021b2:	e02a      	b.n	800220a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d902      	bls.n	80021d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	3303      	adds	r3, #3
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	68d9      	ldr	r1, [r3, #12]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	4603      	mov	r3, r0
 80021ec:	6978      	ldr	r0, [r7, #20]
 80021ee:	f003 f9e5 	bl	80055bc <USB_WritePacket>

    ep->xfer_buff  += len;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	441a      	add	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	441a      	add	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	429a      	cmp	r2, r3
 800221e:	d809      	bhi.n	8002234 <PCD_WriteEmptyTxFifo+0xde>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002228:	429a      	cmp	r2, r3
 800222a:	d203      	bcs.n	8002234 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1bf      	bne.n	80021b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	d811      	bhi.n	8002264 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	2201      	movs	r2, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	43db      	mvns	r3, r3
 800225a:	6939      	ldr	r1, [r7, #16]
 800225c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002260:	4013      	ands	r3, r2
 8002262:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	333c      	adds	r3, #60	@ 0x3c
 8002288:	3304      	adds	r3, #4
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	799b      	ldrb	r3, [r3, #6]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d17b      	bne.n	800239e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d015      	beq.n	80022dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	4a61      	ldr	r2, [pc, #388]	@ (8002438 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	f240 80b9 	bls.w	800242c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80b3 	beq.w	800242c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022d2:	461a      	mov	r2, r3
 80022d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022d8:	6093      	str	r3, [r2, #8]
 80022da:	e0a7      	b.n	800242c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022f2:	461a      	mov	r2, r3
 80022f4:	2320      	movs	r3, #32
 80022f6:	6093      	str	r3, [r2, #8]
 80022f8:	e098      	b.n	800242c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 8093 	bne.w	800242c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	4a4b      	ldr	r2, [pc, #300]	@ (8002438 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d90f      	bls.n	800232e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002324:	461a      	mov	r2, r3
 8002326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800232a:	6093      	str	r3, [r2, #8]
 800232c:	e07e      	b.n	800242c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	4413      	add	r3, r2
 8002340:	3304      	adds	r3, #4
 8002342:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a1a      	ldr	r2, [r3, #32]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	0159      	lsls	r1, r3, #5
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	440b      	add	r3, r1
 8002350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	1ad2      	subs	r2, r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d114      	bne.n	8002390 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002378:	461a      	mov	r2, r3
 800237a:	2101      	movs	r1, #1
 800237c:	f003 fbb4 	bl	8005ae8 <USB_EP0_OutStart>
 8002380:	e006      	b.n	8002390 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	441a      	add	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	4619      	mov	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f005 fe60 	bl	800805c <HAL_PCD_DataOutStageCallback>
 800239c:	e046      	b.n	800242c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4a26      	ldr	r2, [pc, #152]	@ (800243c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d124      	bne.n	80023f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023bc:	461a      	mov	r2, r3
 80023be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023c2:	6093      	str	r3, [r2, #8]
 80023c4:	e032      	b.n	800242c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023dc:	461a      	mov	r2, r3
 80023de:	2320      	movs	r3, #32
 80023e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	4619      	mov	r1, r3
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f005 fe37 	bl	800805c <HAL_PCD_DataOutStageCallback>
 80023ee:	e01d      	b.n	800242c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d114      	bne.n	8002420 <PCD_EP_OutXfrComplete_int+0x1b0>
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d108      	bne.n	8002420 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002418:	461a      	mov	r2, r3
 800241a:	2100      	movs	r1, #0
 800241c:	f003 fb64 	bl	8005ae8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f005 fe18 	bl	800805c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	4f54300a 	.word	0x4f54300a
 800243c:	4f54310a 	.word	0x4f54310a

08002440 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	333c      	adds	r3, #60	@ 0x3c
 8002458:	3304      	adds	r3, #4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4a15      	ldr	r2, [pc, #84]	@ (80024c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d90e      	bls.n	8002494 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4413      	add	r3, r2
 8002488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800248c:	461a      	mov	r2, r3
 800248e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002492:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f005 fdcf 	bl	8008038 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d90c      	bls.n	80024bc <PCD_EP_OutSetupPacket_int+0x7c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	799b      	ldrb	r3, [r3, #6]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d108      	bne.n	80024bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024b4:	461a      	mov	r2, r3
 80024b6:	2101      	movs	r1, #1
 80024b8:	f003 fb16 	bl	8005ae8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	4f54300a 	.word	0x4f54300a

080024cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
 80024d8:	4613      	mov	r3, r2
 80024da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d107      	bne.n	80024fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024ea:	883b      	ldrh	r3, [r7, #0]
 80024ec:	0419      	lsls	r1, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80024f8:	e028      	b.n	800254c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	4413      	add	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e00d      	b.n	800252a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	3340      	adds	r3, #64	@ 0x40
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	0c1b      	lsrs	r3, r3, #16
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	4413      	add	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	3301      	adds	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	3b01      	subs	r3, #1
 8002530:	429a      	cmp	r2, r3
 8002532:	d3ec      	bcc.n	800250e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002534:	883b      	ldrh	r3, [r7, #0]
 8002536:	0418      	lsls	r0, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6819      	ldr	r1, [r3, #0]
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	3b01      	subs	r3, #1
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	4302      	orrs	r2, r0
 8002544:	3340      	adds	r3, #64	@ 0x40
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ae:	f043 0303 	orr.w	r3, r3, #3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0cc      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b68      	ldr	r3, [pc, #416]	@ (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d90c      	bls.n	8002600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b65      	ldr	r3, [pc, #404]	@ (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b63      	ldr	r3, [pc, #396]	@ (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0b8      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002618:	4b59      	ldr	r3, [pc, #356]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a58      	ldr	r2, [pc, #352]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002622:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002630:	4b53      	ldr	r3, [pc, #332]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a52      	ldr	r2, [pc, #328]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800263a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b50      	ldr	r3, [pc, #320]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	494d      	ldr	r1, [pc, #308]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d044      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b47      	ldr	r3, [pc, #284]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d119      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e07f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d003      	beq.n	8002682 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267e:	2b03      	cmp	r3, #3
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b3f      	ldr	r3, [pc, #252]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	4b3b      	ldr	r3, [pc, #236]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e067      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a2:	4b37      	ldr	r3, [pc, #220]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 0203 	bic.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4934      	ldr	r1, [pc, #208]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b4:	f7fe f966 	bl	8000984 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026bc:	f7fe f962 	bl	8000984 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e04f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 020c 	and.w	r2, r3, #12
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1eb      	bne.n	80026bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e4:	4b25      	ldr	r3, [pc, #148]	@ (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d20c      	bcs.n	800270c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b22      	ldr	r3, [pc, #136]	@ (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b20      	ldr	r3, [pc, #128]	@ (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e032      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002718:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4916      	ldr	r1, [pc, #88]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002736:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	490e      	ldr	r1, [pc, #56]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800274a:	f000 fb7f 	bl	8002e4c <HAL_RCC_GetSysClockFreq>
 800274e:	4602      	mov	r2, r0
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	490a      	ldr	r1, [pc, #40]	@ (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	5ccb      	ldrb	r3, [r1, r3]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	4a09      	ldr	r2, [pc, #36]	@ (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe f8c6 	bl	80008fc <HAL_InitTick>

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023c00 	.word	0x40023c00
 8002780:	40023800 	.word	0x40023800
 8002784:	0800870c 	.word	0x0800870c
 8002788:	2000001c 	.word	0x2000001c
 800278c:	20000020 	.word	0x20000020

08002790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002794:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	2000001c 	.word	0x2000001c

080027a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027ac:	f7ff fff0 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0a9b      	lsrs	r3, r3, #10
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	@ (80027cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	0800871c 	.word	0x0800871c

080027d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027d4:	f7ff ffdc 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	0b5b      	lsrs	r3, r3, #13
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4903      	ldr	r1, [pc, #12]	@ (80027f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40023800 	.word	0x40023800
 80027f4:	0800871c 	.word	0x0800871c

080027f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	@ 0x30
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d010      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002830:	4b6f      	ldr	r3, [pc, #444]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002832:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002836:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283e:	496c      	ldr	r1, [pc, #432]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800284e:	2301      	movs	r3, #1
 8002850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d010      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800285e:	4b64      	ldr	r3, [pc, #400]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002864:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286c:	4960      	ldr	r1, [pc, #384]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800287c:	2301      	movs	r3, #1
 800287e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d017      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800288c:	4b58      	ldr	r3, [pc, #352]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800288e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002892:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	4955      	ldr	r1, [pc, #340]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028aa:	d101      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80028ac:	2301      	movs	r3, #1
 80028ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80028b8:	2301      	movs	r3, #1
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d017      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028c8:	4b49      	ldr	r3, [pc, #292]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d6:	4946      	ldr	r1, [pc, #280]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028e6:	d101      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80028e8:	2301      	movs	r3, #1
 80028ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80028f4:	2301      	movs	r3, #1
 80028f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 808a 	beq.w	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	4b39      	ldr	r3, [pc, #228]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	4a38      	ldr	r2, [pc, #224]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002914:	6413      	str	r3, [r2, #64]	@ 0x40
 8002916:	4b36      	ldr	r3, [pc, #216]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002922:	4b34      	ldr	r3, [pc, #208]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a33      	ldr	r2, [pc, #204]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800292e:	f7fe f829 	bl	8000984 <HAL_GetTick>
 8002932:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7fe f825 	bl	8000984 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e278      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002948:	4b2a      	ldr	r3, [pc, #168]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002954:	4b26      	ldr	r3, [pc, #152]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002958:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800295c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d02f      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800296c:	6a3a      	ldr	r2, [r7, #32]
 800296e:	429a      	cmp	r2, r3
 8002970:	d028      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002972:	4b1f      	ldr	r3, [pc, #124]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800297a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800297c:	4b1e      	ldr	r3, [pc, #120]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002982:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002988:	4a19      	ldr	r2, [pc, #100]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800298e:	4b18      	ldr	r3, [pc, #96]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d114      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800299a:	f7fd fff3 	bl	8000984 <HAL_GetTick>
 800299e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7fd ffef 	bl	8000984 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e240      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b8:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0ee      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029d0:	d114      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80029d2:	4b07      	ldr	r3, [pc, #28]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80029e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029e6:	4902      	ldr	r1, [pc, #8]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]
 80029ec:	e00c      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40007000 	.word	0x40007000
 80029f8:	42470e40 	.word	0x42470e40
 80029fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a49      	ldr	r2, [pc, #292]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a06:	6093      	str	r3, [r2, #8]
 8002a08:	4b47      	ldr	r3, [pc, #284]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a14:	4944      	ldr	r1, [pc, #272]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002a2e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4a:	4937      	ldr	r1, [pc, #220]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a5e:	4b32      	ldr	r3, [pc, #200]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a64:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a6c:	492e      	ldr	r1, [pc, #184]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d011      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a80:	4b29      	ldr	r3, [pc, #164]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a86:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8e:	4926      	ldr	r1, [pc, #152]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ab6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abe:	491a      	ldr	r1, [pc, #104]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d011      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae0:	4911      	ldr	r1, [pc, #68]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002af0:	d101      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002af2:	2301      	movs	r3, #1
 8002af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d005      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b04:	f040 80ff 	bne.w	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b08:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b0e:	f7fd ff39 	bl	8000984 <HAL_GetTick>
 8002b12:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b14:	e00e      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b16:	f7fd ff35 	bl	8000984 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d907      	bls.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e188      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	424711e0 	.word	0x424711e0
 8002b30:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b34:	4b7e      	ldr	r3, [pc, #504]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1ea      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d009      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d028      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d124      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b68:	4b71      	ldr	r3, [pc, #452]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b6e:	0c1b      	lsrs	r3, r3, #16
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	3301      	adds	r3, #1
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b80:	0e1b      	lsrs	r3, r3, #24
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	019b      	lsls	r3, r3, #6
 8002b92:	431a      	orrs	r2, r3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	071b      	lsls	r3, r3, #28
 8002baa:	4961      	ldr	r1, [pc, #388]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d035      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bdc:	d130      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bde:	4b54      	ldr	r3, [pc, #336]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	3301      	adds	r3, #1
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bf6:	0f1b      	lsrs	r3, r3, #28
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	019b      	lsls	r3, r3, #6
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	041b      	lsls	r3, r3, #16
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	061b      	lsls	r3, r3, #24
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	071b      	lsls	r3, r3, #28
 8002c20:	4943      	ldr	r1, [pc, #268]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c28:	4b41      	ldr	r3, [pc, #260]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c2e:	f023 021f 	bic.w	r2, r3, #31
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c36:	3b01      	subs	r3, #1
 8002c38:	493d      	ldr	r1, [pc, #244]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d029      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c54:	d124      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c56:	4b36      	ldr	r3, [pc, #216]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	3301      	adds	r3, #1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c68:	4b31      	ldr	r3, [pc, #196]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c6e:	0f1b      	lsrs	r3, r3, #28
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	019b      	lsls	r3, r3, #6
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	041b      	lsls	r3, r3, #16
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	431a      	orrs	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	071b      	lsls	r3, r3, #28
 8002c98:	4925      	ldr	r1, [pc, #148]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d016      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	071b      	lsls	r3, r3, #28
 8002cd2:	4917      	ldr	r1, [pc, #92]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cda:	4b16      	ldr	r3, [pc, #88]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ce0:	f7fd fe50 	bl	8000984 <HAL_GetTick>
 8002ce4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ce8:	f7fd fe4c 	bl	8000984 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e09f      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	f040 8095 	bne.w	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d14:	f7fd fe36 	bl	8000984 <HAL_GetTick>
 8002d18:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d1a:	e00f      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d1c:	f7fd fe32 	bl	8000984 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d908      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e085      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	42470068 	.word	0x42470068
 8002d38:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d3c:	4b41      	ldr	r3, [pc, #260]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d48:	d0e8      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d02b      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d127      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002d72:	4b34      	ldr	r3, [pc, #208]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	019b      	lsls	r3, r3, #6
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	3b01      	subs	r3, #1
 8002d96:	041b      	lsls	r3, r3, #16
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	061b      	lsls	r3, r3, #24
 8002da0:	4928      	ldr	r1, [pc, #160]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002da8:	4b26      	ldr	r3, [pc, #152]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dae:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db6:	3b01      	subs	r3, #1
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	4922      	ldr	r1, [pc, #136]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01d      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dd6:	d118      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dde:	0e1b      	lsrs	r3, r3, #24
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	019b      	lsls	r3, r3, #6
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	4910      	ldr	r1, [pc, #64]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e10:	f7fd fdb8 	bl	8000984 <HAL_GetTick>
 8002e14:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e18:	f7fd fdb4 	bl	8000984 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e007      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e36:	d1ef      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3730      	adds	r7, #48	@ 0x30
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	42470070 	.word	0x42470070

08002e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e50:	b0a6      	sub	sp, #152	@ 0x98
 8002e52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e72:	4bc8      	ldr	r3, [pc, #800]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	f200 817e 	bhi.w	800317c <HAL_RCC_GetSysClockFreq+0x330>
 8002e80:	a201      	add	r2, pc, #4	@ (adr r2, 8002e88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002ebd 	.word	0x08002ebd
 8002e8c:	0800317d 	.word	0x0800317d
 8002e90:	0800317d 	.word	0x0800317d
 8002e94:	0800317d 	.word	0x0800317d
 8002e98:	08002ec5 	.word	0x08002ec5
 8002e9c:	0800317d 	.word	0x0800317d
 8002ea0:	0800317d 	.word	0x0800317d
 8002ea4:	0800317d 	.word	0x0800317d
 8002ea8:	08002ecd 	.word	0x08002ecd
 8002eac:	0800317d 	.word	0x0800317d
 8002eb0:	0800317d 	.word	0x0800317d
 8002eb4:	0800317d 	.word	0x0800317d
 8002eb8:	08003037 	.word	0x08003037
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ebc:	4bb6      	ldr	r3, [pc, #728]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002ebe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ec2:	e15f      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ec4:	4bb5      	ldr	r3, [pc, #724]	@ (800319c <HAL_RCC_GetSysClockFreq+0x350>)
 8002ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002eca:	e15b      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ecc:	4bb1      	ldr	r3, [pc, #708]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ed4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ed8:	4bae      	ldr	r3, [pc, #696]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x348>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d031      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee4:	4bab      	ldr	r3, [pc, #684]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	2200      	movs	r2, #0
 8002eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ef8:	2300      	movs	r3, #0
 8002efa:	667b      	str	r3, [r7, #100]	@ 0x64
 8002efc:	4ba7      	ldr	r3, [pc, #668]	@ (800319c <HAL_RCC_GetSysClockFreq+0x350>)
 8002efe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f02:	462a      	mov	r2, r5
 8002f04:	fb03 f202 	mul.w	r2, r3, r2
 8002f08:	2300      	movs	r3, #0
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	4aa2      	ldr	r2, [pc, #648]	@ (800319c <HAL_RCC_GetSysClockFreq+0x350>)
 8002f14:	4621      	mov	r1, r4
 8002f16:	fba1 1202 	umull	r1, r2, r1, r2
 8002f1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f1c:	460a      	mov	r2, r1
 8002f1e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002f20:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002f22:	4413      	add	r3, r2
 8002f24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f2e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f34:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002f38:	f7fd f964 	bl	8000204 <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4613      	mov	r3, r2
 8002f42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f46:	e064      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f48:	4b92      	ldr	r3, [pc, #584]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	099b      	lsrs	r3, r3, #6
 8002f4e:	2200      	movs	r2, #0
 8002f50:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f52:	657a      	str	r2, [r7, #84]	@ 0x54
 8002f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f60:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002f64:	4622      	mov	r2, r4
 8002f66:	462b      	mov	r3, r5
 8002f68:	f04f 0000 	mov.w	r0, #0
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	0159      	lsls	r1, r3, #5
 8002f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f76:	0150      	lsls	r0, r2, #5
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	1a51      	subs	r1, r2, r1
 8002f80:	6139      	str	r1, [r7, #16]
 8002f82:	4629      	mov	r1, r5
 8002f84:	eb63 0301 	sbc.w	r3, r3, r1
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f96:	4659      	mov	r1, fp
 8002f98:	018b      	lsls	r3, r1, #6
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fa0:	4651      	mov	r1, sl
 8002fa2:	018a      	lsls	r2, r1, #6
 8002fa4:	4651      	mov	r1, sl
 8002fa6:	ebb2 0801 	subs.w	r8, r2, r1
 8002faa:	4659      	mov	r1, fp
 8002fac:	eb63 0901 	sbc.w	r9, r3, r1
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fc4:	4690      	mov	r8, r2
 8002fc6:	4699      	mov	r9, r3
 8002fc8:	4623      	mov	r3, r4
 8002fca:	eb18 0303 	adds.w	r3, r8, r3
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	eb49 0303 	adc.w	r3, r9, r3
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	028b      	lsls	r3, r1, #10
 8002fe8:	4621      	mov	r1, r4
 8002fea:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fee:	4621      	mov	r1, r4
 8002ff0:	028a      	lsls	r2, r1, #10
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ffe:	647a      	str	r2, [r7, #68]	@ 0x44
 8003000:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003004:	f7fd f8fe 	bl	8000204 <__aeabi_uldivmod>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4613      	mov	r3, r2
 800300e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003012:	4b60      	ldr	r3, [pc, #384]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x348>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	0c1b      	lsrs	r3, r3, #16
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	3301      	adds	r3, #1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003024:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003028:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003034:	e0a6      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003036:	4b57      	ldr	r3, [pc, #348]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x348>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800303e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003042:	4b54      	ldr	r3, [pc, #336]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x348>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d02a      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304e:	4b51      	ldr	r3, [pc, #324]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x348>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	2200      	movs	r2, #0
 8003056:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003058:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800305a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800305c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003060:	2100      	movs	r1, #0
 8003062:	4b4e      	ldr	r3, [pc, #312]	@ (800319c <HAL_RCC_GetSysClockFreq+0x350>)
 8003064:	fb03 f201 	mul.w	r2, r3, r1
 8003068:	2300      	movs	r3, #0
 800306a:	fb00 f303 	mul.w	r3, r0, r3
 800306e:	4413      	add	r3, r2
 8003070:	4a4a      	ldr	r2, [pc, #296]	@ (800319c <HAL_RCC_GetSysClockFreq+0x350>)
 8003072:	fba0 1202 	umull	r1, r2, r0, r2
 8003076:	677a      	str	r2, [r7, #116]	@ 0x74
 8003078:	460a      	mov	r2, r1
 800307a:	673a      	str	r2, [r7, #112]	@ 0x70
 800307c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800307e:	4413      	add	r3, r2
 8003080:	677b      	str	r3, [r7, #116]	@ 0x74
 8003082:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003086:	2200      	movs	r2, #0
 8003088:	633b      	str	r3, [r7, #48]	@ 0x30
 800308a:	637a      	str	r2, [r7, #52]	@ 0x34
 800308c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003090:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003094:	f7fd f8b6 	bl	8000204 <__aeabi_uldivmod>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4613      	mov	r3, r2
 800309e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80030a2:	e05b      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x348>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	2200      	movs	r2, #0
 80030ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b6:	623b      	str	r3, [r7, #32]
 80030b8:	2300      	movs	r3, #0
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80030bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030c0:	4642      	mov	r2, r8
 80030c2:	464b      	mov	r3, r9
 80030c4:	f04f 0000 	mov.w	r0, #0
 80030c8:	f04f 0100 	mov.w	r1, #0
 80030cc:	0159      	lsls	r1, r3, #5
 80030ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d2:	0150      	lsls	r0, r2, #5
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4641      	mov	r1, r8
 80030da:	ebb2 0a01 	subs.w	sl, r2, r1
 80030de:	4649      	mov	r1, r9
 80030e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030f8:	ebb2 040a 	subs.w	r4, r2, sl
 80030fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	00eb      	lsls	r3, r5, #3
 800310a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800310e:	00e2      	lsls	r2, r4, #3
 8003110:	4614      	mov	r4, r2
 8003112:	461d      	mov	r5, r3
 8003114:	4643      	mov	r3, r8
 8003116:	18e3      	adds	r3, r4, r3
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	464b      	mov	r3, r9
 800311c:	eb45 0303 	adc.w	r3, r5, r3
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800312e:	4629      	mov	r1, r5
 8003130:	028b      	lsls	r3, r1, #10
 8003132:	4621      	mov	r1, r4
 8003134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003138:	4621      	mov	r1, r4
 800313a:	028a      	lsls	r2, r1, #10
 800313c:	4610      	mov	r0, r2
 800313e:	4619      	mov	r1, r3
 8003140:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003144:	2200      	movs	r2, #0
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	61fa      	str	r2, [r7, #28]
 800314a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800314e:	f7fd f859 	bl	8000204 <__aeabi_uldivmod>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4613      	mov	r3, r2
 8003158:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800315c:	4b0d      	ldr	r3, [pc, #52]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x348>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	0f1b      	lsrs	r3, r3, #28
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800316a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800316e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800317a:	e003      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x34c>)
 800317e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003182:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003184:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003188:	4618      	mov	r0, r3
 800318a:	3798      	adds	r7, #152	@ 0x98
 800318c:	46bd      	mov	sp, r7
 800318e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800
 8003198:	00f42400 	.word	0x00f42400
 800319c:	017d7840 	.word	0x017d7840

080031a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e28d      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8083 	beq.w	80032c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031c0:	4b94      	ldr	r3, [pc, #592]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 030c 	and.w	r3, r3, #12
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d019      	beq.n	8003200 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031cc:	4b91      	ldr	r3, [pc, #580]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031e4:	d00c      	beq.n	8003200 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031ee:	2b0c      	cmp	r3, #12
 80031f0:	d112      	bne.n	8003218 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f2:	4b88      	ldr	r3, [pc, #544]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031fe:	d10b      	bne.n	8003218 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	4b84      	ldr	r3, [pc, #528]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d05b      	beq.n	80032c4 <HAL_RCC_OscConfig+0x124>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d157      	bne.n	80032c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e25a      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003220:	d106      	bne.n	8003230 <HAL_RCC_OscConfig+0x90>
 8003222:	4b7c      	ldr	r3, [pc, #496]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7b      	ldr	r2, [pc, #492]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xcc>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0xb4>
 800323a:	4b76      	ldr	r3, [pc, #472]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a75      	ldr	r2, [pc, #468]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b73      	ldr	r3, [pc, #460]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a72      	ldr	r2, [pc, #456]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xcc>
 8003254:	4b6f      	ldr	r3, [pc, #444]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6e      	ldr	r2, [pc, #440]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b6c      	ldr	r3, [pc, #432]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a6b      	ldr	r2, [pc, #428]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800326a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd fb86 	bl	8000984 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fd fb82 	bl	8000984 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	@ 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e21f      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b61      	ldr	r3, [pc, #388]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xdc>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fd fb72 	bl	8000984 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fd fb6e 	bl	8000984 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	@ 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e20b      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	4b57      	ldr	r3, [pc, #348]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x104>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d06f      	beq.n	80033b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032d2:	4b50      	ldr	r3, [pc, #320]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d017      	beq.n	800330e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032de:	4b4d      	ldr	r3, [pc, #308]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d105      	bne.n	80032f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f6:	4b47      	ldr	r3, [pc, #284]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d11c      	bne.n	800333c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003302:	4b44      	ldr	r3, [pc, #272]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d116      	bne.n	800333c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330e:	4b41      	ldr	r3, [pc, #260]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_RCC_OscConfig+0x186>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d001      	beq.n	8003326 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e1d3      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003326:	4b3b      	ldr	r3, [pc, #236]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4937      	ldr	r1, [pc, #220]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333a:	e03a      	b.n	80033b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003344:	4b34      	ldr	r3, [pc, #208]	@ (8003418 <HAL_RCC_OscConfig+0x278>)
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334a:	f7fd fb1b 	bl	8000984 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003352:	f7fd fb17 	bl	8000984 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e1b4      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003364:	4b2b      	ldr	r3, [pc, #172]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003370:	4b28      	ldr	r3, [pc, #160]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4925      	ldr	r1, [pc, #148]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]
 8003384:	e015      	b.n	80033b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003386:	4b24      	ldr	r3, [pc, #144]	@ (8003418 <HAL_RCC_OscConfig+0x278>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fd fafa 	bl	8000984 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003394:	f7fd faf6 	bl	8000984 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e193      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d036      	beq.n	800342c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d016      	beq.n	80033f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c6:	4b15      	ldr	r3, [pc, #84]	@ (800341c <HAL_RCC_OscConfig+0x27c>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fd fada 	bl	8000984 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7fd fad6 	bl	8000984 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e173      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80033e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x234>
 80033f2:	e01b      	b.n	800342c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f4:	4b09      	ldr	r3, [pc, #36]	@ (800341c <HAL_RCC_OscConfig+0x27c>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fd fac3 	bl	8000984 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003400:	e00e      	b.n	8003420 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003402:	f7fd fabf 	bl	8000984 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d907      	bls.n	8003420 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e15c      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
 8003414:	40023800 	.word	0x40023800
 8003418:	42470000 	.word	0x42470000
 800341c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003420:	4b8a      	ldr	r3, [pc, #552]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 8003422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ea      	bne.n	8003402 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8097 	beq.w	8003568 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343e:	4b83      	ldr	r3, [pc, #524]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	4b7f      	ldr	r3, [pc, #508]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	4a7e      	ldr	r2, [pc, #504]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003458:	6413      	str	r3, [r2, #64]	@ 0x40
 800345a:	4b7c      	ldr	r3, [pc, #496]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346a:	4b79      	ldr	r3, [pc, #484]	@ (8003650 <HAL_RCC_OscConfig+0x4b0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d118      	bne.n	80034a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003476:	4b76      	ldr	r3, [pc, #472]	@ (8003650 <HAL_RCC_OscConfig+0x4b0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a75      	ldr	r2, [pc, #468]	@ (8003650 <HAL_RCC_OscConfig+0x4b0>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003482:	f7fd fa7f 	bl	8000984 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7fd fa7b 	bl	8000984 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e118      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	4b6c      	ldr	r3, [pc, #432]	@ (8003650 <HAL_RCC_OscConfig+0x4b0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x31e>
 80034b0:	4b66      	ldr	r3, [pc, #408]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b4:	4a65      	ldr	r2, [pc, #404]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80034bc:	e01c      	b.n	80034f8 <HAL_RCC_OscConfig+0x358>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x340>
 80034c6:	4b61      	ldr	r3, [pc, #388]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ca:	4a60      	ldr	r2, [pc, #384]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d2:	4b5e      	ldr	r3, [pc, #376]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d6:	4a5d      	ldr	r2, [pc, #372]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0x358>
 80034e0:	4b5a      	ldr	r3, [pc, #360]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e4:	4a59      	ldr	r2, [pc, #356]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ec:	4b57      	ldr	r3, [pc, #348]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f0:	4a56      	ldr	r2, [pc, #344]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 80034f2:	f023 0304 	bic.w	r3, r3, #4
 80034f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d015      	beq.n	800352c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fd fa40 	bl	8000984 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003506:	e00a      	b.n	800351e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003508:	f7fd fa3c 	bl	8000984 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0d7      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351e:	4b4b      	ldr	r3, [pc, #300]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ee      	beq.n	8003508 <HAL_RCC_OscConfig+0x368>
 800352a:	e014      	b.n	8003556 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fd fa2a 	bl	8000984 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003532:	e00a      	b.n	800354a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fd fa26 	bl	8000984 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e0c1      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354a:	4b40      	ldr	r3, [pc, #256]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ee      	bne.n	8003534 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d105      	bne.n	8003568 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355c:	4b3b      	ldr	r3, [pc, #236]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	4a3a      	ldr	r2, [pc, #232]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 8003562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003566:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80ad 	beq.w	80036cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003572:	4b36      	ldr	r3, [pc, #216]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b08      	cmp	r3, #8
 800357c:	d060      	beq.n	8003640 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d145      	bne.n	8003612 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003586:	4b33      	ldr	r3, [pc, #204]	@ (8003654 <HAL_RCC_OscConfig+0x4b4>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fd f9fa 	bl	8000984 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fd f9f6 	bl	8000984 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e093      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a6:	4b29      	ldr	r3, [pc, #164]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	019b      	lsls	r3, r3, #6
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	085b      	lsrs	r3, r3, #1
 80035ca:	3b01      	subs	r3, #1
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	061b      	lsls	r3, r3, #24
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	071b      	lsls	r3, r3, #28
 80035de:	491b      	ldr	r1, [pc, #108]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <HAL_RCC_OscConfig+0x4b4>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fd f9cb 	bl	8000984 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fd f9c7 	bl	8000984 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e064      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003604:	4b11      	ldr	r3, [pc, #68]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x452>
 8003610:	e05c      	b.n	80036cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003612:	4b10      	ldr	r3, [pc, #64]	@ (8003654 <HAL_RCC_OscConfig+0x4b4>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fd f9b4 	bl	8000984 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003620:	f7fd f9b0 	bl	8000984 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e04d      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003632:	4b06      	ldr	r3, [pc, #24]	@ (800364c <HAL_RCC_OscConfig+0x4ac>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x480>
 800363e:	e045      	b.n	80036cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d107      	bne.n	8003658 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e040      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
 800364c:	40023800 	.word	0x40023800
 8003650:	40007000 	.word	0x40007000
 8003654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003658:	4b1f      	ldr	r3, [pc, #124]	@ (80036d8 <HAL_RCC_OscConfig+0x538>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d030      	beq.n	80036c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d129      	bne.n	80036c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d122      	bne.n	80036c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003688:	4013      	ands	r3, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800368e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003690:	4293      	cmp	r3, r2
 8003692:	d119      	bne.n	80036c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	3b01      	subs	r3, #1
 80036a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d10f      	bne.n	80036c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d107      	bne.n	80036c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800

080036dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e042      	b.n	8003774 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd f808 	bl	8000718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	@ 0x24
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800371e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fcbb 	bl	800409c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	d121      	bne.n	80037da <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_UART_Transmit_IT+0x26>
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e01a      	b.n	80037dc <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	88fa      	ldrh	r2, [r7, #6]
 80037b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	88fa      	ldrh	r2, [r7, #6]
 80037b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2221      	movs	r2, #33	@ 0x21
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037d4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
  }
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b0ba      	sub	sp, #232	@ 0xe8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003814:	2300      	movs	r3, #0
 8003816:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10f      	bne.n	800384e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800382e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_UART_IRQHandler+0x66>
 800383a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fb69 	bl	8003f1e <UART_Receive_IT>
      return;
 800384c:	e25b      	b.n	8003d06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800384e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80de 	beq.w	8003a14 <HAL_UART_IRQHandler+0x22c>
 8003858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d106      	bne.n	8003872 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003868:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80d1 	beq.w	8003a14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <HAL_UART_IRQHandler+0xae>
 800387e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d005      	beq.n	8003896 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	f043 0201 	orr.w	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_UART_IRQHandler+0xd2>
 80038a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	f043 0202 	orr.w	r2, r3, #2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00b      	beq.n	80038de <HAL_UART_IRQHandler+0xf6>
 80038c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	f043 0204 	orr.w	r2, r3, #4
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d011      	beq.n	800390e <HAL_UART_IRQHandler+0x126>
 80038ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d105      	bne.n	8003902 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003906:	f043 0208 	orr.w	r2, r3, #8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 81f2 	beq.w	8003cfc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_UART_IRQHandler+0x14e>
 8003924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 faf4 	bl	8003f1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003940:	2b40      	cmp	r3, #64	@ 0x40
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <HAL_UART_IRQHandler+0x17a>
 800395a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800395e:	2b00      	cmp	r3, #0
 8003960:	d04f      	beq.n	8003a02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f9fc 	bl	8003d60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003972:	2b40      	cmp	r3, #64	@ 0x40
 8003974:	d141      	bne.n	80039fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3314      	adds	r3, #20
 800397c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800398c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003994:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3314      	adds	r3, #20
 800399e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1d9      	bne.n	8003976 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d013      	beq.n	80039f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ce:	4a7e      	ldr	r2, [pc, #504]	@ (8003bc8 <HAL_UART_IRQHandler+0x3e0>)
 80039d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd f985 	bl	8000ce6 <HAL_DMA_Abort_IT>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d016      	beq.n	8003a10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039ec:	4610      	mov	r0, r2
 80039ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	e00e      	b.n	8003a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f99e 	bl	8003d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f8:	e00a      	b.n	8003a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f99a 	bl	8003d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	e006      	b.n	8003a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f996 	bl	8003d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a0e:	e175      	b.n	8003cfc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a10:	bf00      	nop
    return;
 8003a12:	e173      	b.n	8003cfc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	f040 814f 	bne.w	8003cbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8148 	beq.w	8003cbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8141 	beq.w	8003cbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5a:	2b40      	cmp	r3, #64	@ 0x40
 8003a5c:	f040 80b6 	bne.w	8003bcc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8145 	beq.w	8003d00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	f080 813e 	bcs.w	8003d00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a96:	f000 8088 	beq.w	8003baa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ac6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003aca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1d9      	bne.n	8003a9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3314      	adds	r3, #20
 8003aec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003af0:	e853 3f00 	ldrex	r3, [r3]
 8003af4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003af6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3314      	adds	r3, #20
 8003b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e1      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3314      	adds	r3, #20
 8003b28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3314      	adds	r3, #20
 8003b42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e3      	bne.n	8003b22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	330c      	adds	r3, #12
 8003b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b7a:	f023 0310 	bic.w	r3, r3, #16
 8003b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e3      	bne.n	8003b68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fd f82e 	bl	8000c06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f8c1 	bl	8003d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bc6:	e09b      	b.n	8003d00 <HAL_UART_IRQHandler+0x518>
 8003bc8:	08003e27 	.word	0x08003e27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 808e 	beq.w	8003d04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8089 	beq.w	8003d04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c16:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e3      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3314      	adds	r3, #20
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	623b      	str	r3, [r7, #32]
   return(result);
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3314      	adds	r3, #20
 8003c4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e3      	bne.n	8003c2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0310 	bic.w	r3, r3, #16
 8003c86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c94:	61fa      	str	r2, [r7, #28]
 8003c96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	69b9      	ldr	r1, [r7, #24]
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e3      	bne.n	8003c70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f847 	bl	8003d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cba:	e023      	b.n	8003d04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d009      	beq.n	8003cdc <HAL_UART_IRQHandler+0x4f4>
 8003cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f8ba 	bl	8003e4e <UART_Transmit_IT>
    return;
 8003cda:	e014      	b.n	8003d06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00e      	beq.n	8003d06 <HAL_UART_IRQHandler+0x51e>
 8003ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f8fa 	bl	8003eee <UART_EndTransmit_IT>
    return;
 8003cfa:	e004      	b.n	8003d06 <HAL_UART_IRQHandler+0x51e>
    return;
 8003cfc:	bf00      	nop
 8003cfe:	e002      	b.n	8003d06 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d00:	bf00      	nop
 8003d02:	e000      	b.n	8003d06 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d04:	bf00      	nop
  }
}
 8003d06:	37e8      	adds	r7, #232	@ 0xe8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b095      	sub	sp, #84	@ 0x54
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d88:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e5      	bne.n	8003d68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3314      	adds	r3, #20
 8003da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3314      	adds	r3, #20
 8003dba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d119      	bne.n	8003e0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f023 0310 	bic.w	r3, r3, #16
 8003dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003df8:	61ba      	str	r2, [r7, #24]
 8003dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6979      	ldr	r1, [r7, #20]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	613b      	str	r3, [r7, #16]
   return(result);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e5      	bne.n	8003dd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e1a:	bf00      	nop
 8003e1c:	3754      	adds	r7, #84	@ 0x54
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7ff ff77 	bl	8003d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b21      	cmp	r3, #33	@ 0x21
 8003e60:	d13e      	bne.n	8003ee0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6a:	d114      	bne.n	8003e96 <UART_Transmit_IT+0x48>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d110      	bne.n	8003e96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	1c9a      	adds	r2, r3, #2
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	621a      	str	r2, [r3, #32]
 8003e94:	e008      	b.n	8003ea8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	1c59      	adds	r1, r3, #1
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6211      	str	r1, [r2, #32]
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10f      	bne.n	8003edc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003eca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fefc 	bl	8003d0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b08c      	sub	sp, #48	@ 0x30
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b22      	cmp	r3, #34	@ 0x22
 8003f30:	f040 80ae 	bne.w	8004090 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3c:	d117      	bne.n	8003f6e <UART_Receive_IT+0x50>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d113      	bne.n	8003f6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f66:	1c9a      	adds	r2, r3, #2
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f6c:	e026      	b.n	8003fbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f80:	d007      	beq.n	8003f92 <UART_Receive_IT+0x74>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <UART_Receive_IT+0x82>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e008      	b.n	8003fb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d15d      	bne.n	800408c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0220 	bic.w	r2, r2, #32
 8003fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004012:	2b01      	cmp	r3, #1
 8004014:	d135      	bne.n	8004082 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	613b      	str	r3, [r7, #16]
   return(result);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f023 0310 	bic.w	r3, r3, #16
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403c:	623a      	str	r2, [r7, #32]
 800403e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	69f9      	ldr	r1, [r7, #28]
 8004042:	6a3a      	ldr	r2, [r7, #32]
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	61bb      	str	r3, [r7, #24]
   return(result);
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e5      	bne.n	800401c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b10      	cmp	r3, #16
 800405c:	d10a      	bne.n	8004074 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004078:	4619      	mov	r1, r3
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fe64 	bl	8003d48 <HAL_UARTEx_RxEventCallback>
 8004080:	e002      	b.n	8004088 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fe4c 	bl	8003d20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e002      	b.n	8004092 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e000      	b.n	8004092 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	3730      	adds	r7, #48	@ 0x30
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800409c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a0:	b0c0      	sub	sp, #256	@ 0x100
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	68d9      	ldr	r1, [r3, #12]
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	ea40 0301 	orr.w	r3, r0, r1
 80040c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	431a      	orrs	r2, r3
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040f4:	f021 010c 	bic.w	r1, r1, #12
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004102:	430b      	orrs	r3, r1
 8004104:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004116:	6999      	ldr	r1, [r3, #24]
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	ea40 0301 	orr.w	r3, r0, r1
 8004122:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b8f      	ldr	r3, [pc, #572]	@ (8004368 <UART_SetConfig+0x2cc>)
 800412c:	429a      	cmp	r2, r3
 800412e:	d005      	beq.n	800413c <UART_SetConfig+0xa0>
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b8d      	ldr	r3, [pc, #564]	@ (800436c <UART_SetConfig+0x2d0>)
 8004138:	429a      	cmp	r2, r3
 800413a:	d104      	bne.n	8004146 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800413c:	f7fe fb48 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8004140:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004144:	e003      	b.n	800414e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004146:	f7fe fb2f 	bl	80027a8 <HAL_RCC_GetPCLK1Freq>
 800414a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004158:	f040 810c 	bne.w	8004374 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800415c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004160:	2200      	movs	r2, #0
 8004162:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004166:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800416a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800416e:	4622      	mov	r2, r4
 8004170:	462b      	mov	r3, r5
 8004172:	1891      	adds	r1, r2, r2
 8004174:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004176:	415b      	adcs	r3, r3
 8004178:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800417a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800417e:	4621      	mov	r1, r4
 8004180:	eb12 0801 	adds.w	r8, r2, r1
 8004184:	4629      	mov	r1, r5
 8004186:	eb43 0901 	adc.w	r9, r3, r1
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800419a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800419e:	4690      	mov	r8, r2
 80041a0:	4699      	mov	r9, r3
 80041a2:	4623      	mov	r3, r4
 80041a4:	eb18 0303 	adds.w	r3, r8, r3
 80041a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041ac:	462b      	mov	r3, r5
 80041ae:	eb49 0303 	adc.w	r3, r9, r3
 80041b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041ca:	460b      	mov	r3, r1
 80041cc:	18db      	adds	r3, r3, r3
 80041ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80041d0:	4613      	mov	r3, r2
 80041d2:	eb42 0303 	adc.w	r3, r2, r3
 80041d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80041d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041e0:	f7fc f810 	bl	8000204 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4b61      	ldr	r3, [pc, #388]	@ (8004370 <UART_SetConfig+0x2d4>)
 80041ea:	fba3 2302 	umull	r2, r3, r3, r2
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	011c      	lsls	r4, r3, #4
 80041f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004200:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	1891      	adds	r1, r2, r2
 800420a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800420c:	415b      	adcs	r3, r3
 800420e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004210:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004214:	4641      	mov	r1, r8
 8004216:	eb12 0a01 	adds.w	sl, r2, r1
 800421a:	4649      	mov	r1, r9
 800421c:	eb43 0b01 	adc.w	fp, r3, r1
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800422c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004234:	4692      	mov	sl, r2
 8004236:	469b      	mov	fp, r3
 8004238:	4643      	mov	r3, r8
 800423a:	eb1a 0303 	adds.w	r3, sl, r3
 800423e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004242:	464b      	mov	r3, r9
 8004244:	eb4b 0303 	adc.w	r3, fp, r3
 8004248:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004258:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800425c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004260:	460b      	mov	r3, r1
 8004262:	18db      	adds	r3, r3, r3
 8004264:	643b      	str	r3, [r7, #64]	@ 0x40
 8004266:	4613      	mov	r3, r2
 8004268:	eb42 0303 	adc.w	r3, r2, r3
 800426c:	647b      	str	r3, [r7, #68]	@ 0x44
 800426e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004272:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004276:	f7fb ffc5 	bl	8000204 <__aeabi_uldivmod>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4611      	mov	r1, r2
 8004280:	4b3b      	ldr	r3, [pc, #236]	@ (8004370 <UART_SetConfig+0x2d4>)
 8004282:	fba3 2301 	umull	r2, r3, r3, r1
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	2264      	movs	r2, #100	@ 0x64
 800428a:	fb02 f303 	mul.w	r3, r2, r3
 800428e:	1acb      	subs	r3, r1, r3
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004296:	4b36      	ldr	r3, [pc, #216]	@ (8004370 <UART_SetConfig+0x2d4>)
 8004298:	fba3 2302 	umull	r2, r3, r3, r2
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042a4:	441c      	add	r4, r3
 80042a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042c0:	415b      	adcs	r3, r3
 80042c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042c8:	4641      	mov	r1, r8
 80042ca:	1851      	adds	r1, r2, r1
 80042cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80042ce:	4649      	mov	r1, r9
 80042d0:	414b      	adcs	r3, r1
 80042d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042e0:	4659      	mov	r1, fp
 80042e2:	00cb      	lsls	r3, r1, #3
 80042e4:	4651      	mov	r1, sl
 80042e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ea:	4651      	mov	r1, sl
 80042ec:	00ca      	lsls	r2, r1, #3
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	4642      	mov	r2, r8
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042fc:	464b      	mov	r3, r9
 80042fe:	460a      	mov	r2, r1
 8004300:	eb42 0303 	adc.w	r3, r2, r3
 8004304:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004314:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004318:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800431c:	460b      	mov	r3, r1
 800431e:	18db      	adds	r3, r3, r3
 8004320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004322:	4613      	mov	r3, r2
 8004324:	eb42 0303 	adc.w	r3, r2, r3
 8004328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800432a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800432e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004332:	f7fb ff67 	bl	8000204 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <UART_SetConfig+0x2d4>)
 800433c:	fba3 1302 	umull	r1, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	2164      	movs	r1, #100	@ 0x64
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	3332      	adds	r3, #50	@ 0x32
 800434e:	4a08      	ldr	r2, [pc, #32]	@ (8004370 <UART_SetConfig+0x2d4>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f003 0207 	and.w	r2, r3, #7
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4422      	add	r2, r4
 8004362:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004364:	e106      	b.n	8004574 <UART_SetConfig+0x4d8>
 8004366:	bf00      	nop
 8004368:	40011000 	.word	0x40011000
 800436c:	40011400 	.word	0x40011400
 8004370:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800437e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004382:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004386:	4642      	mov	r2, r8
 8004388:	464b      	mov	r3, r9
 800438a:	1891      	adds	r1, r2, r2
 800438c:	6239      	str	r1, [r7, #32]
 800438e:	415b      	adcs	r3, r3
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
 8004392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004396:	4641      	mov	r1, r8
 8004398:	1854      	adds	r4, r2, r1
 800439a:	4649      	mov	r1, r9
 800439c:	eb43 0501 	adc.w	r5, r3, r1
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	00eb      	lsls	r3, r5, #3
 80043aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ae:	00e2      	lsls	r2, r4, #3
 80043b0:	4614      	mov	r4, r2
 80043b2:	461d      	mov	r5, r3
 80043b4:	4643      	mov	r3, r8
 80043b6:	18e3      	adds	r3, r4, r3
 80043b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043bc:	464b      	mov	r3, r9
 80043be:	eb45 0303 	adc.w	r3, r5, r3
 80043c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043e2:	4629      	mov	r1, r5
 80043e4:	008b      	lsls	r3, r1, #2
 80043e6:	4621      	mov	r1, r4
 80043e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ec:	4621      	mov	r1, r4
 80043ee:	008a      	lsls	r2, r1, #2
 80043f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043f4:	f7fb ff06 	bl	8000204 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4b60      	ldr	r3, [pc, #384]	@ (8004580 <UART_SetConfig+0x4e4>)
 80043fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	011c      	lsls	r4, r3, #4
 8004406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004410:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004414:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004418:	4642      	mov	r2, r8
 800441a:	464b      	mov	r3, r9
 800441c:	1891      	adds	r1, r2, r2
 800441e:	61b9      	str	r1, [r7, #24]
 8004420:	415b      	adcs	r3, r3
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004428:	4641      	mov	r1, r8
 800442a:	1851      	adds	r1, r2, r1
 800442c:	6139      	str	r1, [r7, #16]
 800442e:	4649      	mov	r1, r9
 8004430:	414b      	adcs	r3, r1
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004440:	4659      	mov	r1, fp
 8004442:	00cb      	lsls	r3, r1, #3
 8004444:	4651      	mov	r1, sl
 8004446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800444a:	4651      	mov	r1, sl
 800444c:	00ca      	lsls	r2, r1, #3
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	4603      	mov	r3, r0
 8004454:	4642      	mov	r2, r8
 8004456:	189b      	adds	r3, r3, r2
 8004458:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800445c:	464b      	mov	r3, r9
 800445e:	460a      	mov	r2, r1
 8004460:	eb42 0303 	adc.w	r3, r2, r3
 8004464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004472:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004480:	4649      	mov	r1, r9
 8004482:	008b      	lsls	r3, r1, #2
 8004484:	4641      	mov	r1, r8
 8004486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800448a:	4641      	mov	r1, r8
 800448c:	008a      	lsls	r2, r1, #2
 800448e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004492:	f7fb feb7 	bl	8000204 <__aeabi_uldivmod>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4611      	mov	r1, r2
 800449c:	4b38      	ldr	r3, [pc, #224]	@ (8004580 <UART_SetConfig+0x4e4>)
 800449e:	fba3 2301 	umull	r2, r3, r3, r1
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	2264      	movs	r2, #100	@ 0x64
 80044a6:	fb02 f303 	mul.w	r3, r2, r3
 80044aa:	1acb      	subs	r3, r1, r3
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	3332      	adds	r3, #50	@ 0x32
 80044b0:	4a33      	ldr	r2, [pc, #204]	@ (8004580 <UART_SetConfig+0x4e4>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044bc:	441c      	add	r4, r3
 80044be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044c2:	2200      	movs	r2, #0
 80044c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80044c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80044c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044cc:	4642      	mov	r2, r8
 80044ce:	464b      	mov	r3, r9
 80044d0:	1891      	adds	r1, r2, r2
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	415b      	adcs	r3, r3
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044dc:	4641      	mov	r1, r8
 80044de:	1851      	adds	r1, r2, r1
 80044e0:	6039      	str	r1, [r7, #0]
 80044e2:	4649      	mov	r1, r9
 80044e4:	414b      	adcs	r3, r1
 80044e6:	607b      	str	r3, [r7, #4]
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044f4:	4659      	mov	r1, fp
 80044f6:	00cb      	lsls	r3, r1, #3
 80044f8:	4651      	mov	r1, sl
 80044fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fe:	4651      	mov	r1, sl
 8004500:	00ca      	lsls	r2, r1, #3
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	4603      	mov	r3, r0
 8004508:	4642      	mov	r2, r8
 800450a:	189b      	adds	r3, r3, r2
 800450c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800450e:	464b      	mov	r3, r9
 8004510:	460a      	mov	r2, r1
 8004512:	eb42 0303 	adc.w	r3, r2, r3
 8004516:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	663b      	str	r3, [r7, #96]	@ 0x60
 8004522:	667a      	str	r2, [r7, #100]	@ 0x64
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004530:	4649      	mov	r1, r9
 8004532:	008b      	lsls	r3, r1, #2
 8004534:	4641      	mov	r1, r8
 8004536:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800453a:	4641      	mov	r1, r8
 800453c:	008a      	lsls	r2, r1, #2
 800453e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004542:	f7fb fe5f 	bl	8000204 <__aeabi_uldivmod>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4b0d      	ldr	r3, [pc, #52]	@ (8004580 <UART_SetConfig+0x4e4>)
 800454c:	fba3 1302 	umull	r1, r3, r3, r2
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	2164      	movs	r1, #100	@ 0x64
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	3332      	adds	r3, #50	@ 0x32
 800455e:	4a08      	ldr	r2, [pc, #32]	@ (8004580 <UART_SetConfig+0x4e4>)
 8004560:	fba2 2303 	umull	r2, r3, r2, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	f003 020f 	and.w	r2, r3, #15
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4422      	add	r2, r4
 8004572:	609a      	str	r2, [r3, #8]
}
 8004574:	bf00      	nop
 8004576:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800457a:	46bd      	mov	sp, r7
 800457c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004580:	51eb851f 	.word	0x51eb851f

08004584 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004584:	b084      	sub	sp, #16
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	f107 001c 	add.w	r0, r7, #28
 8004592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004596:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800459a:	2b01      	cmp	r3, #1
 800459c:	d123      	bne.n	80045e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80045b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f001 fae2 	bl	8005ba4 <USB_CoreReset>
 80045e0:	4603      	mov	r3, r0
 80045e2:	73fb      	strb	r3, [r7, #15]
 80045e4:	e01b      	b.n	800461e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f001 fad6 	bl	8005ba4 <USB_CoreReset>
 80045f8:	4603      	mov	r3, r0
 80045fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004608:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004610:	e005      	b.n	800461e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004616:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800461e:	7fbb      	ldrb	r3, [r7, #30]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d10b      	bne.n	800463c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f043 0206 	orr.w	r2, r3, #6
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004648:	b004      	add	sp, #16
 800464a:	4770      	bx	lr

0800464c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	4613      	mov	r3, r2
 8004658:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d165      	bne.n	800472c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4a41      	ldr	r2, [pc, #260]	@ (8004768 <USB_SetTurnaroundTime+0x11c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d906      	bls.n	8004676 <USB_SetTurnaroundTime+0x2a>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4a40      	ldr	r2, [pc, #256]	@ (800476c <USB_SetTurnaroundTime+0x120>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d202      	bcs.n	8004676 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004670:	230f      	movs	r3, #15
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	e062      	b.n	800473c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4a3c      	ldr	r2, [pc, #240]	@ (800476c <USB_SetTurnaroundTime+0x120>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d306      	bcc.n	800468c <USB_SetTurnaroundTime+0x40>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	4a3b      	ldr	r2, [pc, #236]	@ (8004770 <USB_SetTurnaroundTime+0x124>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d202      	bcs.n	800468c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004686:	230e      	movs	r3, #14
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	e057      	b.n	800473c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4a38      	ldr	r2, [pc, #224]	@ (8004770 <USB_SetTurnaroundTime+0x124>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d306      	bcc.n	80046a2 <USB_SetTurnaroundTime+0x56>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4a37      	ldr	r2, [pc, #220]	@ (8004774 <USB_SetTurnaroundTime+0x128>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d202      	bcs.n	80046a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800469c:	230d      	movs	r3, #13
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e04c      	b.n	800473c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4a33      	ldr	r2, [pc, #204]	@ (8004774 <USB_SetTurnaroundTime+0x128>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d306      	bcc.n	80046b8 <USB_SetTurnaroundTime+0x6c>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4a32      	ldr	r2, [pc, #200]	@ (8004778 <USB_SetTurnaroundTime+0x12c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d802      	bhi.n	80046b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80046b2:	230c      	movs	r3, #12
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	e041      	b.n	800473c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004778 <USB_SetTurnaroundTime+0x12c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d906      	bls.n	80046ce <USB_SetTurnaroundTime+0x82>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4a2e      	ldr	r2, [pc, #184]	@ (800477c <USB_SetTurnaroundTime+0x130>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d802      	bhi.n	80046ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80046c8:	230b      	movs	r3, #11
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e036      	b.n	800473c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4a2a      	ldr	r2, [pc, #168]	@ (800477c <USB_SetTurnaroundTime+0x130>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d906      	bls.n	80046e4 <USB_SetTurnaroundTime+0x98>
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4a29      	ldr	r2, [pc, #164]	@ (8004780 <USB_SetTurnaroundTime+0x134>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d802      	bhi.n	80046e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80046de:	230a      	movs	r3, #10
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	e02b      	b.n	800473c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4a26      	ldr	r2, [pc, #152]	@ (8004780 <USB_SetTurnaroundTime+0x134>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d906      	bls.n	80046fa <USB_SetTurnaroundTime+0xae>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4a25      	ldr	r2, [pc, #148]	@ (8004784 <USB_SetTurnaroundTime+0x138>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d202      	bcs.n	80046fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80046f4:	2309      	movs	r3, #9
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e020      	b.n	800473c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4a21      	ldr	r2, [pc, #132]	@ (8004784 <USB_SetTurnaroundTime+0x138>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d306      	bcc.n	8004710 <USB_SetTurnaroundTime+0xc4>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4a20      	ldr	r2, [pc, #128]	@ (8004788 <USB_SetTurnaroundTime+0x13c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d802      	bhi.n	8004710 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800470a:	2308      	movs	r3, #8
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	e015      	b.n	800473c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <USB_SetTurnaroundTime+0x13c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d906      	bls.n	8004726 <USB_SetTurnaroundTime+0xda>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4a1c      	ldr	r2, [pc, #112]	@ (800478c <USB_SetTurnaroundTime+0x140>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d202      	bcs.n	8004726 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004720:	2307      	movs	r3, #7
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e00a      	b.n	800473c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004726:	2306      	movs	r3, #6
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	e007      	b.n	800473c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d102      	bne.n	8004738 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004732:	2309      	movs	r3, #9
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	e001      	b.n	800473c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004738:	2309      	movs	r3, #9
 800473a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	029b      	lsls	r3, r3, #10
 8004750:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004754:	431a      	orrs	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	00d8acbf 	.word	0x00d8acbf
 800476c:	00e4e1c0 	.word	0x00e4e1c0
 8004770:	00f42400 	.word	0x00f42400
 8004774:	01067380 	.word	0x01067380
 8004778:	011a499f 	.word	0x011a499f
 800477c:	01312cff 	.word	0x01312cff
 8004780:	014ca43f 	.word	0x014ca43f
 8004784:	016e3600 	.word	0x016e3600
 8004788:	01a6ab1f 	.word	0x01a6ab1f
 800478c:	01e84800 	.word	0x01e84800

08004790 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f043 0201 	orr.w	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 0201 	bic.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d115      	bne.n	8004822 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004802:	200a      	movs	r0, #10
 8004804:	f7fc f8ca 	bl	800099c <HAL_Delay>
      ms += 10U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	330a      	adds	r3, #10
 800480c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f001 f939 	bl	8005a86 <USB_GetMode>
 8004814:	4603      	mov	r3, r0
 8004816:	2b01      	cmp	r3, #1
 8004818:	d01e      	beq.n	8004858 <USB_SetCurrentMode+0x84>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2bc7      	cmp	r3, #199	@ 0xc7
 800481e:	d9f0      	bls.n	8004802 <USB_SetCurrentMode+0x2e>
 8004820:	e01a      	b.n	8004858 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d115      	bne.n	8004854 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004834:	200a      	movs	r0, #10
 8004836:	f7fc f8b1 	bl	800099c <HAL_Delay>
      ms += 10U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	330a      	adds	r3, #10
 800483e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f001 f920 	bl	8005a86 <USB_GetMode>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <USB_SetCurrentMode+0x84>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004850:	d9f0      	bls.n	8004834 <USB_SetCurrentMode+0x60>
 8004852:	e001      	b.n	8004858 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e005      	b.n	8004864 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2bc8      	cmp	r3, #200	@ 0xc8
 800485c:	d101      	bne.n	8004862 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800486c:	b084      	sub	sp, #16
 800486e:	b580      	push	{r7, lr}
 8004870:	b086      	sub	sp, #24
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800487a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	e009      	b.n	80048a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	3340      	adds	r3, #64	@ 0x40
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	2200      	movs	r2, #0
 8004898:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	3301      	adds	r3, #1
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	2b0e      	cmp	r3, #14
 80048a4:	d9f2      	bls.n	800488c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d11c      	bne.n	80048e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048bc:	f043 0302 	orr.w	r3, r3, #2
 80048c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e005      	b.n	80048f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80048fa:	461a      	mov	r2, r3
 80048fc:	2300      	movs	r3, #0
 80048fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004900:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004904:	2b01      	cmp	r3, #1
 8004906:	d10d      	bne.n	8004924 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800490c:	2b00      	cmp	r3, #0
 800490e:	d104      	bne.n	800491a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004910:	2100      	movs	r1, #0
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f968 	bl	8004be8 <USB_SetDevSpeed>
 8004918:	e008      	b.n	800492c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800491a:	2101      	movs	r1, #1
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f963 	bl	8004be8 <USB_SetDevSpeed>
 8004922:	e003      	b.n	800492c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004924:	2103      	movs	r1, #3
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f95e 	bl	8004be8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800492c:	2110      	movs	r1, #16
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f8fa 	bl	8004b28 <USB_FlushTxFifo>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f924 	bl	8004b8c <USB_FlushRxFifo>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004954:	461a      	mov	r2, r3
 8004956:	2300      	movs	r3, #0
 8004958:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004960:	461a      	mov	r2, r3
 8004962:	2300      	movs	r3, #0
 8004964:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800496c:	461a      	mov	r2, r3
 800496e:	2300      	movs	r3, #0
 8004970:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004972:	2300      	movs	r3, #0
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	e043      	b.n	8004a00 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800498a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800498e:	d118      	bne.n	80049c2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049a2:	461a      	mov	r2, r3
 80049a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	e013      	b.n	80049d4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b8:	461a      	mov	r2, r3
 80049ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	e008      	b.n	80049d4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ce:	461a      	mov	r2, r3
 80049d0:	2300      	movs	r3, #0
 80049d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e0:	461a      	mov	r2, r3
 80049e2:	2300      	movs	r3, #0
 80049e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f2:	461a      	mov	r2, r3
 80049f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	3301      	adds	r3, #1
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a04:	461a      	mov	r2, r3
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d3b5      	bcc.n	8004978 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	e043      	b.n	8004a9a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a28:	d118      	bne.n	8004a5c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	e013      	b.n	8004a6e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a52:	461a      	mov	r2, r3
 8004a54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e008      	b.n	8004a6e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	3301      	adds	r3, #1
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d3b5      	bcc.n	8004a12 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ab8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004ac6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ac8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	f043 0210 	orr.w	r2, r3, #16
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699a      	ldr	r2, [r3, #24]
 8004ae0:	4b10      	ldr	r3, [pc, #64]	@ (8004b24 <USB_DevInit+0x2b8>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ae8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f043 0208 	orr.w	r2, r3, #8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004afc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d107      	bne.n	8004b14 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b0c:	f043 0304 	orr.w	r3, r3, #4
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b20:	b004      	add	sp, #16
 8004b22:	4770      	bx	lr
 8004b24:	803c3800 	.word	0x803c3800

08004b28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b42:	d901      	bls.n	8004b48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e01b      	b.n	8004b80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	daf2      	bge.n	8004b36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	019b      	lsls	r3, r3, #6
 8004b58:	f043 0220 	orr.w	r2, r3, #32
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3301      	adds	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b6c:	d901      	bls.n	8004b72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e006      	b.n	8004b80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d0f0      	beq.n	8004b60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ba4:	d901      	bls.n	8004baa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e018      	b.n	8004bdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	daf2      	bge.n	8004b98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2210      	movs	r2, #16
 8004bba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bc8:	d901      	bls.n	8004bce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e006      	b.n	8004bdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d0f0      	beq.n	8004bbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	68f9      	ldr	r1, [r7, #12]
 8004c04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b087      	sub	sp, #28
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0306 	and.w	r3, r3, #6
 8004c32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	75fb      	strb	r3, [r7, #23]
 8004c3e:	e00a      	b.n	8004c56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d002      	beq.n	8004c4c <USB_GetDevSpeed+0x32>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b06      	cmp	r3, #6
 8004c4a:	d102      	bne.n	8004c52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	75fb      	strb	r3, [r7, #23]
 8004c50:	e001      	b.n	8004c56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c52:	230f      	movs	r3, #15
 8004c54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	785b      	ldrb	r3, [r3, #1]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d13a      	bne.n	8004cf6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	2101      	movs	r1, #1
 8004c92:	fa01 f303 	lsl.w	r3, r1, r3
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	68f9      	ldr	r1, [r7, #12]
 8004c9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d155      	bne.n	8004d64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	791b      	ldrb	r3, [r3, #4]
 8004cd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	059b      	lsls	r3, r3, #22
 8004cda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	0151      	lsls	r1, r2, #5
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	440a      	add	r2, r1
 8004ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	e036      	b.n	8004d64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cfc:	69da      	ldr	r2, [r3, #28]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	2101      	movs	r1, #1
 8004d08:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	68f9      	ldr	r1, [r7, #12]
 8004d10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d11a      	bne.n	8004d64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	791b      	ldrb	r3, [r3, #4]
 8004d48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	785b      	ldrb	r3, [r3, #1]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d161      	bne.n	8004e54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004da2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004da6:	d11f      	bne.n	8004de8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004dc6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004de2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004de6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	2101      	movs	r1, #1
 8004dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e08:	4013      	ands	r3, r2
 8004e0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	43db      	mvns	r3, r3
 8004e26:	68f9      	ldr	r1, [r7, #12]
 8004e28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	0159      	lsls	r1, r3, #5
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	440b      	add	r3, r1
 8004e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4b35      	ldr	r3, [pc, #212]	@ (8004f24 <USB_DeactivateEndpoint+0x1b0>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	600b      	str	r3, [r1, #0]
 8004e52:	e060      	b.n	8004f16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e6a:	d11f      	bne.n	8004eac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ea6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004eaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	68f9      	ldr	r1, [r7, #12]
 8004ec8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ecc:	4013      	ands	r3, r2
 8004ece:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee6:	041b      	lsls	r3, r3, #16
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	68f9      	ldr	r1, [r7, #12]
 8004eec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	0159      	lsls	r1, r3, #5
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	440b      	add	r3, r1
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <USB_DeactivateEndpoint+0x1b4>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	ec337800 	.word	0xec337800
 8004f28:	eff37800 	.word	0xeff37800

08004f2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08a      	sub	sp, #40	@ 0x28
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	4613      	mov	r3, r2
 8004f38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	f040 817f 	bne.w	800524c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d132      	bne.n	8004fbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	0151      	lsls	r1, r2, #5
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f70:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004f74:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004f78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fb4:	0cdb      	lsrs	r3, r3, #19
 8004fb6:	04db      	lsls	r3, r3, #19
 8004fb8:	6113      	str	r3, [r2, #16]
 8004fba:	e097      	b.n	80050ec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	0151      	lsls	r1, r2, #5
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	440a      	add	r2, r1
 8004fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fd6:	0cdb      	lsrs	r3, r3, #19
 8004fd8:	04db      	lsls	r3, r3, #19
 8004fda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ff6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ffa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ffe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d11a      	bne.n	800503c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	691a      	ldr	r2, [r3, #16]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	d903      	bls.n	800501a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005034:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005038:	6113      	str	r3, [r2, #16]
 800503a:	e044      	b.n	80050c6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4413      	add	r3, r2
 8005046:	1e5a      	subs	r2, r3, #1
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	8afb      	ldrh	r3, [r7, #22]
 8005062:	04d9      	lsls	r1, r3, #19
 8005064:	4ba4      	ldr	r3, [pc, #656]	@ (80052f8 <USB_EPStartXfer+0x3cc>)
 8005066:	400b      	ands	r3, r1
 8005068:	69b9      	ldr	r1, [r7, #24]
 800506a:	0148      	lsls	r0, r1, #5
 800506c:	69f9      	ldr	r1, [r7, #28]
 800506e:	4401      	add	r1, r0
 8005070:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005074:	4313      	orrs	r3, r2
 8005076:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	791b      	ldrb	r3, [r3, #4]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d122      	bne.n	80050c6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	440a      	add	r2, r1
 8005096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800509a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800509e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	8afb      	ldrh	r3, [r7, #22]
 80050b0:	075b      	lsls	r3, r3, #29
 80050b2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80050b6:	69b9      	ldr	r1, [r7, #24]
 80050b8:	0148      	lsls	r0, r1, #5
 80050ba:	69f9      	ldr	r1, [r7, #28]
 80050bc:	4401      	add	r1, r0
 80050be:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80050c2:	4313      	orrs	r3, r2
 80050c4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050dc:	69b9      	ldr	r1, [r7, #24]
 80050de:	0148      	lsls	r0, r1, #5
 80050e0:	69f9      	ldr	r1, [r7, #28]
 80050e2:	4401      	add	r1, r0
 80050e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80050e8:	4313      	orrs	r3, r2
 80050ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d14b      	bne.n	800518a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005106:	461a      	mov	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	791b      	ldrb	r3, [r3, #4]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d128      	bne.n	8005168 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d110      	bne.n	8005148 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005140:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e00f      	b.n	8005168 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005166:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005182:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	e166      	b.n	8005458 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	0151      	lsls	r1, r2, #5
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	440a      	add	r2, r1
 80051a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80051a8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	791b      	ldrb	r3, [r3, #4]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d015      	beq.n	80051de <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 814e 	beq.w	8005458 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	2101      	movs	r1, #1
 80051ce:	fa01 f303 	lsl.w	r3, r1, r3
 80051d2:	69f9      	ldr	r1, [r7, #28]
 80051d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051d8:	4313      	orrs	r3, r2
 80051da:	634b      	str	r3, [r1, #52]	@ 0x34
 80051dc:	e13c      	b.n	8005458 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d110      	bne.n	8005210 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	69fa      	ldr	r2, [r7, #28]
 8005202:	440a      	add	r2, r1
 8005204:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005208:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	e00f      	b.n	8005230 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800522a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800522e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	68d9      	ldr	r1, [r3, #12]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	781a      	ldrb	r2, [r3, #0]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	b298      	uxth	r0, r3
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	4603      	mov	r3, r0
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f9b9 	bl	80055bc <USB_WritePacket>
 800524a:	e105      	b.n	8005458 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	440a      	add	r2, r1
 8005262:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005266:	0cdb      	lsrs	r3, r3, #19
 8005268:	04db      	lsls	r3, r3, #19
 800526a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	440a      	add	r2, r1
 8005282:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005286:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800528a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800528e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d132      	bne.n	80052fc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052c4:	69b9      	ldr	r1, [r7, #24]
 80052c6:	0148      	lsls	r0, r1, #5
 80052c8:	69f9      	ldr	r1, [r7, #28]
 80052ca:	4401      	add	r1, r0
 80052cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80052d0:	4313      	orrs	r3, r2
 80052d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052f2:	6113      	str	r3, [r2, #16]
 80052f4:	e062      	b.n	80053bc <USB_EPStartXfer+0x490>
 80052f6:	bf00      	nop
 80052f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d123      	bne.n	800534c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800531a:	69b9      	ldr	r1, [r7, #24]
 800531c:	0148      	lsls	r0, r1, #5
 800531e:	69f9      	ldr	r1, [r7, #28]
 8005320:	4401      	add	r1, r0
 8005322:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005326:	4313      	orrs	r3, r2
 8005328:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005344:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005348:	6113      	str	r3, [r2, #16]
 800534a:	e037      	b.n	80053bc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	4413      	add	r3, r2
 8005356:	1e5a      	subs	r2, r3, #1
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005360:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	8afa      	ldrh	r2, [r7, #22]
 8005368:	fb03 f202 	mul.w	r2, r3, r2
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	8afb      	ldrh	r3, [r7, #22]
 8005380:	04d9      	lsls	r1, r3, #19
 8005382:	4b38      	ldr	r3, [pc, #224]	@ (8005464 <USB_EPStartXfer+0x538>)
 8005384:	400b      	ands	r3, r1
 8005386:	69b9      	ldr	r1, [r7, #24]
 8005388:	0148      	lsls	r0, r1, #5
 800538a:	69f9      	ldr	r1, [r7, #28]
 800538c:	4401      	add	r1, r0
 800538e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005392:	4313      	orrs	r3, r2
 8005394:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ac:	69b9      	ldr	r1, [r7, #24]
 80053ae:	0148      	lsls	r0, r1, #5
 80053b0:	69f9      	ldr	r1, [r7, #28]
 80053b2:	4401      	add	r1, r0
 80053b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80053b8:	4313      	orrs	r3, r2
 80053ba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d10d      	bne.n	80053de <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d009      	beq.n	80053de <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	68d9      	ldr	r1, [r3, #12]
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053da:	460a      	mov	r2, r1
 80053dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	791b      	ldrb	r3, [r3, #4]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d128      	bne.n	8005438 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d110      	bne.n	8005418 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	0151      	lsls	r1, r2, #5
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	440a      	add	r2, r1
 800540c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005410:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e00f      	b.n	8005438 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	0151      	lsls	r1, r2, #5
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	440a      	add	r2, r1
 800542e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005436:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	440a      	add	r2, r1
 800544e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005452:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005456:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	1ff80000 	.word	0x1ff80000

08005468 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d14a      	bne.n	800551c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800549a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800549e:	f040 8086 	bne.w	80055ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	7812      	ldrb	r2, [r2, #0]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	7812      	ldrb	r2, [r2, #0]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3301      	adds	r3, #1
 80054ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d902      	bls.n	8005500 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	75fb      	strb	r3, [r7, #23]
          break;
 80054fe:	e056      	b.n	80055ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005514:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005518:	d0e7      	beq.n	80054ea <USB_EPStopXfer+0x82>
 800551a:	e048      	b.n	80055ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005530:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005534:	d13b      	bne.n	80055ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	7812      	ldrb	r2, [r2, #0]
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005554:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005558:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	7812      	ldrb	r2, [r2, #0]
 800556e:	0151      	lsls	r1, r2, #5
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	440a      	add	r2, r1
 8005574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005578:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800557c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3301      	adds	r3, #1
 8005582:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f242 7210 	movw	r2, #10000	@ 0x2710
 800558a:	4293      	cmp	r3, r2
 800558c:	d902      	bls.n	8005594 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	75fb      	strb	r3, [r7, #23]
          break;
 8005592:	e00c      	b.n	80055ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055ac:	d0e7      	beq.n	800557e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055bc:	b480      	push	{r7}
 80055be:	b089      	sub	sp, #36	@ 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	4611      	mov	r1, r2
 80055c8:	461a      	mov	r2, r3
 80055ca:	460b      	mov	r3, r1
 80055cc:	71fb      	strb	r3, [r7, #7]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d123      	bne.n	800562a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055e2:	88bb      	ldrh	r3, [r7, #4]
 80055e4:	3303      	adds	r3, #3
 80055e6:	089b      	lsrs	r3, r3, #2
 80055e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055ea:	2300      	movs	r3, #0
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	e018      	b.n	8005622 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	031a      	lsls	r2, r3, #12
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055fc:	461a      	mov	r2, r3
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	3301      	adds	r3, #1
 8005608:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	3301      	adds	r3, #1
 800560e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	3301      	adds	r3, #1
 8005614:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	3301      	adds	r3, #1
 800561a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	3301      	adds	r3, #1
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	429a      	cmp	r2, r3
 8005628:	d3e2      	bcc.n	80055f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3724      	adds	r7, #36	@ 0x24
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005638:	b480      	push	{r7}
 800563a:	b08b      	sub	sp, #44	@ 0x2c
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	089b      	lsrs	r3, r3, #2
 8005652:	b29b      	uxth	r3, r3
 8005654:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800565e:	2300      	movs	r3, #0
 8005660:	623b      	str	r3, [r7, #32]
 8005662:	e014      	b.n	800568e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005672:	3301      	adds	r3, #1
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	3301      	adds	r3, #1
 800567a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567e:	3301      	adds	r3, #1
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	3301      	adds	r3, #1
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	3301      	adds	r3, #1
 800568c:	623b      	str	r3, [r7, #32]
 800568e:	6a3a      	ldr	r2, [r7, #32]
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	429a      	cmp	r2, r3
 8005694:	d3e6      	bcc.n	8005664 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005696:	8bfb      	ldrh	r3, [r7, #30]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01e      	beq.n	80056da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056a6:	461a      	mov	r2, r3
 80056a8:	f107 0310 	add.w	r3, r7, #16
 80056ac:	6812      	ldr	r2, [r2, #0]
 80056ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	701a      	strb	r2, [r3, #0]
      i++;
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	3301      	adds	r3, #1
 80056c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	3301      	adds	r3, #1
 80056cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80056ce:	8bfb      	ldrh	r3, [r7, #30]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056d4:	8bfb      	ldrh	r3, [r7, #30]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1ea      	bne.n	80056b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80056dc:	4618      	mov	r0, r3
 80056de:	372c      	adds	r7, #44	@ 0x2c
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	785b      	ldrb	r3, [r3, #1]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d12c      	bne.n	800575e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	db12      	blt.n	800573c <USB_EPSetStall+0x54>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00f      	beq.n	800573c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	0151      	lsls	r1, r2, #5
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	440a      	add	r2, r1
 8005732:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005736:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800573a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	440a      	add	r2, r1
 8005752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005756:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	e02b      	b.n	80057b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	db12      	blt.n	8005796 <USB_EPSetStall+0xae>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00f      	beq.n	8005796 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	440a      	add	r2, r1
 800578c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005790:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005794:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	0151      	lsls	r1, r2, #5
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	440a      	add	r2, r1
 80057ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	785b      	ldrb	r3, [r3, #1]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d128      	bne.n	8005832 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	0151      	lsls	r1, r2, #5
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	440a      	add	r2, r1
 80057f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	791b      	ldrb	r3, [r3, #4]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d003      	beq.n	8005810 <USB_EPClearStall+0x4c>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	791b      	ldrb	r3, [r3, #4]
 800580c:	2b02      	cmp	r3, #2
 800580e:	d138      	bne.n	8005882 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	0151      	lsls	r1, r2, #5
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	440a      	add	r2, r1
 8005826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800582a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	e027      	b.n	8005882 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800584c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005850:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	791b      	ldrb	r3, [r3, #4]
 8005856:	2b03      	cmp	r3, #3
 8005858:	d003      	beq.n	8005862 <USB_EPClearStall+0x9e>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	791b      	ldrb	r3, [r3, #4]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d10f      	bne.n	8005882 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	0151      	lsls	r1, r2, #5
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	440a      	add	r2, r1
 8005878:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800587c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005880:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80058b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80058c4:	68f9      	ldr	r1, [r7, #12]
 80058c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058ca:	4313      	orrs	r3, r2
 80058cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80058f6:	f023 0303 	bic.w	r3, r3, #3
 80058fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800590a:	f023 0302 	bic.w	r3, r3, #2
 800590e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800591e:	b480      	push	{r7}
 8005920:	b085      	sub	sp, #20
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005938:	f023 0303 	bic.w	r3, r3, #3
 800593c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800594c:	f043 0302 	orr.w	r3, r3, #2
 8005950:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4013      	ands	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005978:	68fb      	ldr	r3, [r7, #12]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	4013      	ands	r3, r2
 80059a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	0c1b      	lsrs	r3, r3, #16
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	4013      	ands	r3, r2
 80059dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	b29b      	uxth	r3, r3
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b085      	sub	sp, #20
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b087      	sub	sp, #28
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	460b      	mov	r3, r1
 8005a34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a4e:	78fb      	ldrb	r3, [r7, #3]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5a:	01db      	lsls	r3, r3, #7
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4013      	ands	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a78:	68bb      	ldr	r3, [r7, #8]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f003 0301 	and.w	r3, r3, #1
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005abc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005ac0:	f023 0307 	bic.w	r3, r3, #7
 8005ac4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ad8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	460b      	mov	r3, r1
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	333c      	adds	r3, #60	@ 0x3c
 8005afe:	3304      	adds	r3, #4
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4a26      	ldr	r2, [pc, #152]	@ (8005ba0 <USB_EP0_OutStart+0xb8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d90a      	bls.n	8005b22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b1c:	d101      	bne.n	8005b22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e037      	b.n	8005b92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b50:	f043 0318 	orr.w	r3, r3, #24
 8005b54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b64:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005b68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b6a:	7afb      	ldrb	r3, [r7, #11]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d10f      	bne.n	8005b90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b76:	461a      	mov	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b8a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005b8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	4f54300a 	.word	0x4f54300a

08005ba4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bbc:	d901      	bls.n	8005bc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e01b      	b.n	8005bfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	daf2      	bge.n	8005bb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f043 0201 	orr.w	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005be6:	d901      	bls.n	8005bec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e006      	b.n	8005bfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d0f0      	beq.n	8005bda <USB_CoreReset+0x36>

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c14:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005c18:	f002 fcd8 	bl	80085cc <USBD_static_malloc>
 8005c1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	32b0      	adds	r2, #176	@ 0xb0
 8005c2e:	2100      	movs	r1, #0
 8005c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005c34:	2302      	movs	r3, #2
 8005c36:	e0d4      	b.n	8005de2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005c38:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f002 fd08 	bl	8008654 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	32b0      	adds	r2, #176	@ 0xb0
 8005c4e:	68f9      	ldr	r1, [r7, #12]
 8005c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	32b0      	adds	r2, #176	@ 0xb0
 8005c5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	7c1b      	ldrb	r3, [r3, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d138      	bne.n	8005ce2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005c70:	4b5e      	ldr	r3, [pc, #376]	@ (8005dec <USBD_CDC_Init+0x1e4>)
 8005c72:	7819      	ldrb	r1, [r3, #0]
 8005c74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c78:	2202      	movs	r2, #2
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f002 fb35 	bl	80082ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005c80:	4b5a      	ldr	r3, [pc, #360]	@ (8005dec <USBD_CDC_Init+0x1e4>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	f003 020f 	and.w	r2, r3, #15
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	3324      	adds	r3, #36	@ 0x24
 8005c96:	2201      	movs	r2, #1
 8005c98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005c9a:	4b55      	ldr	r3, [pc, #340]	@ (8005df0 <USBD_CDC_Init+0x1e8>)
 8005c9c:	7819      	ldrb	r1, [r3, #0]
 8005c9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f002 fb20 	bl	80082ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005caa:	4b51      	ldr	r3, [pc, #324]	@ (8005df0 <USBD_CDC_Init+0x1e8>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	f003 020f 	and.w	r2, r3, #15
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8005df4 <USBD_CDC_Init+0x1ec>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	f003 020f 	and.w	r2, r3, #15
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	3326      	adds	r3, #38	@ 0x26
 8005cdc:	2210      	movs	r2, #16
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	e035      	b.n	8005d4e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ce2:	4b42      	ldr	r3, [pc, #264]	@ (8005dec <USBD_CDC_Init+0x1e4>)
 8005ce4:	7819      	ldrb	r1, [r3, #0]
 8005ce6:	2340      	movs	r3, #64	@ 0x40
 8005ce8:	2202      	movs	r2, #2
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f002 fafd 	bl	80082ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8005dec <USBD_CDC_Init+0x1e4>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	f003 020f 	and.w	r2, r3, #15
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	3324      	adds	r3, #36	@ 0x24
 8005d06:	2201      	movs	r2, #1
 8005d08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d0a:	4b39      	ldr	r3, [pc, #228]	@ (8005df0 <USBD_CDC_Init+0x1e8>)
 8005d0c:	7819      	ldrb	r1, [r3, #0]
 8005d0e:	2340      	movs	r3, #64	@ 0x40
 8005d10:	2202      	movs	r2, #2
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f002 fae9 	bl	80082ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d18:	4b35      	ldr	r3, [pc, #212]	@ (8005df0 <USBD_CDC_Init+0x1e8>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	f003 020f 	and.w	r2, r3, #15
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005d30:	2201      	movs	r2, #1
 8005d32:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005d34:	4b2f      	ldr	r3, [pc, #188]	@ (8005df4 <USBD_CDC_Init+0x1ec>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	f003 020f 	and.w	r2, r3, #15
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	440b      	add	r3, r1
 8005d48:	3326      	adds	r3, #38	@ 0x26
 8005d4a:	2210      	movs	r2, #16
 8005d4c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d4e:	4b29      	ldr	r3, [pc, #164]	@ (8005df4 <USBD_CDC_Init+0x1ec>)
 8005d50:	7819      	ldrb	r1, [r3, #0]
 8005d52:	2308      	movs	r3, #8
 8005d54:	2203      	movs	r2, #3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f002 fac7 	bl	80082ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005d5c:	4b25      	ldr	r3, [pc, #148]	@ (8005df4 <USBD_CDC_Init+0x1ec>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	f003 020f 	and.w	r2, r3, #15
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	3324      	adds	r3, #36	@ 0x24
 8005d72:	2201      	movs	r2, #1
 8005d74:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	33b0      	adds	r3, #176	@ 0xb0
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005dac:	2302      	movs	r3, #2
 8005dae:	e018      	b.n	8005de2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	7c1b      	ldrb	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005db8:	4b0d      	ldr	r3, [pc, #52]	@ (8005df0 <USBD_CDC_Init+0x1e8>)
 8005dba:	7819      	ldrb	r1, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005dc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f002 fb7e 	bl	80084c8 <USBD_LL_PrepareReceive>
 8005dcc:	e008      	b.n	8005de0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dce:	4b08      	ldr	r3, [pc, #32]	@ (8005df0 <USBD_CDC_Init+0x1e8>)
 8005dd0:	7819      	ldrb	r1, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005dd8:	2340      	movs	r3, #64	@ 0x40
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f002 fb74 	bl	80084c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	200000af 	.word	0x200000af
 8005df0:	200000b0 	.word	0x200000b0
 8005df4:	200000b1 	.word	0x200000b1

08005df8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005e04:	4b3a      	ldr	r3, [pc, #232]	@ (8005ef0 <USBD_CDC_DeInit+0xf8>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f002 fa93 	bl	8008336 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005e10:	4b37      	ldr	r3, [pc, #220]	@ (8005ef0 <USBD_CDC_DeInit+0xf8>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	f003 020f 	and.w	r2, r3, #15
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	3324      	adds	r3, #36	@ 0x24
 8005e26:	2200      	movs	r2, #0
 8005e28:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005e2a:	4b32      	ldr	r3, [pc, #200]	@ (8005ef4 <USBD_CDC_DeInit+0xfc>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f002 fa80 	bl	8008336 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005e36:	4b2f      	ldr	r3, [pc, #188]	@ (8005ef4 <USBD_CDC_DeInit+0xfc>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	f003 020f 	and.w	r2, r3, #15
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005e4e:	2200      	movs	r2, #0
 8005e50:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005e52:	4b29      	ldr	r3, [pc, #164]	@ (8005ef8 <USBD_CDC_DeInit+0x100>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f002 fa6c 	bl	8008336 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005e5e:	4b26      	ldr	r3, [pc, #152]	@ (8005ef8 <USBD_CDC_DeInit+0x100>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	f003 020f 	and.w	r2, r3, #15
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	3324      	adds	r3, #36	@ 0x24
 8005e74:	2200      	movs	r2, #0
 8005e76:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005e78:	4b1f      	ldr	r3, [pc, #124]	@ (8005ef8 <USBD_CDC_DeInit+0x100>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f003 020f 	and.w	r2, r3, #15
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	3326      	adds	r3, #38	@ 0x26
 8005e8e:	2200      	movs	r2, #0
 8005e90:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	32b0      	adds	r2, #176	@ 0xb0
 8005e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01f      	beq.n	8005ee4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	33b0      	adds	r3, #176	@ 0xb0
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	32b0      	adds	r2, #176	@ 0xb0
 8005ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f002 fb8e 	bl	80085e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	32b0      	adds	r2, #176	@ 0xb0
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	200000af 	.word	0x200000af
 8005ef4:	200000b0 	.word	0x200000b0
 8005ef8:	200000b1 	.word	0x200000b1

08005efc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	32b0      	adds	r2, #176	@ 0xb0
 8005f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e0bf      	b.n	80060ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d050      	beq.n	8005fda <USBD_CDC_Setup+0xde>
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	f040 80af 	bne.w	800609c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	88db      	ldrh	r3, [r3, #6]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d03a      	beq.n	8005fbc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	b25b      	sxtb	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	da1b      	bge.n	8005f88 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	33b0      	adds	r3, #176	@ 0xb0
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005f66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	88d2      	ldrh	r2, [r2, #6]
 8005f6c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	88db      	ldrh	r3, [r3, #6]
 8005f72:	2b07      	cmp	r3, #7
 8005f74:	bf28      	it	cs
 8005f76:	2307      	movcs	r3, #7
 8005f78:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	89fa      	ldrh	r2, [r7, #14]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 fd7d 	bl	8007a80 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005f86:	e090      	b.n	80060aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	785a      	ldrb	r2, [r3, #1]
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	88db      	ldrh	r3, [r3, #6]
 8005f96:	2b3f      	cmp	r3, #63	@ 0x3f
 8005f98:	d803      	bhi.n	8005fa2 <USBD_CDC_Setup+0xa6>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	88db      	ldrh	r3, [r3, #6]
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	e000      	b.n	8005fa4 <USBD_CDC_Setup+0xa8>
 8005fa2:	2240      	movs	r2, #64	@ 0x40
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005faa:	6939      	ldr	r1, [r7, #16]
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f001 fd8f 	bl	8007ad8 <USBD_CtlPrepareRx>
      break;
 8005fba:	e076      	b.n	80060aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	33b0      	adds	r3, #176	@ 0xb0
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	7850      	ldrb	r0, [r2, #1]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	4798      	blx	r3
      break;
 8005fd8:	e067      	b.n	80060aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	2b0b      	cmp	r3, #11
 8005fe0:	d851      	bhi.n	8006086 <USBD_CDC_Setup+0x18a>
 8005fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe8 <USBD_CDC_Setup+0xec>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	08006019 	.word	0x08006019
 8005fec:	08006095 	.word	0x08006095
 8005ff0:	08006087 	.word	0x08006087
 8005ff4:	08006087 	.word	0x08006087
 8005ff8:	08006087 	.word	0x08006087
 8005ffc:	08006087 	.word	0x08006087
 8006000:	08006087 	.word	0x08006087
 8006004:	08006087 	.word	0x08006087
 8006008:	08006087 	.word	0x08006087
 800600c:	08006087 	.word	0x08006087
 8006010:	08006043 	.word	0x08006043
 8006014:	0800606d 	.word	0x0800606d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b03      	cmp	r3, #3
 8006022:	d107      	bne.n	8006034 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006024:	f107 030a 	add.w	r3, r7, #10
 8006028:	2202      	movs	r2, #2
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 fd27 	bl	8007a80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006032:	e032      	b.n	800609a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f001 fca5 	bl	8007986 <USBD_CtlError>
            ret = USBD_FAIL;
 800603c:	2303      	movs	r3, #3
 800603e:	75fb      	strb	r3, [r7, #23]
          break;
 8006040:	e02b      	b.n	800609a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b03      	cmp	r3, #3
 800604c:	d107      	bne.n	800605e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800604e:	f107 030d 	add.w	r3, r7, #13
 8006052:	2201      	movs	r2, #1
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f001 fd12 	bl	8007a80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800605c:	e01d      	b.n	800609a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f001 fc90 	bl	8007986 <USBD_CtlError>
            ret = USBD_FAIL;
 8006066:	2303      	movs	r3, #3
 8006068:	75fb      	strb	r3, [r7, #23]
          break;
 800606a:	e016      	b.n	800609a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b03      	cmp	r3, #3
 8006076:	d00f      	beq.n	8006098 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 fc83 	bl	8007986 <USBD_CtlError>
            ret = USBD_FAIL;
 8006080:	2303      	movs	r3, #3
 8006082:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006084:	e008      	b.n	8006098 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 fc7c 	bl	8007986 <USBD_CtlError>
          ret = USBD_FAIL;
 800608e:	2303      	movs	r3, #3
 8006090:	75fb      	strb	r3, [r7, #23]
          break;
 8006092:	e002      	b.n	800609a <USBD_CDC_Setup+0x19e>
          break;
 8006094:	bf00      	nop
 8006096:	e008      	b.n	80060aa <USBD_CDC_Setup+0x1ae>
          break;
 8006098:	bf00      	nop
      }
      break;
 800609a:	e006      	b.n	80060aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 fc71 	bl	8007986 <USBD_CtlError>
      ret = USBD_FAIL;
 80060a4:	2303      	movs	r3, #3
 80060a6:	75fb      	strb	r3, [r7, #23]
      break;
 80060a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80060c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	32b0      	adds	r2, #176	@ 0xb0
 80060d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80060da:	2303      	movs	r3, #3
 80060dc:	e065      	b.n	80061aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	32b0      	adds	r2, #176	@ 0xb0
 80060e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	f003 020f 	and.w	r2, r3, #15
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	3318      	adds	r3, #24
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d02f      	beq.n	8006168 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	f003 020f 	and.w	r2, r3, #15
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	3318      	adds	r3, #24
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	f003 010f 	and.w	r1, r3, #15
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	460b      	mov	r3, r1
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	440b      	add	r3, r1
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4403      	add	r3, r0
 8006130:	331c      	adds	r3, #28
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	fbb2 f1f3 	udiv	r1, r2, r3
 8006138:	fb01 f303 	mul.w	r3, r1, r3
 800613c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800613e:	2b00      	cmp	r3, #0
 8006140:	d112      	bne.n	8006168 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006142:	78fb      	ldrb	r3, [r7, #3]
 8006144:	f003 020f 	and.w	r2, r3, #15
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	440b      	add	r3, r1
 8006154:	3318      	adds	r3, #24
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800615a:	78f9      	ldrb	r1, [r7, #3]
 800615c:	2300      	movs	r3, #0
 800615e:	2200      	movs	r2, #0
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f002 f990 	bl	8008486 <USBD_LL_Transmit>
 8006166:	e01f      	b.n	80061a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	33b0      	adds	r3, #176	@ 0xb0
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d010      	beq.n	80061a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	33b0      	adds	r3, #176	@ 0xb0
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80061a4:	78fa      	ldrb	r2, [r7, #3]
 80061a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	32b0      	adds	r2, #176	@ 0xb0
 80061c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	32b0      	adds	r2, #176	@ 0xb0
 80061d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e01a      	b.n	800621a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f002 f98e 	bl	800850a <USBD_LL_GetRxDataSize>
 80061ee:	4602      	mov	r2, r0
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	33b0      	adds	r3, #176	@ 0xb0
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006214:	4611      	mov	r1, r2
 8006216:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	32b0      	adds	r2, #176	@ 0xb0
 8006234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006238:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006240:	2303      	movs	r3, #3
 8006242:	e024      	b.n	800628e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	33b0      	adds	r3, #176	@ 0xb0
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d019      	beq.n	800628c <USBD_CDC_EP0_RxReady+0x6a>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800625e:	2bff      	cmp	r3, #255	@ 0xff
 8006260:	d014      	beq.n	800628c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	33b0      	adds	r3, #176	@ 0xb0
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800627a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006282:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	22ff      	movs	r2, #255	@ 0xff
 8006288:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062a0:	2182      	movs	r1, #130	@ 0x82
 80062a2:	4818      	ldr	r0, [pc, #96]	@ (8006304 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80062a4:	f000 fd0f 	bl	8006cc6 <USBD_GetEpDesc>
 80062a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80062aa:	2101      	movs	r1, #1
 80062ac:	4815      	ldr	r0, [pc, #84]	@ (8006304 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80062ae:	f000 fd0a 	bl	8006cc6 <USBD_GetEpDesc>
 80062b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80062b4:	2181      	movs	r1, #129	@ 0x81
 80062b6:	4813      	ldr	r0, [pc, #76]	@ (8006304 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80062b8:	f000 fd05 	bl	8006cc6 <USBD_GetEpDesc>
 80062bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2210      	movs	r2, #16
 80062c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d006      	beq.n	80062de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062d8:	711a      	strb	r2, [r3, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d006      	beq.n	80062f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062ec:	711a      	strb	r2, [r3, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2243      	movs	r2, #67	@ 0x43
 80062f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80062f8:	4b02      	ldr	r3, [pc, #8]	@ (8006304 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	2000006c 	.word	0x2000006c

08006308 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006310:	2182      	movs	r1, #130	@ 0x82
 8006312:	4818      	ldr	r0, [pc, #96]	@ (8006374 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006314:	f000 fcd7 	bl	8006cc6 <USBD_GetEpDesc>
 8006318:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800631a:	2101      	movs	r1, #1
 800631c:	4815      	ldr	r0, [pc, #84]	@ (8006374 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800631e:	f000 fcd2 	bl	8006cc6 <USBD_GetEpDesc>
 8006322:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006324:	2181      	movs	r1, #129	@ 0x81
 8006326:	4813      	ldr	r0, [pc, #76]	@ (8006374 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006328:	f000 fccd 	bl	8006cc6 <USBD_GetEpDesc>
 800632c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2210      	movs	r2, #16
 8006338:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d006      	beq.n	800634e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2200      	movs	r2, #0
 8006344:	711a      	strb	r2, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f042 0202 	orr.w	r2, r2, #2
 800634c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d006      	beq.n	8006362 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	711a      	strb	r2, [r3, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f042 0202 	orr.w	r2, r2, #2
 8006360:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2243      	movs	r2, #67	@ 0x43
 8006366:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006368:	4b02      	ldr	r3, [pc, #8]	@ (8006374 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	2000006c 	.word	0x2000006c

08006378 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006380:	2182      	movs	r1, #130	@ 0x82
 8006382:	4818      	ldr	r0, [pc, #96]	@ (80063e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006384:	f000 fc9f 	bl	8006cc6 <USBD_GetEpDesc>
 8006388:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800638a:	2101      	movs	r1, #1
 800638c:	4815      	ldr	r0, [pc, #84]	@ (80063e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800638e:	f000 fc9a 	bl	8006cc6 <USBD_GetEpDesc>
 8006392:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006394:	2181      	movs	r1, #129	@ 0x81
 8006396:	4813      	ldr	r0, [pc, #76]	@ (80063e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006398:	f000 fc95 	bl	8006cc6 <USBD_GetEpDesc>
 800639c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2210      	movs	r2, #16
 80063a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d006      	beq.n	80063be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063b8:	711a      	strb	r2, [r3, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d006      	beq.n	80063d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063cc:	711a      	strb	r2, [r3, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2243      	movs	r2, #67	@ 0x43
 80063d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063d8:	4b02      	ldr	r3, [pc, #8]	@ (80063e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	2000006c 	.word	0x2000006c

080063e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	220a      	movs	r2, #10
 80063f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80063f6:	4b03      	ldr	r3, [pc, #12]	@ (8006404 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	20000028 	.word	0x20000028

08006408 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006418:	2303      	movs	r3, #3
 800641a:	e009      	b.n	8006430 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	33b0      	adds	r3, #176	@ 0xb0
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	32b0      	adds	r2, #176	@ 0xb0
 8006452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006456:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800645e:	2303      	movs	r3, #3
 8006460:	e008      	b.n	8006474 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	32b0      	adds	r2, #176	@ 0xb0
 8006494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006498:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e004      	b.n	80064ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
	...

080064bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	32b0      	adds	r2, #176	@ 0xb0
 80064ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	32b0      	adds	r2, #176	@ 0xb0
 80064de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e018      	b.n	800651c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	7c1b      	ldrb	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006524 <USBD_CDC_ReceivePacket+0x68>)
 80064f4:	7819      	ldrb	r1, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 ffe1 	bl	80084c8 <USBD_LL_PrepareReceive>
 8006506:	e008      	b.n	800651a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006508:	4b06      	ldr	r3, [pc, #24]	@ (8006524 <USBD_CDC_ReceivePacket+0x68>)
 800650a:	7819      	ldrb	r1, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006512:	2340      	movs	r3, #64	@ 0x40
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 ffd7 	bl	80084c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	200000b0 	.word	0x200000b0

08006528 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	4613      	mov	r3, r2
 8006534:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800653c:	2303      	movs	r3, #3
 800653e:	e01f      	b.n	8006580 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	79fa      	ldrb	r2, [r7, #7]
 8006572:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f001 fe51 	bl	800821c <USBD_LL_Init>
 800657a:	4603      	mov	r3, r0
 800657c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800657e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800659c:	2303      	movs	r3, #3
 800659e:	e025      	b.n	80065ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	32ae      	adds	r2, #174	@ 0xae
 80065b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00f      	beq.n	80065dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	32ae      	adds	r2, #174	@ 0xae
 80065c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065cc:	f107 020e 	add.w	r2, r7, #14
 80065d0:	4610      	mov	r0, r2
 80065d2:	4798      	blx	r3
 80065d4:	4602      	mov	r2, r0
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 fe59 	bl	80082b4 <USBD_LL_Start>
 8006602:	4603      	mov	r3, r0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006614:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d009      	beq.n	8006650 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	78fa      	ldrb	r2, [r7, #3]
 8006646:	4611      	mov	r1, r2
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	4798      	blx	r3
 800664c:	4603      	mov	r3, r0
 800664e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006650:	7bfb      	ldrb	r3, [r7, #15]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	78fa      	ldrb	r2, [r7, #3]
 8006674:	4611      	mov	r1, r2
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006680:	2303      	movs	r3, #3
 8006682:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006684:	7bfb      	ldrb	r3, [r7, #15]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f001 f936 	bl	8007912 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80066b4:	461a      	mov	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80066c2:	f003 031f 	and.w	r3, r3, #31
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d01a      	beq.n	8006700 <USBD_LL_SetupStage+0x72>
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d822      	bhi.n	8006714 <USBD_LL_SetupStage+0x86>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <USBD_LL_SetupStage+0x4a>
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d00a      	beq.n	80066ec <USBD_LL_SetupStage+0x5e>
 80066d6:	e01d      	b.n	8006714 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fb63 	bl	8006dac <USBD_StdDevReq>
 80066e6:	4603      	mov	r3, r0
 80066e8:	73fb      	strb	r3, [r7, #15]
      break;
 80066ea:	e020      	b.n	800672e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fbcb 	bl	8006e90 <USBD_StdItfReq>
 80066fa:	4603      	mov	r3, r0
 80066fc:	73fb      	strb	r3, [r7, #15]
      break;
 80066fe:	e016      	b.n	800672e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fc2d 	bl	8006f68 <USBD_StdEPReq>
 800670e:	4603      	mov	r3, r0
 8006710:	73fb      	strb	r3, [r7, #15]
      break;
 8006712:	e00c      	b.n	800672e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800671a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800671e:	b2db      	uxtb	r3, r3
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f001 fe26 	bl	8008374 <USBD_LL_StallEP>
 8006728:	4603      	mov	r3, r0
 800672a:	73fb      	strb	r3, [r7, #15]
      break;
 800672c:	bf00      	nop
  }

  return ret;
 800672e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	460b      	mov	r3, r1
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800674a:	7afb      	ldrb	r3, [r7, #11]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d16e      	bne.n	800682e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006756:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800675e:	2b03      	cmp	r3, #3
 8006760:	f040 8098 	bne.w	8006894 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	429a      	cmp	r2, r3
 800676e:	d913      	bls.n	8006798 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	1ad2      	subs	r2, r2, r3
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	4293      	cmp	r3, r2
 8006788:	bf28      	it	cs
 800678a:	4613      	movcs	r3, r2
 800678c:	461a      	mov	r2, r3
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f001 f9be 	bl	8007b12 <USBD_CtlContinueRx>
 8006796:	e07d      	b.n	8006894 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800679e:	f003 031f 	and.w	r3, r3, #31
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d014      	beq.n	80067d0 <USBD_LL_DataOutStage+0x98>
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d81d      	bhi.n	80067e6 <USBD_LL_DataOutStage+0xae>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <USBD_LL_DataOutStage+0x7c>
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d003      	beq.n	80067ba <USBD_LL_DataOutStage+0x82>
 80067b2:	e018      	b.n	80067e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	75bb      	strb	r3, [r7, #22]
            break;
 80067b8:	e018      	b.n	80067ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	4619      	mov	r1, r3
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fa64 	bl	8006c92 <USBD_CoreFindIF>
 80067ca:	4603      	mov	r3, r0
 80067cc:	75bb      	strb	r3, [r7, #22]
            break;
 80067ce:	e00d      	b.n	80067ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	4619      	mov	r1, r3
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 fa66 	bl	8006cac <USBD_CoreFindEP>
 80067e0:	4603      	mov	r3, r0
 80067e2:	75bb      	strb	r3, [r7, #22]
            break;
 80067e4:	e002      	b.n	80067ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	75bb      	strb	r3, [r7, #22]
            break;
 80067ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80067ec:	7dbb      	ldrb	r3, [r7, #22]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d119      	bne.n	8006826 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d113      	bne.n	8006826 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80067fe:	7dba      	ldrb	r2, [r7, #22]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	32ae      	adds	r2, #174	@ 0xae
 8006804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00b      	beq.n	8006826 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800680e:	7dba      	ldrb	r2, [r7, #22]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006816:	7dba      	ldrb	r2, [r7, #22]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	32ae      	adds	r2, #174	@ 0xae
 800681c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f001 f984 	bl	8007b34 <USBD_CtlSendStatus>
 800682c:	e032      	b.n	8006894 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800682e:	7afb      	ldrb	r3, [r7, #11]
 8006830:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006834:	b2db      	uxtb	r3, r3
 8006836:	4619      	mov	r1, r3
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 fa37 	bl	8006cac <USBD_CoreFindEP>
 800683e:	4603      	mov	r3, r0
 8006840:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006842:	7dbb      	ldrb	r3, [r7, #22]
 8006844:	2bff      	cmp	r3, #255	@ 0xff
 8006846:	d025      	beq.n	8006894 <USBD_LL_DataOutStage+0x15c>
 8006848:	7dbb      	ldrb	r3, [r7, #22]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d122      	bne.n	8006894 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b03      	cmp	r3, #3
 8006858:	d117      	bne.n	800688a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800685a:	7dba      	ldrb	r2, [r7, #22]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	32ae      	adds	r2, #174	@ 0xae
 8006860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00f      	beq.n	800688a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800686a:	7dba      	ldrb	r2, [r7, #22]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006872:	7dba      	ldrb	r2, [r7, #22]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	32ae      	adds	r2, #174	@ 0xae
 8006878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	7afa      	ldrb	r2, [r7, #11]
 8006880:	4611      	mov	r1, r2
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	4798      	blx	r3
 8006886:	4603      	mov	r3, r0
 8006888:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800688a:	7dfb      	ldrb	r3, [r7, #23]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	e000      	b.n	8006896 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b086      	sub	sp, #24
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	60f8      	str	r0, [r7, #12]
 80068a6:	460b      	mov	r3, r1
 80068a8:	607a      	str	r2, [r7, #4]
 80068aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80068ac:	7afb      	ldrb	r3, [r7, #11]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d16f      	bne.n	8006992 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3314      	adds	r3, #20
 80068b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d15a      	bne.n	8006978 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d914      	bls.n	80068f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	1ad2      	subs	r2, r2, r3
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	461a      	mov	r2, r3
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f001 f8e6 	bl	8007ab6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068ea:	2300      	movs	r3, #0
 80068ec:	2200      	movs	r2, #0
 80068ee:	2100      	movs	r1, #0
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f001 fde9 	bl	80084c8 <USBD_LL_PrepareReceive>
 80068f6:	e03f      	b.n	8006978 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	429a      	cmp	r2, r3
 8006902:	d11c      	bne.n	800693e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800690c:	429a      	cmp	r2, r3
 800690e:	d316      	bcc.n	800693e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800691a:	429a      	cmp	r2, r3
 800691c:	d20f      	bcs.n	800693e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800691e:	2200      	movs	r2, #0
 8006920:	2100      	movs	r1, #0
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f001 f8c7 	bl	8007ab6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006930:	2300      	movs	r3, #0
 8006932:	2200      	movs	r2, #0
 8006934:	2100      	movs	r1, #0
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f001 fdc6 	bl	80084c8 <USBD_LL_PrepareReceive>
 800693c:	e01c      	b.n	8006978 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b03      	cmp	r3, #3
 8006948:	d10f      	bne.n	800696a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800696a:	2180      	movs	r1, #128	@ 0x80
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f001 fd01 	bl	8008374 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f001 f8f1 	bl	8007b5a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d03a      	beq.n	80069f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff fe42 	bl	800660c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006990:	e032      	b.n	80069f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006992:	7afb      	ldrb	r3, [r7, #11]
 8006994:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006998:	b2db      	uxtb	r3, r3
 800699a:	4619      	mov	r1, r3
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f985 	bl	8006cac <USBD_CoreFindEP>
 80069a2:	4603      	mov	r3, r0
 80069a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	2bff      	cmp	r3, #255	@ 0xff
 80069aa:	d025      	beq.n	80069f8 <USBD_LL_DataInStage+0x15a>
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d122      	bne.n	80069f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	d11c      	bne.n	80069f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80069be:	7dfa      	ldrb	r2, [r7, #23]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	32ae      	adds	r2, #174	@ 0xae
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d014      	beq.n	80069f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80069ce:	7dfa      	ldrb	r2, [r7, #23]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80069d6:	7dfa      	ldrb	r2, [r7, #23]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	32ae      	adds	r2, #174	@ 0xae
 80069dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	7afa      	ldrb	r2, [r7, #11]
 80069e4:	4611      	mov	r1, r2
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	4798      	blx	r3
 80069ea:	4603      	mov	r3, r0
 80069ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80069ee:	7dbb      	ldrb	r3, [r7, #22]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80069f4:	7dbb      	ldrb	r3, [r7, #22]
 80069f6:	e000      	b.n	80069fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d014      	beq.n	8006a68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00e      	beq.n	8006a68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6852      	ldr	r2, [r2, #4]
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	4611      	mov	r1, r2
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4798      	blx	r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006a64:	2303      	movs	r3, #3
 8006a66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a68:	2340      	movs	r3, #64	@ 0x40
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f001 fc3b 	bl	80082ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2240      	movs	r2, #64	@ 0x40
 8006a80:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a84:	2340      	movs	r3, #64	@ 0x40
 8006a86:	2200      	movs	r2, #0
 8006a88:	2180      	movs	r1, #128	@ 0x80
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fc2d 	bl	80082ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2240      	movs	r2, #64	@ 0x40
 8006a9a:	621a      	str	r2, [r3, #32]

  return ret;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	78fa      	ldrb	r2, [r7, #3]
 8006ab6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d006      	beq.n	8006ae8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2204      	movs	r2, #4
 8006aec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d106      	bne.n	8006b20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b082      	sub	sp, #8
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d110      	bne.n	8006b64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	460b      	mov	r3, r1
 8006b78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	32ae      	adds	r2, #174	@ 0xae
 8006b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e01c      	b.n	8006bca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d115      	bne.n	8006bc8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	32ae      	adds	r2, #174	@ 0xae
 8006ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	32ae      	adds	r2, #174	@ 0xae
 8006bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	78fa      	ldrb	r2, [r7, #3]
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	32ae      	adds	r2, #174	@ 0xae
 8006be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e01c      	b.n	8006c2e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d115      	bne.n	8006c2c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	32ae      	adds	r2, #174	@ 0xae
 8006c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00b      	beq.n	8006c2c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	32ae      	adds	r2, #174	@ 0xae
 8006c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	4611      	mov	r1, r2
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00e      	beq.n	8006c88 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6852      	ldr	r2, [r2, #4]
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	4611      	mov	r1, r2
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006c84:	2303      	movs	r3, #3
 8006c86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006c9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cb8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b086      	sub	sp, #24
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	885b      	ldrh	r3, [r3, #2]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	7812      	ldrb	r2, [r2, #0]
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d91f      	bls.n	8006d2c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006cf2:	e013      	b.n	8006d1c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006cf4:	f107 030a 	add.w	r3, r7, #10
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6978      	ldr	r0, [r7, #20]
 8006cfc:	f000 f81b 	bl	8006d36 <USBD_GetNextDesc>
 8006d00:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	2b05      	cmp	r3, #5
 8006d08:	d108      	bne.n	8006d1c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	789b      	ldrb	r3, [r3, #2]
 8006d12:	78fa      	ldrb	r2, [r7, #3]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d008      	beq.n	8006d2a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	885b      	ldrh	r3, [r3, #2]
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	897b      	ldrh	r3, [r7, #10]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d8e5      	bhi.n	8006cf4 <USBD_GetEpDesc+0x2e>
 8006d28:	e000      	b.n	8006d2c <USBD_GetEpDesc+0x66>
          break;
 8006d2a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006d2c:	693b      	ldr	r3, [r7, #16]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b085      	sub	sp, #20
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	7812      	ldrb	r2, [r2, #0]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006d60:	68fb      	ldr	r3, [r7, #12]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b087      	sub	sp, #28
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	3301      	adds	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d8c:	8a3b      	ldrh	r3, [r7, #16]
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	b21a      	sxth	r2, r3
 8006d92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	b21b      	sxth	r3, r3
 8006d9a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d9c:	89fb      	ldrh	r3, [r7, #14]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
	...

08006dac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006dc2:	2b40      	cmp	r3, #64	@ 0x40
 8006dc4:	d005      	beq.n	8006dd2 <USBD_StdDevReq+0x26>
 8006dc6:	2b40      	cmp	r3, #64	@ 0x40
 8006dc8:	d857      	bhi.n	8006e7a <USBD_StdDevReq+0xce>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00f      	beq.n	8006dee <USBD_StdDevReq+0x42>
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	d153      	bne.n	8006e7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	32ae      	adds	r2, #174	@ 0xae
 8006ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	4798      	blx	r3
 8006de8:	4603      	mov	r3, r0
 8006dea:	73fb      	strb	r3, [r7, #15]
      break;
 8006dec:	e04a      	b.n	8006e84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	785b      	ldrb	r3, [r3, #1]
 8006df2:	2b09      	cmp	r3, #9
 8006df4:	d83b      	bhi.n	8006e6e <USBD_StdDevReq+0xc2>
 8006df6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dfc <USBD_StdDevReq+0x50>)
 8006df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfc:	08006e51 	.word	0x08006e51
 8006e00:	08006e65 	.word	0x08006e65
 8006e04:	08006e6f 	.word	0x08006e6f
 8006e08:	08006e5b 	.word	0x08006e5b
 8006e0c:	08006e6f 	.word	0x08006e6f
 8006e10:	08006e2f 	.word	0x08006e2f
 8006e14:	08006e25 	.word	0x08006e25
 8006e18:	08006e6f 	.word	0x08006e6f
 8006e1c:	08006e47 	.word	0x08006e47
 8006e20:	08006e39 	.word	0x08006e39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa3c 	bl	80072a4 <USBD_GetDescriptor>
          break;
 8006e2c:	e024      	b.n	8006e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fbcb 	bl	80075cc <USBD_SetAddress>
          break;
 8006e36:	e01f      	b.n	8006e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fc0a 	bl	8007654 <USBD_SetConfig>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
          break;
 8006e44:	e018      	b.n	8006e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fcad 	bl	80077a8 <USBD_GetConfig>
          break;
 8006e4e:	e013      	b.n	8006e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fcde 	bl	8007814 <USBD_GetStatus>
          break;
 8006e58:	e00e      	b.n	8006e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fd0d 	bl	800787c <USBD_SetFeature>
          break;
 8006e62:	e009      	b.n	8006e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fd31 	bl	80078ce <USBD_ClrFeature>
          break;
 8006e6c:	e004      	b.n	8006e78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fd88 	bl	8007986 <USBD_CtlError>
          break;
 8006e76:	bf00      	nop
      }
      break;
 8006e78:	e004      	b.n	8006e84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fd82 	bl	8007986 <USBD_CtlError>
      break;
 8006e82:	bf00      	nop
  }

  return ret;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop

08006e90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ea6:	2b40      	cmp	r3, #64	@ 0x40
 8006ea8:	d005      	beq.n	8006eb6 <USBD_StdItfReq+0x26>
 8006eaa:	2b40      	cmp	r3, #64	@ 0x40
 8006eac:	d852      	bhi.n	8006f54 <USBD_StdItfReq+0xc4>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <USBD_StdItfReq+0x26>
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d14e      	bne.n	8006f54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d840      	bhi.n	8006f46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	889b      	ldrh	r3, [r3, #4]
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d836      	bhi.n	8006f3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	889b      	ldrh	r3, [r3, #4]
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff fedb 	bl	8006c92 <USBD_CoreFindIF>
 8006edc:	4603      	mov	r3, r0
 8006ede:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	2bff      	cmp	r3, #255	@ 0xff
 8006ee4:	d01d      	beq.n	8006f22 <USBD_StdItfReq+0x92>
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d11a      	bne.n	8006f22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006eec:	7bba      	ldrb	r2, [r7, #14]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	32ae      	adds	r2, #174	@ 0xae
 8006ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00f      	beq.n	8006f1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006efc:	7bba      	ldrb	r2, [r7, #14]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f04:	7bba      	ldrb	r2, [r7, #14]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	32ae      	adds	r2, #174	@ 0xae
 8006f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f1a:	e004      	b.n	8006f26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f20:	e001      	b.n	8006f26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006f22:	2303      	movs	r3, #3
 8006f24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	88db      	ldrh	r3, [r3, #6]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d110      	bne.n	8006f50 <USBD_StdItfReq+0xc0>
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10d      	bne.n	8006f50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fdfd 	bl	8007b34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f3a:	e009      	b.n	8006f50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fd21 	bl	8007986 <USBD_CtlError>
          break;
 8006f44:	e004      	b.n	8006f50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fd1c 	bl	8007986 <USBD_CtlError>
          break;
 8006f4e:	e000      	b.n	8006f52 <USBD_StdItfReq+0xc2>
          break;
 8006f50:	bf00      	nop
      }
      break;
 8006f52:	e004      	b.n	8006f5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fd15 	bl	8007986 <USBD_CtlError>
      break;
 8006f5c:	bf00      	nop
  }

  return ret;
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	889b      	ldrh	r3, [r3, #4]
 8006f7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f84:	2b40      	cmp	r3, #64	@ 0x40
 8006f86:	d007      	beq.n	8006f98 <USBD_StdEPReq+0x30>
 8006f88:	2b40      	cmp	r3, #64	@ 0x40
 8006f8a:	f200 817f 	bhi.w	800728c <USBD_StdEPReq+0x324>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d02a      	beq.n	8006fe8 <USBD_StdEPReq+0x80>
 8006f92:	2b20      	cmp	r3, #32
 8006f94:	f040 817a 	bne.w	800728c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff fe85 	bl	8006cac <USBD_CoreFindEP>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fa6:	7b7b      	ldrb	r3, [r7, #13]
 8006fa8:	2bff      	cmp	r3, #255	@ 0xff
 8006faa:	f000 8174 	beq.w	8007296 <USBD_StdEPReq+0x32e>
 8006fae:	7b7b      	ldrb	r3, [r7, #13]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f040 8170 	bne.w	8007296 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006fb6:	7b7a      	ldrb	r2, [r7, #13]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006fbe:	7b7a      	ldrb	r2, [r7, #13]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	32ae      	adds	r2, #174	@ 0xae
 8006fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 8163 	beq.w	8007296 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006fd0:	7b7a      	ldrb	r2, [r7, #13]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	32ae      	adds	r2, #174	@ 0xae
 8006fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006fe6:	e156      	b.n	8007296 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	785b      	ldrb	r3, [r3, #1]
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d008      	beq.n	8007002 <USBD_StdEPReq+0x9a>
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	f300 8145 	bgt.w	8007280 <USBD_StdEPReq+0x318>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 809b 	beq.w	8007132 <USBD_StdEPReq+0x1ca>
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d03c      	beq.n	800707a <USBD_StdEPReq+0x112>
 8007000:	e13e      	b.n	8007280 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d002      	beq.n	8007014 <USBD_StdEPReq+0xac>
 800700e:	2b03      	cmp	r3, #3
 8007010:	d016      	beq.n	8007040 <USBD_StdEPReq+0xd8>
 8007012:	e02c      	b.n	800706e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007014:	7bbb      	ldrb	r3, [r7, #14]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00d      	beq.n	8007036 <USBD_StdEPReq+0xce>
 800701a:	7bbb      	ldrb	r3, [r7, #14]
 800701c:	2b80      	cmp	r3, #128	@ 0x80
 800701e:	d00a      	beq.n	8007036 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 f9a5 	bl	8008374 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800702a:	2180      	movs	r1, #128	@ 0x80
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 f9a1 	bl	8008374 <USBD_LL_StallEP>
 8007032:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007034:	e020      	b.n	8007078 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fca4 	bl	8007986 <USBD_CtlError>
              break;
 800703e:	e01b      	b.n	8007078 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	885b      	ldrh	r3, [r3, #2]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10e      	bne.n	8007066 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <USBD_StdEPReq+0xfe>
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	2b80      	cmp	r3, #128	@ 0x80
 8007052:	d008      	beq.n	8007066 <USBD_StdEPReq+0xfe>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	88db      	ldrh	r3, [r3, #6]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d104      	bne.n	8007066 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 f987 	bl	8008374 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fd64 	bl	8007b34 <USBD_CtlSendStatus>

              break;
 800706c:	e004      	b.n	8007078 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fc88 	bl	8007986 <USBD_CtlError>
              break;
 8007076:	bf00      	nop
          }
          break;
 8007078:	e107      	b.n	800728a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d002      	beq.n	800708c <USBD_StdEPReq+0x124>
 8007086:	2b03      	cmp	r3, #3
 8007088:	d016      	beq.n	80070b8 <USBD_StdEPReq+0x150>
 800708a:	e04b      	b.n	8007124 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00d      	beq.n	80070ae <USBD_StdEPReq+0x146>
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	2b80      	cmp	r3, #128	@ 0x80
 8007096:	d00a      	beq.n	80070ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 f969 	bl	8008374 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070a2:	2180      	movs	r1, #128	@ 0x80
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 f965 	bl	8008374 <USBD_LL_StallEP>
 80070aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070ac:	e040      	b.n	8007130 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fc68 	bl	8007986 <USBD_CtlError>
              break;
 80070b6:	e03b      	b.n	8007130 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	885b      	ldrh	r3, [r3, #2]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d136      	bne.n	800712e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 f96f 	bl	80083b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fd2d 	bl	8007b34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff fde4 	bl	8006cac <USBD_CoreFindEP>
 80070e4:	4603      	mov	r3, r0
 80070e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070e8:	7b7b      	ldrb	r3, [r7, #13]
 80070ea:	2bff      	cmp	r3, #255	@ 0xff
 80070ec:	d01f      	beq.n	800712e <USBD_StdEPReq+0x1c6>
 80070ee:	7b7b      	ldrb	r3, [r7, #13]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d11c      	bne.n	800712e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80070f4:	7b7a      	ldrb	r2, [r7, #13]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80070fc:	7b7a      	ldrb	r2, [r7, #13]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	32ae      	adds	r2, #174	@ 0xae
 8007102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d010      	beq.n	800712e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800710c:	7b7a      	ldrb	r2, [r7, #13]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	32ae      	adds	r2, #174	@ 0xae
 8007112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
 800711e:	4603      	mov	r3, r0
 8007120:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007122:	e004      	b.n	800712e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fc2d 	bl	8007986 <USBD_CtlError>
              break;
 800712c:	e000      	b.n	8007130 <USBD_StdEPReq+0x1c8>
              break;
 800712e:	bf00      	nop
          }
          break;
 8007130:	e0ab      	b.n	800728a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d002      	beq.n	8007144 <USBD_StdEPReq+0x1dc>
 800713e:	2b03      	cmp	r3, #3
 8007140:	d032      	beq.n	80071a8 <USBD_StdEPReq+0x240>
 8007142:	e097      	b.n	8007274 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d007      	beq.n	800715a <USBD_StdEPReq+0x1f2>
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b80      	cmp	r3, #128	@ 0x80
 800714e:	d004      	beq.n	800715a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fc17 	bl	8007986 <USBD_CtlError>
                break;
 8007158:	e091      	b.n	800727e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800715a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800715e:	2b00      	cmp	r3, #0
 8007160:	da0b      	bge.n	800717a <USBD_StdEPReq+0x212>
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	3310      	adds	r3, #16
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	4413      	add	r3, r2
 8007176:	3304      	adds	r3, #4
 8007178:	e00b      	b.n	8007192 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	4413      	add	r3, r2
 8007190:	3304      	adds	r3, #4
 8007192:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2202      	movs	r2, #2
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fc6d 	bl	8007a80 <USBD_CtlSendData>
              break;
 80071a6:	e06a      	b.n	800727e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	da11      	bge.n	80071d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	f003 020f 	and.w	r2, r3, #15
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	4613      	mov	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	440b      	add	r3, r1
 80071c2:	3324      	adds	r3, #36	@ 0x24
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d117      	bne.n	80071fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fbda 	bl	8007986 <USBD_CtlError>
                  break;
 80071d2:	e054      	b.n	800727e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	f003 020f 	and.w	r2, r3, #15
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	4613      	mov	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fbc7 	bl	8007986 <USBD_CtlError>
                  break;
 80071f8:	e041      	b.n	800727e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	da0b      	bge.n	800721a <USBD_StdEPReq+0x2b2>
 8007202:	7bbb      	ldrb	r3, [r7, #14]
 8007204:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	3310      	adds	r3, #16
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	4413      	add	r3, r2
 8007216:	3304      	adds	r3, #4
 8007218:	e00b      	b.n	8007232 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007220:	4613      	mov	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	4413      	add	r3, r2
 8007230:	3304      	adds	r3, #4
 8007232:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <USBD_StdEPReq+0x2d8>
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	2b80      	cmp	r3, #128	@ 0x80
 800723e:	d103      	bne.n	8007248 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	e00e      	b.n	8007266 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 f8cf 	bl	80083f0 <USBD_LL_IsStallEP>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2201      	movs	r2, #1
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e002      	b.n	8007266 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2202      	movs	r2, #2
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fc07 	bl	8007a80 <USBD_CtlSendData>
              break;
 8007272:	e004      	b.n	800727e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fb85 	bl	8007986 <USBD_CtlError>
              break;
 800727c:	bf00      	nop
          }
          break;
 800727e:	e004      	b.n	800728a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fb7f 	bl	8007986 <USBD_CtlError>
          break;
 8007288:	bf00      	nop
      }
      break;
 800728a:	e005      	b.n	8007298 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fb79 	bl	8007986 <USBD_CtlError>
      break;
 8007294:	e000      	b.n	8007298 <USBD_StdEPReq+0x330>
      break;
 8007296:	bf00      	nop
  }

  return ret;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
	...

080072a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	885b      	ldrh	r3, [r3, #2]
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	2b0e      	cmp	r3, #14
 80072c6:	f200 8152 	bhi.w	800756e <USBD_GetDescriptor+0x2ca>
 80072ca:	a201      	add	r2, pc, #4	@ (adr r2, 80072d0 <USBD_GetDescriptor+0x2c>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	08007341 	.word	0x08007341
 80072d4:	08007359 	.word	0x08007359
 80072d8:	08007399 	.word	0x08007399
 80072dc:	0800756f 	.word	0x0800756f
 80072e0:	0800756f 	.word	0x0800756f
 80072e4:	0800750f 	.word	0x0800750f
 80072e8:	0800753b 	.word	0x0800753b
 80072ec:	0800756f 	.word	0x0800756f
 80072f0:	0800756f 	.word	0x0800756f
 80072f4:	0800756f 	.word	0x0800756f
 80072f8:	0800756f 	.word	0x0800756f
 80072fc:	0800756f 	.word	0x0800756f
 8007300:	0800756f 	.word	0x0800756f
 8007304:	0800756f 	.word	0x0800756f
 8007308:	0800730d 	.word	0x0800730d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	7c12      	ldrb	r2, [r2, #16]
 8007324:	f107 0108 	add.w	r1, r7, #8
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
 800732c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800732e:	e126      	b.n	800757e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fb27 	bl	8007986 <USBD_CtlError>
        err++;
 8007338:	7afb      	ldrb	r3, [r7, #11]
 800733a:	3301      	adds	r3, #1
 800733c:	72fb      	strb	r3, [r7, #11]
      break;
 800733e:	e11e      	b.n	800757e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	7c12      	ldrb	r2, [r2, #16]
 800734c:	f107 0108 	add.w	r1, r7, #8
 8007350:	4610      	mov	r0, r2
 8007352:	4798      	blx	r3
 8007354:	60f8      	str	r0, [r7, #12]
      break;
 8007356:	e112      	b.n	800757e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	7c1b      	ldrb	r3, [r3, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10d      	bne.n	800737c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007368:	f107 0208 	add.w	r2, r7, #8
 800736c:	4610      	mov	r0, r2
 800736e:	4798      	blx	r3
 8007370:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3301      	adds	r3, #1
 8007376:	2202      	movs	r2, #2
 8007378:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800737a:	e100      	b.n	800757e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007384:	f107 0208 	add.w	r2, r7, #8
 8007388:	4610      	mov	r0, r2
 800738a:	4798      	blx	r3
 800738c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3301      	adds	r3, #1
 8007392:	2202      	movs	r2, #2
 8007394:	701a      	strb	r2, [r3, #0]
      break;
 8007396:	e0f2      	b.n	800757e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	885b      	ldrh	r3, [r3, #2]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b05      	cmp	r3, #5
 80073a0:	f200 80ac 	bhi.w	80074fc <USBD_GetDescriptor+0x258>
 80073a4:	a201      	add	r2, pc, #4	@ (adr r2, 80073ac <USBD_GetDescriptor+0x108>)
 80073a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073aa:	bf00      	nop
 80073ac:	080073c5 	.word	0x080073c5
 80073b0:	080073f9 	.word	0x080073f9
 80073b4:	0800742d 	.word	0x0800742d
 80073b8:	08007461 	.word	0x08007461
 80073bc:	08007495 	.word	0x08007495
 80073c0:	080074c9 	.word	0x080074c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	7c12      	ldrb	r2, [r2, #16]
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073e6:	e091      	b.n	800750c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 facb 	bl	8007986 <USBD_CtlError>
            err++;
 80073f0:	7afb      	ldrb	r3, [r7, #11]
 80073f2:	3301      	adds	r3, #1
 80073f4:	72fb      	strb	r3, [r7, #11]
          break;
 80073f6:	e089      	b.n	800750c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7c12      	ldrb	r2, [r2, #16]
 8007410:	f107 0108 	add.w	r1, r7, #8
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800741a:	e077      	b.n	800750c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fab1 	bl	8007986 <USBD_CtlError>
            err++;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	3301      	adds	r3, #1
 8007428:	72fb      	strb	r3, [r7, #11]
          break;
 800742a:	e06f      	b.n	800750c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00b      	beq.n	8007450 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	7c12      	ldrb	r2, [r2, #16]
 8007444:	f107 0108 	add.w	r1, r7, #8
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3
 800744c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800744e:	e05d      	b.n	800750c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa97 	bl	8007986 <USBD_CtlError>
            err++;
 8007458:	7afb      	ldrb	r3, [r7, #11]
 800745a:	3301      	adds	r3, #1
 800745c:	72fb      	strb	r3, [r7, #11]
          break;
 800745e:	e055      	b.n	800750c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	7c12      	ldrb	r2, [r2, #16]
 8007478:	f107 0108 	add.w	r1, r7, #8
 800747c:	4610      	mov	r0, r2
 800747e:	4798      	blx	r3
 8007480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007482:	e043      	b.n	800750c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa7d 	bl	8007986 <USBD_CtlError>
            err++;
 800748c:	7afb      	ldrb	r3, [r7, #11]
 800748e:	3301      	adds	r3, #1
 8007490:	72fb      	strb	r3, [r7, #11]
          break;
 8007492:	e03b      	b.n	800750c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	7c12      	ldrb	r2, [r2, #16]
 80074ac:	f107 0108 	add.w	r1, r7, #8
 80074b0:	4610      	mov	r0, r2
 80074b2:	4798      	blx	r3
 80074b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074b6:	e029      	b.n	800750c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa63 	bl	8007986 <USBD_CtlError>
            err++;
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	3301      	adds	r3, #1
 80074c4:	72fb      	strb	r3, [r7, #11]
          break;
 80074c6:	e021      	b.n	800750c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00b      	beq.n	80074ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	7c12      	ldrb	r2, [r2, #16]
 80074e0:	f107 0108 	add.w	r1, r7, #8
 80074e4:	4610      	mov	r0, r2
 80074e6:	4798      	blx	r3
 80074e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ea:	e00f      	b.n	800750c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa49 	bl	8007986 <USBD_CtlError>
            err++;
 80074f4:	7afb      	ldrb	r3, [r7, #11]
 80074f6:	3301      	adds	r3, #1
 80074f8:	72fb      	strb	r3, [r7, #11]
          break;
 80074fa:	e007      	b.n	800750c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fa41 	bl	8007986 <USBD_CtlError>
          err++;
 8007504:	7afb      	ldrb	r3, [r7, #11]
 8007506:	3301      	adds	r3, #1
 8007508:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800750a:	bf00      	nop
      }
      break;
 800750c:	e037      	b.n	800757e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	7c1b      	ldrb	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800751c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800751e:	f107 0208 	add.w	r2, r7, #8
 8007522:	4610      	mov	r0, r2
 8007524:	4798      	blx	r3
 8007526:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007528:	e029      	b.n	800757e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fa2a 	bl	8007986 <USBD_CtlError>
        err++;
 8007532:	7afb      	ldrb	r3, [r7, #11]
 8007534:	3301      	adds	r3, #1
 8007536:	72fb      	strb	r3, [r7, #11]
      break;
 8007538:	e021      	b.n	800757e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	7c1b      	ldrb	r3, [r3, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10d      	bne.n	800755e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754a:	f107 0208 	add.w	r2, r7, #8
 800754e:	4610      	mov	r0, r2
 8007550:	4798      	blx	r3
 8007552:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	2207      	movs	r2, #7
 800755a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800755c:	e00f      	b.n	800757e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fa10 	bl	8007986 <USBD_CtlError>
        err++;
 8007566:	7afb      	ldrb	r3, [r7, #11]
 8007568:	3301      	adds	r3, #1
 800756a:	72fb      	strb	r3, [r7, #11]
      break;
 800756c:	e007      	b.n	800757e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fa08 	bl	8007986 <USBD_CtlError>
      err++;
 8007576:	7afb      	ldrb	r3, [r7, #11]
 8007578:	3301      	adds	r3, #1
 800757a:	72fb      	strb	r3, [r7, #11]
      break;
 800757c:	bf00      	nop
  }

  if (err != 0U)
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d11e      	bne.n	80075c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	88db      	ldrh	r3, [r3, #6]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d016      	beq.n	80075ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800758c:	893b      	ldrh	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00e      	beq.n	80075b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	88da      	ldrh	r2, [r3, #6]
 8007596:	893b      	ldrh	r3, [r7, #8]
 8007598:	4293      	cmp	r3, r2
 800759a:	bf28      	it	cs
 800759c:	4613      	movcs	r3, r2
 800759e:	b29b      	uxth	r3, r3
 80075a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075a2:	893b      	ldrh	r3, [r7, #8]
 80075a4:	461a      	mov	r2, r3
 80075a6:	68f9      	ldr	r1, [r7, #12]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fa69 	bl	8007a80 <USBD_CtlSendData>
 80075ae:	e009      	b.n	80075c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f9e7 	bl	8007986 <USBD_CtlError>
 80075b8:	e004      	b.n	80075c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 faba 	bl	8007b34 <USBD_CtlSendStatus>
 80075c0:	e000      	b.n	80075c4 <USBD_GetDescriptor+0x320>
    return;
 80075c2:	bf00      	nop
  }
}
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop

080075cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	889b      	ldrh	r3, [r3, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d131      	bne.n	8007642 <USBD_SetAddress+0x76>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	88db      	ldrh	r3, [r3, #6]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d12d      	bne.n	8007642 <USBD_SetAddress+0x76>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	885b      	ldrh	r3, [r3, #2]
 80075ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80075ec:	d829      	bhi.n	8007642 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	885b      	ldrh	r3, [r3, #2]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b03      	cmp	r3, #3
 8007604:	d104      	bne.n	8007610 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f9bc 	bl	8007986 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800760e:	e01d      	b.n	800764c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	7bfa      	ldrb	r2, [r7, #15]
 8007614:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 ff13 	bl	8008448 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fa86 	bl	8007b34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2202      	movs	r2, #2
 8007632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007636:	e009      	b.n	800764c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007640:	e004      	b.n	800764c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f99e 	bl	8007986 <USBD_CtlError>
  }
}
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	885b      	ldrh	r3, [r3, #2]
 8007666:	b2da      	uxtb	r2, r3
 8007668:	4b4e      	ldr	r3, [pc, #312]	@ (80077a4 <USBD_SetConfig+0x150>)
 800766a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800766c:	4b4d      	ldr	r3, [pc, #308]	@ (80077a4 <USBD_SetConfig+0x150>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d905      	bls.n	8007680 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f985 	bl	8007986 <USBD_CtlError>
    return USBD_FAIL;
 800767c:	2303      	movs	r3, #3
 800767e:	e08c      	b.n	800779a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d002      	beq.n	8007692 <USBD_SetConfig+0x3e>
 800768c:	2b03      	cmp	r3, #3
 800768e:	d029      	beq.n	80076e4 <USBD_SetConfig+0x90>
 8007690:	e075      	b.n	800777e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007692:	4b44      	ldr	r3, [pc, #272]	@ (80077a4 <USBD_SetConfig+0x150>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d020      	beq.n	80076dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800769a:	4b42      	ldr	r3, [pc, #264]	@ (80077a4 <USBD_SetConfig+0x150>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076a4:	4b3f      	ldr	r3, [pc, #252]	@ (80077a4 <USBD_SetConfig+0x150>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7fe ffb9 	bl	8006622 <USBD_SetClassConfig>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d008      	beq.n	80076cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f962 	bl	8007986 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2202      	movs	r2, #2
 80076c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076ca:	e065      	b.n	8007798 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fa31 	bl	8007b34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2203      	movs	r2, #3
 80076d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80076da:	e05d      	b.n	8007798 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fa29 	bl	8007b34 <USBD_CtlSendStatus>
      break;
 80076e2:	e059      	b.n	8007798 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80076e4:	4b2f      	ldr	r3, [pc, #188]	@ (80077a4 <USBD_SetConfig+0x150>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d112      	bne.n	8007712 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80076f4:	4b2b      	ldr	r3, [pc, #172]	@ (80077a4 <USBD_SetConfig+0x150>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076fe:	4b29      	ldr	r3, [pc, #164]	@ (80077a4 <USBD_SetConfig+0x150>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7fe ffa8 	bl	800665a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa12 	bl	8007b34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007710:	e042      	b.n	8007798 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007712:	4b24      	ldr	r3, [pc, #144]	@ (80077a4 <USBD_SetConfig+0x150>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	d02a      	beq.n	8007776 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7fe ff96 	bl	800665a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800772e:	4b1d      	ldr	r3, [pc, #116]	@ (80077a4 <USBD_SetConfig+0x150>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007738:	4b1a      	ldr	r3, [pc, #104]	@ (80077a4 <USBD_SetConfig+0x150>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fe ff6f 	bl	8006622 <USBD_SetClassConfig>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00f      	beq.n	800776e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f918 	bl	8007986 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fe ff7b 	bl	800665a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800776c:	e014      	b.n	8007798 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f9e0 	bl	8007b34 <USBD_CtlSendStatus>
      break;
 8007774:	e010      	b.n	8007798 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9dc 	bl	8007b34 <USBD_CtlSendStatus>
      break;
 800777c:	e00c      	b.n	8007798 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f900 	bl	8007986 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007786:	4b07      	ldr	r3, [pc, #28]	@ (80077a4 <USBD_SetConfig+0x150>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7fe ff64 	bl	800665a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007792:	2303      	movs	r3, #3
 8007794:	73fb      	strb	r3, [r7, #15]
      break;
 8007796:	bf00      	nop
  }

  return ret;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20000190 	.word	0x20000190

080077a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	88db      	ldrh	r3, [r3, #6]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d004      	beq.n	80077c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f8e2 	bl	8007986 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80077c2:	e023      	b.n	800780c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	dc02      	bgt.n	80077d6 <USBD_GetConfig+0x2e>
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	dc03      	bgt.n	80077dc <USBD_GetConfig+0x34>
 80077d4:	e015      	b.n	8007802 <USBD_GetConfig+0x5a>
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d00b      	beq.n	80077f2 <USBD_GetConfig+0x4a>
 80077da:	e012      	b.n	8007802 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3308      	adds	r3, #8
 80077e6:	2201      	movs	r2, #1
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f948 	bl	8007a80 <USBD_CtlSendData>
        break;
 80077f0:	e00c      	b.n	800780c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	3304      	adds	r3, #4
 80077f6:	2201      	movs	r2, #1
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f940 	bl	8007a80 <USBD_CtlSendData>
        break;
 8007800:	e004      	b.n	800780c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f8be 	bl	8007986 <USBD_CtlError>
        break;
 800780a:	bf00      	nop
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007824:	b2db      	uxtb	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	2b02      	cmp	r3, #2
 800782a:	d81e      	bhi.n	800786a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	88db      	ldrh	r3, [r3, #6]
 8007830:	2b02      	cmp	r3, #2
 8007832:	d004      	beq.n	800783e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f8a5 	bl	8007986 <USBD_CtlError>
        break;
 800783c:	e01a      	b.n	8007874 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f043 0202 	orr.w	r2, r3, #2
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	330c      	adds	r3, #12
 800785e:	2202      	movs	r2, #2
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f90c 	bl	8007a80 <USBD_CtlSendData>
      break;
 8007868:	e004      	b.n	8007874 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f88a 	bl	8007986 <USBD_CtlError>
      break;
 8007872:	bf00      	nop
  }
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	885b      	ldrh	r3, [r3, #2]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d107      	bne.n	800789e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f94c 	bl	8007b34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800789c:	e013      	b.n	80078c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	885b      	ldrh	r3, [r3, #2]
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d10b      	bne.n	80078be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	889b      	ldrh	r3, [r3, #4]
 80078aa:	0a1b      	lsrs	r3, r3, #8
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f93c 	bl	8007b34 <USBD_CtlSendStatus>
}
 80078bc:	e003      	b.n	80078c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f860 	bl	8007986 <USBD_CtlError>
}
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d80b      	bhi.n	80078fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	885b      	ldrh	r3, [r3, #2]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d10c      	bne.n	8007908 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f91c 	bl	8007b34 <USBD_CtlSendStatus>
      }
      break;
 80078fc:	e004      	b.n	8007908 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f840 	bl	8007986 <USBD_CtlError>
      break;
 8007906:	e000      	b.n	800790a <USBD_ClrFeature+0x3c>
      break;
 8007908:	bf00      	nop
  }
}
 800790a:	bf00      	nop
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	781a      	ldrb	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	3301      	adds	r3, #1
 800792c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	781a      	ldrb	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3301      	adds	r3, #1
 800793a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff fa16 	bl	8006d6e <SWAPBYTE>
 8007942:	4603      	mov	r3, r0
 8007944:	461a      	mov	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3301      	adds	r3, #1
 8007954:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff fa09 	bl	8006d6e <SWAPBYTE>
 800795c:	4603      	mov	r3, r0
 800795e:	461a      	mov	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3301      	adds	r3, #1
 8007968:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3301      	adds	r3, #1
 800796e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7ff f9fc 	bl	8006d6e <SWAPBYTE>
 8007976:	4603      	mov	r3, r0
 8007978:	461a      	mov	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	80da      	strh	r2, [r3, #6]
}
 800797e:	bf00      	nop
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007990:	2180      	movs	r1, #128	@ 0x80
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fcee 	bl	8008374 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007998:	2100      	movs	r1, #0
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fcea 	bl	8008374 <USBD_LL_StallEP>
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d042      	beq.n	8007a44 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80079c2:	6938      	ldr	r0, [r7, #16]
 80079c4:	f000 f842 	bl	8007a4c <USBD_GetLen>
 80079c8:	4603      	mov	r3, r0
 80079ca:	3301      	adds	r3, #1
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079d2:	d808      	bhi.n	80079e6 <USBD_GetString+0x3e>
 80079d4:	6938      	ldr	r0, [r7, #16]
 80079d6:	f000 f839 	bl	8007a4c <USBD_GetLen>
 80079da:	4603      	mov	r3, r0
 80079dc:	3301      	adds	r3, #1
 80079de:	b29b      	uxth	r3, r3
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	e001      	b.n	80079ea <USBD_GetString+0x42>
 80079e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	4413      	add	r3, r2
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	7812      	ldrb	r2, [r2, #0]
 80079f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	3301      	adds	r3, #1
 80079fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a00:	7dfb      	ldrb	r3, [r7, #23]
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	4413      	add	r3, r2
 8007a06:	2203      	movs	r2, #3
 8007a08:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a10:	e013      	b.n	8007a3a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	4413      	add	r3, r2
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	7812      	ldrb	r2, [r2, #0]
 8007a1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	3301      	adds	r3, #1
 8007a22:	613b      	str	r3, [r7, #16]
    idx++;
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	3301      	adds	r3, #1
 8007a28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a2a:	7dfb      	ldrb	r3, [r7, #23]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	4413      	add	r3, r2
 8007a30:	2200      	movs	r2, #0
 8007a32:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
 8007a36:	3301      	adds	r3, #1
 8007a38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e7      	bne.n	8007a12 <USBD_GetString+0x6a>
 8007a42:	e000      	b.n	8007a46 <USBD_GetString+0x9e>
    return;
 8007a44:	bf00      	nop
  }
}
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a5c:	e005      	b.n	8007a6a <USBD_GetLen+0x1e>
  {
    len++;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	3301      	adds	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	3301      	adds	r3, #1
 8007a68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1f5      	bne.n	8007a5e <USBD_GetLen+0x12>
  }

  return len;
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 fced 	bl	8008486 <USBD_LL_Transmit>

  return USBD_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 fcdc 	bl	8008486 <USBD_LL_Transmit>

  return USBD_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2203      	movs	r2, #3
 8007ae8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	2100      	movs	r1, #0
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fce0 	bl	80084c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b084      	sub	sp, #16
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	2100      	movs	r1, #0
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 fccf 	bl	80084c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2204      	movs	r2, #4
 8007b40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b44:	2300      	movs	r3, #0
 8007b46:	2200      	movs	r2, #0
 8007b48:	2100      	movs	r1, #0
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fc9b 	bl	8008486 <USBD_LL_Transmit>

  return USBD_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2205      	movs	r2, #5
 8007b66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2100      	movs	r1, #0
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fca9 	bl	80084c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b84:	2200      	movs	r2, #0
 8007b86:	4912      	ldr	r1, [pc, #72]	@ (8007bd0 <MX_USB_DEVICE_Init+0x50>)
 8007b88:	4812      	ldr	r0, [pc, #72]	@ (8007bd4 <MX_USB_DEVICE_Init+0x54>)
 8007b8a:	f7fe fccd 	bl	8006528 <USBD_Init>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b94:	f7f8 fd92 	bl	80006bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b98:	490f      	ldr	r1, [pc, #60]	@ (8007bd8 <MX_USB_DEVICE_Init+0x58>)
 8007b9a:	480e      	ldr	r0, [pc, #56]	@ (8007bd4 <MX_USB_DEVICE_Init+0x54>)
 8007b9c:	f7fe fcf4 	bl	8006588 <USBD_RegisterClass>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007ba6:	f7f8 fd89 	bl	80006bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007baa:	490c      	ldr	r1, [pc, #48]	@ (8007bdc <MX_USB_DEVICE_Init+0x5c>)
 8007bac:	4809      	ldr	r0, [pc, #36]	@ (8007bd4 <MX_USB_DEVICE_Init+0x54>)
 8007bae:	f7fe fc2b 	bl	8006408 <USBD_CDC_RegisterInterface>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007bb8:	f7f8 fd80 	bl	80006bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007bbc:	4805      	ldr	r0, [pc, #20]	@ (8007bd4 <MX_USB_DEVICE_Init+0x54>)
 8007bbe:	f7fe fd19 	bl	80065f4 <USBD_Start>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007bc8:	f7f8 fd78 	bl	80006bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007bcc:	bf00      	nop
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	200000c8 	.word	0x200000c8
 8007bd4:	20000194 	.word	0x20000194
 8007bd8:	20000034 	.word	0x20000034
 8007bdc:	200000b4 	.word	0x200000b4

08007be0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007be4:	2200      	movs	r2, #0
 8007be6:	4905      	ldr	r1, [pc, #20]	@ (8007bfc <CDC_Init_FS+0x1c>)
 8007be8:	4805      	ldr	r0, [pc, #20]	@ (8007c00 <CDC_Init_FS+0x20>)
 8007bea:	f7fe fc27 	bl	800643c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007bee:	4905      	ldr	r1, [pc, #20]	@ (8007c04 <CDC_Init_FS+0x24>)
 8007bf0:	4803      	ldr	r0, [pc, #12]	@ (8007c00 <CDC_Init_FS+0x20>)
 8007bf2:	f7fe fc45 	bl	8006480 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007bf6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20000c70 	.word	0x20000c70
 8007c00:	20000194 	.word	0x20000194
 8007c04:	20000470 	.word	0x20000470

08007c08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	6039      	str	r1, [r7, #0]
 8007c22:	71fb      	strb	r3, [r7, #7]
 8007c24:	4613      	mov	r3, r2
 8007c26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	2b23      	cmp	r3, #35	@ 0x23
 8007c2c:	d84a      	bhi.n	8007cc4 <CDC_Control_FS+0xac>
 8007c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c34 <CDC_Control_FS+0x1c>)
 8007c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c34:	08007cc5 	.word	0x08007cc5
 8007c38:	08007cc5 	.word	0x08007cc5
 8007c3c:	08007cc5 	.word	0x08007cc5
 8007c40:	08007cc5 	.word	0x08007cc5
 8007c44:	08007cc5 	.word	0x08007cc5
 8007c48:	08007cc5 	.word	0x08007cc5
 8007c4c:	08007cc5 	.word	0x08007cc5
 8007c50:	08007cc5 	.word	0x08007cc5
 8007c54:	08007cc5 	.word	0x08007cc5
 8007c58:	08007cc5 	.word	0x08007cc5
 8007c5c:	08007cc5 	.word	0x08007cc5
 8007c60:	08007cc5 	.word	0x08007cc5
 8007c64:	08007cc5 	.word	0x08007cc5
 8007c68:	08007cc5 	.word	0x08007cc5
 8007c6c:	08007cc5 	.word	0x08007cc5
 8007c70:	08007cc5 	.word	0x08007cc5
 8007c74:	08007cc5 	.word	0x08007cc5
 8007c78:	08007cc5 	.word	0x08007cc5
 8007c7c:	08007cc5 	.word	0x08007cc5
 8007c80:	08007cc5 	.word	0x08007cc5
 8007c84:	08007cc5 	.word	0x08007cc5
 8007c88:	08007cc5 	.word	0x08007cc5
 8007c8c:	08007cc5 	.word	0x08007cc5
 8007c90:	08007cc5 	.word	0x08007cc5
 8007c94:	08007cc5 	.word	0x08007cc5
 8007c98:	08007cc5 	.word	0x08007cc5
 8007c9c:	08007cc5 	.word	0x08007cc5
 8007ca0:	08007cc5 	.word	0x08007cc5
 8007ca4:	08007cc5 	.word	0x08007cc5
 8007ca8:	08007cc5 	.word	0x08007cc5
 8007cac:	08007cc5 	.word	0x08007cc5
 8007cb0:	08007cc5 	.word	0x08007cc5
 8007cb4:	08007cc5 	.word	0x08007cc5
 8007cb8:	08007cc5 	.word	0x08007cc5
 8007cbc:	08007cc5 	.word	0x08007cc5
 8007cc0:	08007cc5 	.word	0x08007cc5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007cc4:	bf00      	nop
  }

  return (USBD_OK);
 8007cc6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	4805      	ldr	r0, [pc, #20]	@ (8007cf8 <CDC_Receive_FS+0x24>)
 8007ce2:	f7fe fbcd 	bl	8006480 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ce6:	4804      	ldr	r0, [pc, #16]	@ (8007cf8 <CDC_Receive_FS+0x24>)
 8007ce8:	f7fe fbe8 	bl	80064bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007cec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000194 	.word	0x20000194

08007cfc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	4613      	mov	r3, r2
 8007d08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007d0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
	...

08007d20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	6039      	str	r1, [r7, #0]
 8007d2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2212      	movs	r2, #18
 8007d30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d32:	4b03      	ldr	r3, [pc, #12]	@ (8007d40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	200000e8 	.word	0x200000e8

08007d44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2204      	movs	r2, #4
 8007d54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d56:	4b03      	ldr	r3, [pc, #12]	@ (8007d64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	20000108 	.word	0x20000108

08007d68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	6039      	str	r1, [r7, #0]
 8007d72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d105      	bne.n	8007d86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	4907      	ldr	r1, [pc, #28]	@ (8007d9c <USBD_FS_ProductStrDescriptor+0x34>)
 8007d7e:	4808      	ldr	r0, [pc, #32]	@ (8007da0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d80:	f7ff fe12 	bl	80079a8 <USBD_GetString>
 8007d84:	e004      	b.n	8007d90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	4904      	ldr	r1, [pc, #16]	@ (8007d9c <USBD_FS_ProductStrDescriptor+0x34>)
 8007d8a:	4805      	ldr	r0, [pc, #20]	@ (8007da0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d8c:	f7ff fe0c 	bl	80079a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d90:	4b02      	ldr	r3, [pc, #8]	@ (8007d9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20001470 	.word	0x20001470
 8007da0:	080086c4 	.word	0x080086c4

08007da4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	6039      	str	r1, [r7, #0]
 8007dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	4904      	ldr	r1, [pc, #16]	@ (8007dc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007db4:	4804      	ldr	r0, [pc, #16]	@ (8007dc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007db6:	f7ff fdf7 	bl	80079a8 <USBD_GetString>
  return USBD_StrDesc;
 8007dba:	4b02      	ldr	r3, [pc, #8]	@ (8007dc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20001470 	.word	0x20001470
 8007dc8:	080086dc 	.word	0x080086dc

08007dcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	6039      	str	r1, [r7, #0]
 8007dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	221a      	movs	r2, #26
 8007ddc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007dde:	f000 f855 	bl	8007e8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007de2:	4b02      	ldr	r3, [pc, #8]	@ (8007dec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	2000010c 	.word	0x2000010c

08007df0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	6039      	str	r1, [r7, #0]
 8007dfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d105      	bne.n	8007e0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	4907      	ldr	r1, [pc, #28]	@ (8007e24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e06:	4808      	ldr	r0, [pc, #32]	@ (8007e28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e08:	f7ff fdce 	bl	80079a8 <USBD_GetString>
 8007e0c:	e004      	b.n	8007e18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	4904      	ldr	r1, [pc, #16]	@ (8007e24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e12:	4805      	ldr	r0, [pc, #20]	@ (8007e28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e14:	f7ff fdc8 	bl	80079a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e18:	4b02      	ldr	r3, [pc, #8]	@ (8007e24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20001470 	.word	0x20001470
 8007e28:	080086f0 	.word	0x080086f0

08007e2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	4603      	mov	r3, r0
 8007e34:	6039      	str	r1, [r7, #0]
 8007e36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d105      	bne.n	8007e4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	4907      	ldr	r1, [pc, #28]	@ (8007e60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e42:	4808      	ldr	r0, [pc, #32]	@ (8007e64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e44:	f7ff fdb0 	bl	80079a8 <USBD_GetString>
 8007e48:	e004      	b.n	8007e54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	4904      	ldr	r1, [pc, #16]	@ (8007e60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e4e:	4805      	ldr	r0, [pc, #20]	@ (8007e64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e50:	f7ff fdaa 	bl	80079a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e54:	4b02      	ldr	r3, [pc, #8]	@ (8007e60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20001470 	.word	0x20001470
 8007e64:	080086fc 	.word	0x080086fc

08007e68 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	6039      	str	r1, [r7, #0]
 8007e72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	220c      	movs	r2, #12
 8007e78:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007e7a:	4b03      	ldr	r3, [pc, #12]	@ (8007e88 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	200000fc 	.word	0x200000fc

08007e8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e92:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed0 <Get_SerialNum+0x44>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e98:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed4 <Get_SerialNum+0x48>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed8 <Get_SerialNum+0x4c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d009      	beq.n	8007ec6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007eb2:	2208      	movs	r2, #8
 8007eb4:	4909      	ldr	r1, [pc, #36]	@ (8007edc <Get_SerialNum+0x50>)
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f814 	bl	8007ee4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ebc:	2204      	movs	r2, #4
 8007ebe:	4908      	ldr	r1, [pc, #32]	@ (8007ee0 <Get_SerialNum+0x54>)
 8007ec0:	68b8      	ldr	r0, [r7, #8]
 8007ec2:	f000 f80f 	bl	8007ee4 <IntToUnicode>
  }
}
 8007ec6:	bf00      	nop
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	1fff7a10 	.word	0x1fff7a10
 8007ed4:	1fff7a14 	.word	0x1fff7a14
 8007ed8:	1fff7a18 	.word	0x1fff7a18
 8007edc:	2000010e 	.word	0x2000010e
 8007ee0:	2000011e 	.word	0x2000011e

08007ee4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]
 8007efa:	e027      	b.n	8007f4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	0f1b      	lsrs	r3, r3, #28
 8007f00:	2b09      	cmp	r3, #9
 8007f02:	d80b      	bhi.n	8007f1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	0f1b      	lsrs	r3, r3, #28
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	4619      	mov	r1, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	440b      	add	r3, r1
 8007f14:	3230      	adds	r2, #48	@ 0x30
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	701a      	strb	r2, [r3, #0]
 8007f1a:	e00a      	b.n	8007f32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	0f1b      	lsrs	r3, r3, #28
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	4619      	mov	r1, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	440b      	add	r3, r1
 8007f2c:	3237      	adds	r2, #55	@ 0x37
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	4413      	add	r3, r2
 8007f42:	2200      	movs	r2, #0
 8007f44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	75fb      	strb	r3, [r7, #23]
 8007f4c:	7dfa      	ldrb	r2, [r7, #23]
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d3d3      	bcc.n	8007efc <IntToUnicode+0x18>
  }
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
	...

08007f64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b0a0      	sub	sp, #128	@ 0x80
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007f70:	2200      	movs	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	605a      	str	r2, [r3, #4]
 8007f76:	609a      	str	r2, [r3, #8]
 8007f78:	60da      	str	r2, [r3, #12]
 8007f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007f7c:	f107 0310 	add.w	r3, r7, #16
 8007f80:	225c      	movs	r2, #92	@ 0x5c
 8007f82:	2100      	movs	r1, #0
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 fb65 	bl	8008654 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f92:	d149      	bne.n	8008028 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007f94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f98:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f9e:	f107 0310 	add.w	r3, r7, #16
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fa fc28 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8007fae:	f7f8 fb85 	bl	80006bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60fb      	str	r3, [r7, #12]
 8007fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8008030 <HAL_PCD_MspInit+0xcc>)
 8007fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fba:	4a1d      	ldr	r2, [pc, #116]	@ (8008030 <HAL_PCD_MspInit+0xcc>)
 8007fbc:	f043 0301 	orr.w	r3, r3, #1
 8007fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8008030 <HAL_PCD_MspInit+0xcc>)
 8007fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007fce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fe0:	230a      	movs	r3, #10
 8007fe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fe4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4812      	ldr	r0, [pc, #72]	@ (8008034 <HAL_PCD_MspInit+0xd0>)
 8007fec:	f7f8 fe9e 	bl	8000d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8008030 <HAL_PCD_MspInit+0xcc>)
 8007ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ff4:	4a0e      	ldr	r2, [pc, #56]	@ (8008030 <HAL_PCD_MspInit+0xcc>)
 8007ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ffa:	6353      	str	r3, [r2, #52]	@ 0x34
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60bb      	str	r3, [r7, #8]
 8008000:	4b0b      	ldr	r3, [pc, #44]	@ (8008030 <HAL_PCD_MspInit+0xcc>)
 8008002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008004:	4a0a      	ldr	r2, [pc, #40]	@ (8008030 <HAL_PCD_MspInit+0xcc>)
 8008006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800800a:	6453      	str	r3, [r2, #68]	@ 0x44
 800800c:	4b08      	ldr	r3, [pc, #32]	@ (8008030 <HAL_PCD_MspInit+0xcc>)
 800800e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008014:	60bb      	str	r3, [r7, #8]
 8008016:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008018:	2200      	movs	r2, #0
 800801a:	2100      	movs	r1, #0
 800801c:	2043      	movs	r0, #67	@ 0x43
 800801e:	f7f8 fdbc 	bl	8000b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008022:	2043      	movs	r0, #67	@ 0x43
 8008024:	f7f8 fdd5 	bl	8000bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008028:	bf00      	nop
 800802a:	3780      	adds	r7, #128	@ 0x80
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	40023800 	.word	0x40023800
 8008034:	40020000 	.word	0x40020000

08008038 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800804c:	4619      	mov	r1, r3
 800804e:	4610      	mov	r0, r2
 8008050:	f7fe fb1d 	bl	800668e <USBD_LL_SetupStage>
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800806e:	78fa      	ldrb	r2, [r7, #3]
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	78fb      	ldrb	r3, [r7, #3]
 8008084:	4619      	mov	r1, r3
 8008086:	f7fe fb57 	bl	8006738 <USBD_LL_DataOutStage>
}
 800808a:	bf00      	nop
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b082      	sub	sp, #8
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	460b      	mov	r3, r1
 800809c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80080a4:	78fa      	ldrb	r2, [r7, #3]
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	4613      	mov	r3, r2
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	3320      	adds	r3, #32
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	78fb      	ldrb	r3, [r7, #3]
 80080b8:	4619      	mov	r1, r3
 80080ba:	f7fe fbf0 	bl	800689e <USBD_LL_DataInStage>
}
 80080be:	bf00      	nop
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fe fd2a 	bl	8006b2e <USBD_LL_SOF>
}
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080ea:	2301      	movs	r3, #1
 80080ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	79db      	ldrb	r3, [r3, #7]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d102      	bne.n	80080fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
 80080fa:	e008      	b.n	800810e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	79db      	ldrb	r3, [r3, #7]
 8008100:	2b02      	cmp	r3, #2
 8008102:	d102      	bne.n	800810a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008104:	2301      	movs	r3, #1
 8008106:	73fb      	strb	r3, [r7, #15]
 8008108:	e001      	b.n	800810e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800810a:	f7f8 fad7 	bl	80006bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008114:	7bfa      	ldrb	r2, [r7, #15]
 8008116:	4611      	mov	r1, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f7fe fcc4 	bl	8006aa6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008124:	4618      	mov	r0, r3
 8008126:	f7fe fc6c 	bl	8006a02 <USBD_LL_Reset>
}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fcbf 	bl	8006ac6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	6812      	ldr	r2, [r2, #0]
 8008156:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800815a:	f043 0301 	orr.w	r3, r3, #1
 800815e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	7adb      	ldrb	r3, [r3, #11]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008168:	4b04      	ldr	r3, [pc, #16]	@ (800817c <HAL_PCD_SuspendCallback+0x48>)
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	4a03      	ldr	r2, [pc, #12]	@ (800817c <HAL_PCD_SuspendCallback+0x48>)
 800816e:	f043 0306 	orr.w	r3, r3, #6
 8008172:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008174:	bf00      	nop
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	e000ed00 	.word	0xe000ed00

08008180 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe fcb5 	bl	8006afe <USBD_LL_Resume>
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081ae:	78fa      	ldrb	r2, [r7, #3]
 80081b0:	4611      	mov	r1, r2
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fd0d 	bl	8006bd2 <USBD_LL_IsoOUTIncomplete>
}
 80081b8:	bf00      	nop
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081d2:	78fa      	ldrb	r2, [r7, #3]
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe fcc9 	bl	8006b6e <USBD_LL_IsoINIncomplete>
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe fd1f 	bl	8006c36 <USBD_LL_DevConnected>
}
 80081f8:	bf00      	nop
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800820e:	4618      	mov	r0, r3
 8008210:	f7fe fd1c 	bl	8006c4c <USBD_LL_DevDisconnected>
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d13c      	bne.n	80082a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800822c:	4a20      	ldr	r2, [pc, #128]	@ (80082b0 <USBD_LL_Init+0x94>)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a1e      	ldr	r2, [pc, #120]	@ (80082b0 <USBD_LL_Init+0x94>)
 8008238:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800823c:	4b1c      	ldr	r3, [pc, #112]	@ (80082b0 <USBD_LL_Init+0x94>)
 800823e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008242:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008244:	4b1a      	ldr	r3, [pc, #104]	@ (80082b0 <USBD_LL_Init+0x94>)
 8008246:	2206      	movs	r2, #6
 8008248:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800824a:	4b19      	ldr	r3, [pc, #100]	@ (80082b0 <USBD_LL_Init+0x94>)
 800824c:	2202      	movs	r2, #2
 800824e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008250:	4b17      	ldr	r3, [pc, #92]	@ (80082b0 <USBD_LL_Init+0x94>)
 8008252:	2200      	movs	r2, #0
 8008254:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008256:	4b16      	ldr	r3, [pc, #88]	@ (80082b0 <USBD_LL_Init+0x94>)
 8008258:	2202      	movs	r2, #2
 800825a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800825c:	4b14      	ldr	r3, [pc, #80]	@ (80082b0 <USBD_LL_Init+0x94>)
 800825e:	2200      	movs	r2, #0
 8008260:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008262:	4b13      	ldr	r3, [pc, #76]	@ (80082b0 <USBD_LL_Init+0x94>)
 8008264:	2200      	movs	r2, #0
 8008266:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008268:	4b11      	ldr	r3, [pc, #68]	@ (80082b0 <USBD_LL_Init+0x94>)
 800826a:	2200      	movs	r2, #0
 800826c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800826e:	4b10      	ldr	r3, [pc, #64]	@ (80082b0 <USBD_LL_Init+0x94>)
 8008270:	2200      	movs	r2, #0
 8008272:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008274:	4b0e      	ldr	r3, [pc, #56]	@ (80082b0 <USBD_LL_Init+0x94>)
 8008276:	2200      	movs	r2, #0
 8008278:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800827a:	480d      	ldr	r0, [pc, #52]	@ (80082b0 <USBD_LL_Init+0x94>)
 800827c:	f7f8 ff03 	bl	8001086 <HAL_PCD_Init>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008286:	f7f8 fa19 	bl	80006bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800828a:	2180      	movs	r1, #128	@ 0x80
 800828c:	4808      	ldr	r0, [pc, #32]	@ (80082b0 <USBD_LL_Init+0x94>)
 800828e:	f7fa f964 	bl	800255a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008292:	2240      	movs	r2, #64	@ 0x40
 8008294:	2100      	movs	r1, #0
 8008296:	4806      	ldr	r0, [pc, #24]	@ (80082b0 <USBD_LL_Init+0x94>)
 8008298:	f7fa f918 	bl	80024cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800829c:	2280      	movs	r2, #128	@ 0x80
 800829e:	2101      	movs	r1, #1
 80082a0:	4803      	ldr	r0, [pc, #12]	@ (80082b0 <USBD_LL_Init+0x94>)
 80082a2:	f7fa f913 	bl	80024cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20001670 	.word	0x20001670

080082b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7f8 fff1 	bl	80012b2 <HAL_PCD_Start>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 f990 	bl	80085fc <USBD_Get_USB_Status>
 80082dc:	4603      	mov	r3, r0
 80082de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	4608      	mov	r0, r1
 80082f4:	4611      	mov	r1, r2
 80082f6:	461a      	mov	r2, r3
 80082f8:	4603      	mov	r3, r0
 80082fa:	70fb      	strb	r3, [r7, #3]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70bb      	strb	r3, [r7, #2]
 8008300:	4613      	mov	r3, r2
 8008302:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008312:	78bb      	ldrb	r3, [r7, #2]
 8008314:	883a      	ldrh	r2, [r7, #0]
 8008316:	78f9      	ldrb	r1, [r7, #3]
 8008318:	f7f9 fcf2 	bl	8001d00 <HAL_PCD_EP_Open>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f96a 	bl	80085fc <USBD_Get_USB_Status>
 8008328:	4603      	mov	r3, r0
 800832a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800832c:	7bbb      	ldrb	r3, [r7, #14]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	460b      	mov	r3, r1
 8008340:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008350:	78fa      	ldrb	r2, [r7, #3]
 8008352:	4611      	mov	r1, r2
 8008354:	4618      	mov	r0, r3
 8008356:	f7f9 fd3d 	bl	8001dd4 <HAL_PCD_EP_Close>
 800835a:	4603      	mov	r3, r0
 800835c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	4618      	mov	r0, r3
 8008362:	f000 f94b 	bl	80085fc <USBD_Get_USB_Status>
 8008366:	4603      	mov	r3, r0
 8008368:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800836a:	7bbb      	ldrb	r3, [r7, #14]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800838e:	78fa      	ldrb	r2, [r7, #3]
 8008390:	4611      	mov	r1, r2
 8008392:	4618      	mov	r0, r3
 8008394:	f7f9 fdf5 	bl	8001f82 <HAL_PCD_EP_SetStall>
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 f92c 	bl	80085fc <USBD_Get_USB_Status>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	460b      	mov	r3, r1
 80083bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80083cc:	78fa      	ldrb	r2, [r7, #3]
 80083ce:	4611      	mov	r1, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7f9 fe39 	bl	8002048 <HAL_PCD_EP_ClrStall>
 80083d6:	4603      	mov	r3, r0
 80083d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 f90d 	bl	80085fc <USBD_Get_USB_Status>
 80083e2:	4603      	mov	r3, r0
 80083e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008402:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008408:	2b00      	cmp	r3, #0
 800840a:	da0b      	bge.n	8008424 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008412:	68f9      	ldr	r1, [r7, #12]
 8008414:	4613      	mov	r3, r2
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	4413      	add	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	440b      	add	r3, r1
 800841e:	3316      	adds	r3, #22
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	e00b      	b.n	800843c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800842a:	68f9      	ldr	r1, [r7, #12]
 800842c:	4613      	mov	r3, r2
 800842e:	00db      	lsls	r3, r3, #3
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800843a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008462:	78fa      	ldrb	r2, [r7, #3]
 8008464:	4611      	mov	r1, r2
 8008466:	4618      	mov	r0, r3
 8008468:	f7f9 fc26 	bl	8001cb8 <HAL_PCD_SetAddress>
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	4618      	mov	r0, r3
 8008474:	f000 f8c2 	bl	80085fc <USBD_Get_USB_Status>
 8008478:	4603      	mov	r3, r0
 800847a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800847c:	7bbb      	ldrb	r3, [r7, #14]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b086      	sub	sp, #24
 800848a:	af00      	add	r7, sp, #0
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	603b      	str	r3, [r7, #0]
 8008492:	460b      	mov	r3, r1
 8008494:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80084a4:	7af9      	ldrb	r1, [r7, #11]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	f7f9 fd30 	bl	8001f0e <HAL_PCD_EP_Transmit>
 80084ae:	4603      	mov	r3, r0
 80084b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 f8a1 	bl	80085fc <USBD_Get_USB_Status>
 80084ba:	4603      	mov	r3, r0
 80084bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084be:	7dbb      	ldrb	r3, [r7, #22]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	607a      	str	r2, [r7, #4]
 80084d2:	603b      	str	r3, [r7, #0]
 80084d4:	460b      	mov	r3, r1
 80084d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80084e6:	7af9      	ldrb	r1, [r7, #11]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	f7f9 fcbc 	bl	8001e68 <HAL_PCD_EP_Receive>
 80084f0:	4603      	mov	r3, r0
 80084f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 f880 	bl	80085fc <USBD_Get_USB_Status>
 80084fc:	4603      	mov	r3, r0
 80084fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008500:	7dbb      	ldrb	r3, [r7, #22]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	460b      	mov	r3, r1
 8008514:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	4611      	mov	r1, r2
 8008520:	4618      	mov	r0, r3
 8008522:	f7f9 fcdc 	bl	8001ede <HAL_PCD_EP_GetRxCount>
 8008526:	4603      	mov	r3, r0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <HAL_PCDEx_LPM_Callback+0x18>
 8008542:	2b01      	cmp	r3, #1
 8008544:	d01f      	beq.n	8008586 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008546:	e03b      	b.n	80085c0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	7adb      	ldrb	r3, [r3, #11]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d007      	beq.n	8008560 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008550:	f7f7 ffec 	bl	800052c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008554:	4b1c      	ldr	r3, [pc, #112]	@ (80085c8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	4a1b      	ldr	r2, [pc, #108]	@ (80085c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800855a:	f023 0306 	bic.w	r3, r3, #6
 800855e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	6812      	ldr	r2, [r2, #0]
 800856e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008572:	f023 0301 	bic.w	r3, r3, #1
 8008576:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe fabd 	bl	8006afe <USBD_LL_Resume>
    break;
 8008584:	e01c      	b.n	80085c0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6812      	ldr	r2, [r2, #0]
 8008594:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008598:	f043 0301 	orr.w	r3, r3, #1
 800859c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe fa8e 	bl	8006ac6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	7adb      	ldrb	r3, [r3, #11]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d005      	beq.n	80085be <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085b2:	4b05      	ldr	r3, [pc, #20]	@ (80085c8 <HAL_PCDEx_LPM_Callback+0x98>)
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	4a04      	ldr	r2, [pc, #16]	@ (80085c8 <HAL_PCDEx_LPM_Callback+0x98>)
 80085b8:	f043 0306 	orr.w	r3, r3, #6
 80085bc:	6113      	str	r3, [r2, #16]
    break;
 80085be:	bf00      	nop
}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	e000ed00 	.word	0xe000ed00

080085cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085d4:	4b03      	ldr	r3, [pc, #12]	@ (80085e4 <USBD_static_malloc+0x18>)
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	20001b54 	.word	0x20001b54

080085e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]

}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	2b03      	cmp	r3, #3
 800860e:	d817      	bhi.n	8008640 <USBD_Get_USB_Status+0x44>
 8008610:	a201      	add	r2, pc, #4	@ (adr r2, 8008618 <USBD_Get_USB_Status+0x1c>)
 8008612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008616:	bf00      	nop
 8008618:	08008629 	.word	0x08008629
 800861c:	0800862f 	.word	0x0800862f
 8008620:	08008635 	.word	0x08008635
 8008624:	0800863b 	.word	0x0800863b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	73fb      	strb	r3, [r7, #15]
    break;
 800862c:	e00b      	b.n	8008646 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800862e:	2303      	movs	r3, #3
 8008630:	73fb      	strb	r3, [r7, #15]
    break;
 8008632:	e008      	b.n	8008646 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008634:	2301      	movs	r3, #1
 8008636:	73fb      	strb	r3, [r7, #15]
    break;
 8008638:	e005      	b.n	8008646 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800863a:	2303      	movs	r3, #3
 800863c:	73fb      	strb	r3, [r7, #15]
    break;
 800863e:	e002      	b.n	8008646 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008640:	2303      	movs	r3, #3
 8008642:	73fb      	strb	r3, [r7, #15]
    break;
 8008644:	bf00      	nop
  }
  return usb_status;
 8008646:	7bfb      	ldrb	r3, [r7, #15]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <memset>:
 8008654:	4402      	add	r2, r0
 8008656:	4603      	mov	r3, r0
 8008658:	4293      	cmp	r3, r2
 800865a:	d100      	bne.n	800865e <memset+0xa>
 800865c:	4770      	bx	lr
 800865e:	f803 1b01 	strb.w	r1, [r3], #1
 8008662:	e7f9      	b.n	8008658 <memset+0x4>

08008664 <__libc_init_array>:
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	4d0d      	ldr	r5, [pc, #52]	@ (800869c <__libc_init_array+0x38>)
 8008668:	4c0d      	ldr	r4, [pc, #52]	@ (80086a0 <__libc_init_array+0x3c>)
 800866a:	1b64      	subs	r4, r4, r5
 800866c:	10a4      	asrs	r4, r4, #2
 800866e:	2600      	movs	r6, #0
 8008670:	42a6      	cmp	r6, r4
 8008672:	d109      	bne.n	8008688 <__libc_init_array+0x24>
 8008674:	4d0b      	ldr	r5, [pc, #44]	@ (80086a4 <__libc_init_array+0x40>)
 8008676:	4c0c      	ldr	r4, [pc, #48]	@ (80086a8 <__libc_init_array+0x44>)
 8008678:	f000 f818 	bl	80086ac <_init>
 800867c:	1b64      	subs	r4, r4, r5
 800867e:	10a4      	asrs	r4, r4, #2
 8008680:	2600      	movs	r6, #0
 8008682:	42a6      	cmp	r6, r4
 8008684:	d105      	bne.n	8008692 <__libc_init_array+0x2e>
 8008686:	bd70      	pop	{r4, r5, r6, pc}
 8008688:	f855 3b04 	ldr.w	r3, [r5], #4
 800868c:	4798      	blx	r3
 800868e:	3601      	adds	r6, #1
 8008690:	e7ee      	b.n	8008670 <__libc_init_array+0xc>
 8008692:	f855 3b04 	ldr.w	r3, [r5], #4
 8008696:	4798      	blx	r3
 8008698:	3601      	adds	r6, #1
 800869a:	e7f2      	b.n	8008682 <__libc_init_array+0x1e>
 800869c:	0800872c 	.word	0x0800872c
 80086a0:	0800872c 	.word	0x0800872c
 80086a4:	0800872c 	.word	0x0800872c
 80086a8:	08008730 	.word	0x08008730

080086ac <_init>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	bf00      	nop
 80086b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b2:	bc08      	pop	{r3}
 80086b4:	469e      	mov	lr, r3
 80086b6:	4770      	bx	lr

080086b8 <_fini>:
 80086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ba:	bf00      	nop
 80086bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086be:	bc08      	pop	{r3}
 80086c0:	469e      	mov	lr, r3
 80086c2:	4770      	bx	lr
