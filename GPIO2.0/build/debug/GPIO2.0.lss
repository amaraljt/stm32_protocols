
build/debug/GPIO2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000398  08000398  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000398  08000398  00001398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800039c  0800039c  0000139c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080003a0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  080003a4  00002004  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000024  080003a4  00002024  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .comment      0000003c  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000156f  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000005ca  00000000  00000000  000035df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000001f8  00000000  00000000  00003bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000169  00000000  00000000  00003da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00000b82  00000000  00000000  00003f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00000ec7  00000000  00000000  00004a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00000348  00000000  00000000  0000595c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0000021c  00000000  00000000  00005ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000035  00000000  00000000  00005ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000380 	.word	0x08000380

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000380 	.word	0x08000380

08000204 <GPIO_Init>:
#include "stm32f4xx.h"

void GPIO_Init(void) {
    // Enable clock for GPIOA (this is the port we are using for pin PA5)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  
 8000204:	4a0b      	ldr	r2, [pc, #44]	@ (8000234 <GPIO_Init+0x30>)
 8000206:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA5 as output (Mode = 01 for General purpose output mode)
    GPIOA->MODER |= GPIO_MODER_MODE5_0;  
 800020e:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <GPIO_Init+0x34>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000216:	601a      	str	r2, [r3, #0]

    // Set the output type to push-pull (default)
    GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;  
 8000218:	685a      	ldr	r2, [r3, #4]
 800021a:	f022 0220 	bic.w	r2, r2, #32
 800021e:	605a      	str	r2, [r3, #4]

    // Set the output speed (Low speed)
    GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED5;  
 8000220:	689a      	ldr	r2, [r3, #8]
 8000222:	f442 6240 	orr.w	r2, r2, #3072	@ 0xc00
 8000226:	609a      	str	r2, [r3, #8]

    // Disable pull-up/pull-down resistors (default)
    GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD5;  
 8000228:	68da      	ldr	r2, [r3, #12]
 800022a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800022e:	60da      	str	r2, [r3, #12]
}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40023800 	.word	0x40023800
 8000238:	40020000 	.word	0x40020000

0800023c <GPIO_SetHigh>:

void GPIO_SetHigh(void) {
    // Set PA5 high
    GPIOA->ODR |= GPIO_ODR_OD5;  
 800023c:	4a02      	ldr	r2, [pc, #8]	@ (8000248 <GPIO_SetHigh+0xc>)
 800023e:	6953      	ldr	r3, [r2, #20]
 8000240:	f043 0320 	orr.w	r3, r3, #32
 8000244:	6153      	str	r3, [r2, #20]
}
 8000246:	4770      	bx	lr
 8000248:	40020000 	.word	0x40020000

0800024c <GPIO_SetLow>:

void GPIO_SetLow(void) {
    // Set PA5 low
    GPIOA->ODR &= ~GPIO_ODR_OD5;  
 800024c:	4a02      	ldr	r2, [pc, #8]	@ (8000258 <GPIO_SetLow+0xc>)
 800024e:	6953      	ldr	r3, [r2, #20]
 8000250:	f023 0320 	bic.w	r3, r3, #32
 8000254:	6153      	str	r3, [r2, #20]
}
 8000256:	4770      	bx	lr
 8000258:	40020000 	.word	0x40020000

0800025c <main>:

int main(void) {
 800025c:	b500      	push	{lr}
 800025e:	b083      	sub	sp, #12
    // Initialize GPIO
    GPIO_Init();
 8000260:	f7ff ffd0 	bl	8000204 <GPIO_Init>

    // Turn on LED (Set PA5 high)
    GPIO_SetHigh();
 8000264:	f7ff ffea 	bl	800023c <GPIO_SetHigh>
 8000268:	e014      	b.n	8000294 <main+0x38>

    // Infinite loop
    while (1) {
        // Toggle LED every 500ms (optional)
        for (volatile int i = 0; i < 1000000; i++) {}  // Delay
 800026a:	9b00      	ldr	r3, [sp, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	9a00      	ldr	r2, [sp, #0]
 8000272:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <main+0x40>)
 8000274:	429a      	cmp	r2, r3
 8000276:	ddf8      	ble.n	800026a <main+0xe>
        GPIO_SetLow();  // Turn off LED
 8000278:	f7ff ffe8 	bl	800024c <GPIO_SetLow>
        for (volatile int i = 0; i < 1000000; i++) {}  // Delay
 800027c:	2300      	movs	r3, #0
 800027e:	9301      	str	r3, [sp, #4]
 8000280:	e002      	b.n	8000288 <main+0x2c>
 8000282:	9b01      	ldr	r3, [sp, #4]
 8000284:	3301      	adds	r3, #1
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	9a01      	ldr	r2, [sp, #4]
 800028a:	4b04      	ldr	r3, [pc, #16]	@ (800029c <main+0x40>)
 800028c:	429a      	cmp	r2, r3
 800028e:	ddf8      	ble.n	8000282 <main+0x26>
        GPIO_SetHigh();  // Turn on LED
 8000290:	f7ff ffd4 	bl	800023c <GPIO_SetHigh>
        for (volatile int i = 0; i < 1000000; i++) {}  // Delay
 8000294:	2300      	movs	r3, #0
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	e7ea      	b.n	8000270 <main+0x14>
 800029a:	bf00      	nop
 800029c:	000f423f 	.word	0x000f423f

080002a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002a0:	4a03      	ldr	r2, [pc, #12]	@ (80002b0 <HAL_IncTick+0x10>)
 80002a2:	6811      	ldr	r1, [r2, #0]
 80002a4:	4b03      	ldr	r3, [pc, #12]	@ (80002b4 <HAL_IncTick+0x14>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	440b      	add	r3, r1
 80002aa:	6013      	str	r3, [r2, #0]
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000020 	.word	0x20000020
 80002b4:	20000000 	.word	0x20000000

080002b8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002b8:	e7fe      	b.n	80002b8 <NMI_Handler>

080002ba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ba:	e7fe      	b.n	80002ba <HardFault_Handler>

080002bc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002bc:	e7fe      	b.n	80002bc <MemManage_Handler>

080002be <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002be:	e7fe      	b.n	80002be <BusFault_Handler>

080002c0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002c0:	e7fe      	b.n	80002c0 <UsageFault_Handler>

080002c2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002c2:	4770      	bx	lr

080002c4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002c4:	4770      	bx	lr

080002c6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002ca:	f7ff ffe9 	bl	80002a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002ce:	bd08      	pop	{r3, pc}

080002d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002d0:	4a03      	ldr	r2, [pc, #12]	@ (80002e0 <SystemInit+0x10>)
 80002d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80002d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002de:	4770      	bx	lr
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800031c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80002e8:	f7ff fff2 	bl	80002d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002ec:	480c      	ldr	r0, [pc, #48]	@ (8000320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002ee:	490d      	ldr	r1, [pc, #52]	@ (8000324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f4:	e002      	b.n	80002fc <LoopCopyDataInit>

080002f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fa:	3304      	adds	r3, #4

080002fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000300:	d3f9      	bcc.n	80002f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000302:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000304:	4c0a      	ldr	r4, [pc, #40]	@ (8000330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000308:	e001      	b.n	800030e <LoopFillZerobss>

0800030a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800030c:	3204      	adds	r2, #4

0800030e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000310:	d3fb      	bcc.n	800030a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000312:	f000 f811 	bl	8000338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000316:	f7ff ffa1 	bl	800025c <main>
  bx  lr    
 800031a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800031c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000324:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000328:	080003a0 	.word	0x080003a0
  ldr r2, =_sbss
 800032c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000330:	20000024 	.word	0x20000024

08000334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000334:	e7fe      	b.n	8000334 <ADC_IRQHandler>
	...

08000338 <__libc_init_array>:
 8000338:	b570      	push	{r4, r5, r6, lr}
 800033a:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <__libc_init_array+0x38>)
 800033c:	4d0d      	ldr	r5, [pc, #52]	@ (8000374 <__libc_init_array+0x3c>)
 800033e:	1b5b      	subs	r3, r3, r5
 8000340:	109c      	asrs	r4, r3, #2
 8000342:	2600      	movs	r6, #0
 8000344:	42a6      	cmp	r6, r4
 8000346:	d109      	bne.n	800035c <__libc_init_array+0x24>
 8000348:	f000 f81a 	bl	8000380 <_init>
 800034c:	4d0a      	ldr	r5, [pc, #40]	@ (8000378 <__libc_init_array+0x40>)
 800034e:	4b0b      	ldr	r3, [pc, #44]	@ (800037c <__libc_init_array+0x44>)
 8000350:	1b5b      	subs	r3, r3, r5
 8000352:	109c      	asrs	r4, r3, #2
 8000354:	2600      	movs	r6, #0
 8000356:	42a6      	cmp	r6, r4
 8000358:	d105      	bne.n	8000366 <__libc_init_array+0x2e>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000360:	4798      	blx	r3
 8000362:	3601      	adds	r6, #1
 8000364:	e7ee      	b.n	8000344 <__libc_init_array+0xc>
 8000366:	f855 3b04 	ldr.w	r3, [r5], #4
 800036a:	4798      	blx	r3
 800036c:	3601      	adds	r6, #1
 800036e:	e7f2      	b.n	8000356 <__libc_init_array+0x1e>
 8000370:	08000398 	.word	0x08000398
 8000374:	08000398 	.word	0x08000398
 8000378:	08000398 	.word	0x08000398
 800037c:	0800039c 	.word	0x0800039c

08000380 <_init>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr

0800038c <_fini>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr
